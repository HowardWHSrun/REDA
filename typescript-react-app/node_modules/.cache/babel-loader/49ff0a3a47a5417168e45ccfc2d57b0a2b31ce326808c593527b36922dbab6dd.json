{"ast":null,"code":"var _jsxFileName = \"/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/src/components/FolderBrowser/FolderBrowser.tsx\",\n  _s = $RefreshSig$();\n// ========================================================================\n// REDA EMC Testing Tool - Folder Browser Component\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Folder navigation component for browsing and selecting files\n// ========================================================================\n\nimport React, { useState, useCallback } from 'react';\nimport { CsvService } from '../../services/CsvService';\nimport { BAND_DEFINITIONS } from '../../constants';\nimport './FolderBrowser.css';\n\n// ========================================================================\n// INTERFACES\n// ========================================================================\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// ========================================================================\n// FOLDER BROWSER COMPONENT\n// ========================================================================\n\nexport const FolderBrowser = ({\n  panelId,\n  title,\n  maxFiles = 8,\n  onFilesSelected\n}) => {\n  _s();\n  const [currentPath, setCurrentPath] = useState('');\n  const [folderContents, setFolderContents] = useState([]);\n  const [filteredContents, setFilteredContents] = useState([]);\n  const [selectedFiles, setSelectedFiles] = useState(new Set());\n  const [selectedBandFilter, setSelectedBandFilter] = useState('all');\n  const [, setSelectedBands] = useState(new Set());\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [pathHistory, setPathHistory] = useState([]);\n\n  // ========================================================================\n  // FILTERING AND BAND DETECTION\n  // ========================================================================\n\n  const applyFilters = useCallback(items => {\n    let filtered = [...items];\n\n    // Filter by band if not 'all'\n    if (selectedBandFilter !== 'all') {\n      filtered = filtered.filter(item => item.type === 'folder' || item.isCSV && item.detectedBand === selectedBandFilter);\n    }\n    setFilteredContents(filtered);\n  }, [selectedBandFilter]);\n\n  // Apply filters whenever band filter or folder contents change\n  React.useEffect(() => {\n    applyFilters(folderContents);\n  }, [folderContents, selectedBandFilter, applyFilters]);\n\n  // ========================================================================\n  // FOLDER NAVIGATION\n  // ========================================================================\n\n  const loadFolderContents = useCallback(async dirHandle => {\n    setIsLoading(true);\n    setError('');\n    const items = [];\n    try {\n      for await (const [name, handle] of dirHandle.entries()) {\n        const isFile = handle.kind === 'file';\n        const isCSV = isFile ? CsvService.isValidCsvFile({\n          name\n        }) : false;\n\n        // Only include CSV files\n        if (isFile && !isCSV) {\n          continue;\n        }\n        const item = {\n          name,\n          path: `${currentPath}/${name}`,\n          type: isFile ? 'file' : 'folder',\n          isCSV,\n          fileHandle: isFile ? handle : undefined // Store the file handle for later access\n        };\n        if (isFile) {\n          try {\n            const file = await handle.getFile();\n            item.size = file.size;\n            item.modified = new Date(file.lastModified);\n\n            // Detect band for CSV files\n            if (item.isCSV) {\n              const bandFromFilename = CsvService.detectBandFromFilename(name);\n              if (bandFromFilename) {\n                item.detectedBand = bandFromFilename;\n                item.bandConfidence = 'high';\n              } else {\n                // Just detect from filename for now to avoid parsing all files\n                item.detectedBand = null;\n                item.bandConfidence = 'low';\n              }\n            }\n          } catch (err) {\n            // Skip files we can't access\n            continue;\n          }\n        }\n        items.push(item);\n      }\n\n      // Sort: folders first, then files, alphabetically\n      items.sort((a, b) => {\n        if (a.type !== b.type) {\n          return a.type === 'folder' ? -1 : 1;\n        }\n        return a.name.localeCompare(b.name);\n      });\n      setFolderContents(items);\n\n      // Apply filters inline to avoid dependency issues\n      let filtered = [...items];\n      if (selectedBandFilter !== 'all') {\n        filtered = filtered.filter(item => item.type === 'folder' || item.isCSV && item.detectedBand === selectedBandFilter);\n      }\n      setFilteredContents(filtered);\n    } catch (error) {\n      setError('Failed to read folder contents.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentPath, selectedBandFilter]);\n  const loadFolderContentsFromFiles = useCallback(files => {\n    setIsLoading(true);\n    setError('');\n    const items = [];\n    const seenPaths = new Set();\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      const pathParts = file.webkitRelativePath.split('/');\n\n      // Add folders in the path\n      for (let j = 1; j < pathParts.length - 1; j++) {\n        const folderPath = pathParts.slice(0, j + 1).join('/');\n        if (!seenPaths.has(folderPath)) {\n          seenPaths.add(folderPath);\n          items.push({\n            name: pathParts[j],\n            path: folderPath,\n            type: 'folder'\n          });\n        }\n      }\n\n      // Add the file\n      if (!seenPaths.has(file.webkitRelativePath)) {\n        seenPaths.add(file.webkitRelativePath);\n        const isCSV = CsvService.isValidCsvFile(file);\n\n        // Only include CSV files\n        if (!isCSV) {\n          continue;\n        }\n        const item = {\n          name: file.name,\n          path: file.webkitRelativePath,\n          type: 'file',\n          size: file.size,\n          modified: new Date(file.lastModified),\n          isCSV\n        };\n\n        // Detect band for CSV files\n        if (isCSV) {\n          const bandFromFilename = CsvService.detectBandFromFilename(file.name);\n          if (bandFromFilename) {\n            item.detectedBand = bandFromFilename;\n            item.bandConfidence = 'high';\n          } else {\n            item.detectedBand = null;\n            item.bandConfidence = 'low';\n          }\n        }\n        items.push(item);\n      }\n    }\n\n    // Filter to show only items in current directory level\n    const currentLevel = currentPath.split('/').length;\n    const currentLevelItems = items.filter(item => {\n      const itemLevel = item.path.split('/').length;\n      return itemLevel === currentLevel + 1 && item.path.startsWith(currentPath);\n    });\n    setFolderContents(currentLevelItems);\n\n    // Apply filters inline to avoid dependency issues\n    let filtered = [...currentLevelItems];\n    if (selectedBandFilter !== 'all') {\n      filtered = filtered.filter(item => item.type === 'folder' || item.isCSV && item.detectedBand === selectedBandFilter);\n    }\n    setFilteredContents(filtered);\n    setIsLoading(false);\n  }, [currentPath, selectedBandFilter]);\n  const openFolderDialog = useCallback(async () => {\n    try {\n      // Use the File System Access API for modern browsers\n      if ('showDirectoryPicker' in window) {\n        const dirHandle = await window.showDirectoryPicker();\n        const path = dirHandle.name;\n        setCurrentPath(path);\n        await loadFolderContents(dirHandle);\n      } else {\n        // Fallback: use input element\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.webkitdirectory = true;\n        input.multiple = true;\n        input.onchange = e => {\n          const files = e.target.files;\n          if (files && files.length > 0) {\n            const firstFile = files[0];\n            const pathParts = firstFile.webkitRelativePath.split('/');\n            const folderName = pathParts[0];\n            setCurrentPath(folderName);\n            loadFolderContentsFromFiles(files);\n          }\n        };\n        input.click();\n      }\n    } catch (error) {\n      if (error.name !== 'AbortError') {\n        setError('Failed to open folder. Please try again.');\n      }\n    }\n  }, [loadFolderContents, loadFolderContentsFromFiles]);\n\n  // ========================================================================\n  // FILE SELECTION\n  // ========================================================================\n\n  const toggleFileSelection = useCallback((path, itemBand) => {\n    setSelectedFiles(prev => {\n      const newSelection = new Set();\n      let updatedBands = new Set();\n      if (prev.has(path)) {\n        // Deselecting the currently selected file - clear everything\n        newSelection.clear();\n        updatedBands.clear();\n        setSelectedBands(updatedBands);\n        console.log(`🗑️ Deselected file: ${path}`);\n      } else {\n        // Selecting a new file - replace any previous selection\n        newSelection.clear(); // Clear any previous selections\n        newSelection.add(path); // Add only the new file\n\n        // Update bands for the new selection\n        updatedBands.clear();\n        if (itemBand) {\n          updatedBands.add(itemBand);\n          setSelectedBands(updatedBands);\n          console.log(`🔄 Selected new file: ${path} (${itemBand} band) - replacing any previous selection`);\n        } else {\n          setSelectedBands(updatedBands);\n          console.log(`🔄 Selected new file: ${path} (Unknown band) - replacing any previous selection`);\n        }\n        setError(''); // Clear any previous errors\n      }\n\n      // Always trigger file loading when selection changes (including when clearing)\n      setTimeout(() => {\n        const selectedItems = filteredContents.filter(item => newSelection.has(item.path) && item.type === 'file' && item.isCSV);\n\n        // Always call the callback, even when no files are selected (to clear the plot)\n        if (onFilesSelected) {\n          onFilesSelected(selectedItems);\n        }\n      }, 100); // Small delay to ensure state updates are complete\n\n      return newSelection;\n    });\n  }, [filteredContents, onFilesSelected]);\n\n  // ========================================================================\n  // NAVIGATION\n  // ========================================================================\n\n  const navigateToFolder = useCallback(folderPath => {\n    setPathHistory(prev => [...prev, currentPath]);\n    setCurrentPath(folderPath);\n    setSelectedFiles(new Set());\n    setSelectedBands(new Set());\n    setError('');\n  }, [currentPath]);\n  const navigateBack = useCallback(() => {\n    if (pathHistory.length > 0) {\n      const previousPath = pathHistory[pathHistory.length - 1];\n      setPathHistory(prev => prev.slice(0, -1));\n      setCurrentPath(previousPath);\n      setSelectedFiles(new Set());\n    }\n  }, [pathHistory]);\n  const navigateToRoot = useCallback(() => {\n    setCurrentPath('');\n    setPathHistory([]);\n    setFolderContents([]);\n    setSelectedFiles(new Set());\n  }, []);\n\n  // ========================================================================\n  // CLEAR SELECTION\n  // ========================================================================\n\n  const clearSelection = useCallback(() => {\n    setSelectedFiles(new Set());\n    setSelectedBands(new Set());\n    setError('');\n\n    // Notify parent that no files are selected\n    if (onFilesSelected) {\n      onFilesSelected([]);\n    }\n  }, [onFilesSelected]);\n\n  // ========================================================================\n  // RENDER HELPERS\n  // ========================================================================\n\n  const renderPathBreadcrumb = () => {\n    if (!currentPath) return null;\n    const pathParts = currentPath.split('/');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"path-breadcrumb\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: navigateToRoot,\n        className: \"breadcrumb-item root\",\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this), pathParts.map((part, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"breadcrumb-separator\",\n          children: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"breadcrumb-item\",\n          children: part\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this);\n  };\n  const renderFolderItem = item => {\n    const isSelected = selectedFiles.has(item.path);\n    const isSelectable = item.type === 'file' && item.isCSV;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `folder-item ${item.type} ${isSelected ? 'selected' : ''} ${isSelectable ? 'selectable' : ''}`,\n      onClick: () => {\n        if (item.type === 'folder') {\n          navigateToFolder(item.path);\n        } else if (isSelectable) {\n          toggleFileSelection(item.path, item.detectedBand);\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-icon\",\n        children: item.type === 'folder' ? '📁' : item.isCSV ? '📈' : '📄'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-name\",\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 11\n        }, this), item.type === 'file' && item.isCSV && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-meta\",\n          children: [item.detectedBand && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `band-indicator ${item.bandConfidence}`,\n            children: item.detectedBand\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 17\n          }, this), !item.detectedBand && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"band-indicator unknown\",\n            children: \"Unknown Band\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 9\n      }, this), isSelectable && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selection-indicator\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isSelected,\n          onChange: () => toggleFileSelection(item.path, item.detectedBand),\n          onClick: e => e.stopPropagation()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 11\n      }, this)]\n    }, item.path, true, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }, this);\n  };\n\n  // ========================================================================\n  // MAIN RENDER\n  // ========================================================================\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"folder-browser\",\n    \"data-panel-id\": panelId,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"browser-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        onClick: !isLoading ? openFolderDialog : undefined,\n        style: {\n          cursor: !isLoading ? 'pointer' : 'default',\n          userSelect: 'none',\n          color: !currentPath ? '#3498db' : 'inherit'\n        },\n        title: !currentPath ? 'Click to open folder' : `Click to change folder (${currentPath})`,\n        children: [title, currentPath ? ` - ${currentPath}` : ' (Click here to open folder)']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"browser-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: openFolderDialog,\n          className: \"open-folder-btn\",\n          disabled: isLoading,\n          children: currentPath ? 'Change Folder' : 'Open Folder'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this), pathHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: navigateBack,\n          className: \"back-btn\",\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 11\n    }, this), currentPath && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [renderPathBreadcrumb(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `band-filter-${panelId}`,\n            className: \"filter-label\",\n            children: \"Band Filter:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: `band-filter-${panelId}`,\n            value: selectedBandFilter,\n            onChange: e => {\n              setSelectedBandFilter(e.target.value);\n              applyFilters(folderContents);\n            },\n            className: \"band-filter-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"all\",\n              children: \"All Bands\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 17\n            }, this), Object.entries(BAND_DEFINITIONS).map(([bandType, definition]) => {\n              const count = folderContents.filter(item => item.detectedBand === bandType).length;\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: bandType,\n                children: [bandType, \": \", definition.range, \" (\", count, \" files)\"]\n              }, bandType, true, {\n                fileName: _jsxFileName,\n                lineNumber: 506,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-section\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: clearSelection,\n            disabled: selectedFiles.size === 0,\n            className: \"clear-all-btn\",\n            children: selectedFiles.size > 0 ? 'Clear Selection' : 'Clear All'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-contents\",\n      children: !currentPath ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-icon\",\n          children: \"\\uD83D\\uDCC2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Click \\\"Open Folder\\\" to browse and select CSV files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 11\n      }, this) : isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          children: \"\\u27F3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading folder contents...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 11\n      }, this) : filteredContents.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-folder\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-icon\",\n          children: \"\\uD83D\\uDCC2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: selectedBandFilter !== 'all' ? `No CSV files found for band ${selectedBandFilter}` : 'This folder is empty'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 13\n        }, this), selectedBandFilter !== 'all' && folderContents.length > 0 && /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Try selecting \\\"All Bands\\\" to see all files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"items-list\",\n        children: filteredContents.map(renderFolderItem)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 447,\n    columnNumber: 5\n  }, this);\n};\n_s(FolderBrowser, \"2wzFqXFEmc38Hkl+Pi9e/mLSI08=\");\n_c = FolderBrowser;\nexport default FolderBrowser;\nvar _c;\n$RefreshReg$(_c, \"FolderBrowser\");","map":{"version":3,"names":["React","useState","useCallback","CsvService","BAND_DEFINITIONS","jsxDEV","_jsxDEV","Fragment","_Fragment","FolderBrowser","panelId","title","maxFiles","onFilesSelected","_s","currentPath","setCurrentPath","folderContents","setFolderContents","filteredContents","setFilteredContents","selectedFiles","setSelectedFiles","Set","selectedBandFilter","setSelectedBandFilter","setSelectedBands","isLoading","setIsLoading","error","setError","pathHistory","setPathHistory","applyFilters","items","filtered","filter","item","type","isCSV","detectedBand","useEffect","loadFolderContents","dirHandle","name","handle","entries","isFile","kind","isValidCsvFile","path","fileHandle","undefined","file","getFile","size","modified","Date","lastModified","bandFromFilename","detectBandFromFilename","bandConfidence","err","push","sort","a","b","localeCompare","loadFolderContentsFromFiles","files","seenPaths","i","length","pathParts","webkitRelativePath","split","j","folderPath","slice","join","has","add","currentLevel","currentLevelItems","itemLevel","startsWith","openFolderDialog","window","showDirectoryPicker","input","document","createElement","webkitdirectory","multiple","onchange","e","target","firstFile","folderName","click","toggleFileSelection","itemBand","prev","newSelection","updatedBands","clear","console","log","setTimeout","selectedItems","navigateToFolder","navigateBack","previousPath","navigateToRoot","clearSelection","renderPathBreadcrumb","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","part","index","renderFolderItem","isSelected","isSelectable","checked","onChange","stopPropagation","style","cursor","userSelect","color","disabled","htmlFor","id","value","Object","bandType","definition","count","range","_c","$RefreshReg$"],"sources":["/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/src/components/FolderBrowser/FolderBrowser.tsx"],"sourcesContent":["// ========================================================================\n// REDA EMC Testing Tool - Folder Browser Component\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Folder navigation component for browsing and selecting files\n// ========================================================================\n\nimport React, { useState, useCallback } from 'react';\nimport { CsvService } from '../../services/CsvService';\nimport { BandType } from '../../types';\nimport { BAND_DEFINITIONS } from '../../constants';\nimport './FolderBrowser.css';\n\n// ========================================================================\n// INTERFACES\n// ========================================================================\n\ninterface FolderItem {\n  name: string;\n  path: string;\n  type: 'file' | 'folder';\n  size?: number;\n  modified?: Date;\n  isCSV?: boolean;\n  detectedBand?: BandType | null;\n  bandConfidence?: 'high' | 'medium' | 'low';\n  fileHandle?: any; // File handle for File System Access API\n}\n\ninterface FolderBrowserProps {\n  panelId: string;\n  title: string;\n  maxFiles?: number;\n  onFilesSelected?: (files: FolderItem[]) => void;\n}\n\n// ========================================================================\n// FOLDER BROWSER COMPONENT\n// ========================================================================\n\nexport const FolderBrowser: React.FC<FolderBrowserProps> = ({\n  panelId,\n  title,\n  maxFiles = 8,\n  onFilesSelected\n}) => {\n  const [currentPath, setCurrentPath] = useState<string>('');\n  const [folderContents, setFolderContents] = useState<FolderItem[]>([]);\n  const [filteredContents, setFilteredContents] = useState<FolderItem[]>([]);\n  const [selectedFiles, setSelectedFiles] = useState<Set<string>>(new Set());\n  const [selectedBandFilter, setSelectedBandFilter] = useState<BandType | 'all'>('all');\n  const [, setSelectedBands] = useState<Set<BandType>>(new Set());\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string>('');\n  const [pathHistory, setPathHistory] = useState<string[]>([]);\n\n  // ========================================================================\n  // FILTERING AND BAND DETECTION\n  // ========================================================================\n\n  const applyFilters = useCallback((items: FolderItem[]) => {\n    let filtered = [...items];\n\n    // Filter by band if not 'all'\n    if (selectedBandFilter !== 'all') {\n      filtered = filtered.filter(item => \n        item.type === 'folder' || \n        (item.isCSV && item.detectedBand === selectedBandFilter)\n      );\n    }\n\n    setFilteredContents(filtered);\n  }, [selectedBandFilter]);\n\n  // Apply filters whenever band filter or folder contents change\n  React.useEffect(() => {\n    applyFilters(folderContents);\n  }, [folderContents, selectedBandFilter, applyFilters]);\n\n  // ========================================================================\n  // FOLDER NAVIGATION\n  // ========================================================================\n\n  const loadFolderContents = useCallback(async (dirHandle: any) => {\n    setIsLoading(true);\n    setError('');\n    const items: FolderItem[] = [];\n\n    try {\n      for await (const [name, handle] of dirHandle.entries()) {\n        const isFile = handle.kind === 'file';\n        const isCSV = isFile ? CsvService.isValidCsvFile({ name } as File) : false;\n        \n        // Only include CSV files\n        if (isFile && !isCSV) {\n          continue;\n        }\n\n        const item: FolderItem = {\n          name,\n          path: `${currentPath}/${name}`,\n          type: isFile ? 'file' : 'folder',\n          isCSV,\n          fileHandle: isFile ? handle : undefined // Store the file handle for later access\n        };\n\n        if (isFile) {\n          try {\n            const file = await handle.getFile();\n            item.size = file.size;\n            item.modified = new Date(file.lastModified);\n            \n            // Detect band for CSV files\n            if (item.isCSV) {\n              const bandFromFilename = CsvService.detectBandFromFilename(name);\n              if (bandFromFilename) {\n                item.detectedBand = bandFromFilename;\n                item.bandConfidence = 'high';\n              } else {\n                // Just detect from filename for now to avoid parsing all files\n                item.detectedBand = null;\n                item.bandConfidence = 'low';\n              }\n            }\n          } catch (err) {\n            // Skip files we can't access\n            continue;\n          }\n        }\n\n        items.push(item);\n      }\n\n      // Sort: folders first, then files, alphabetically\n      items.sort((a, b) => {\n        if (a.type !== b.type) {\n          return a.type === 'folder' ? -1 : 1;\n        }\n        return a.name.localeCompare(b.name);\n      });\n\n      setFolderContents(items);\n      \n      // Apply filters inline to avoid dependency issues\n      let filtered = [...items];\n      if (selectedBandFilter !== 'all') {\n        filtered = filtered.filter(item => \n          item.type === 'folder' || \n          (item.isCSV && item.detectedBand === selectedBandFilter)\n        );\n      }\n      setFilteredContents(filtered);\n    } catch (error) {\n      setError('Failed to read folder contents.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentPath, selectedBandFilter]);\n\n  const loadFolderContentsFromFiles = useCallback((files: FileList) => {\n    setIsLoading(true);\n    setError('');\n    const items: FolderItem[] = [];\n    const seenPaths = new Set<string>();\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      const pathParts = file.webkitRelativePath.split('/');\n      \n      // Add folders in the path\n      for (let j = 1; j < pathParts.length - 1; j++) {\n        const folderPath = pathParts.slice(0, j + 1).join('/');\n        if (!seenPaths.has(folderPath)) {\n          seenPaths.add(folderPath);\n          items.push({\n            name: pathParts[j],\n            path: folderPath,\n            type: 'folder'\n          });\n        }\n      }\n\n      // Add the file\n      if (!seenPaths.has(file.webkitRelativePath)) {\n        seenPaths.add(file.webkitRelativePath);\n        const isCSV = CsvService.isValidCsvFile(file);\n        \n        // Only include CSV files\n        if (!isCSV) {\n          continue;\n        }\n\n        const item: FolderItem = {\n          name: file.name,\n          path: file.webkitRelativePath,\n          type: 'file',\n          size: file.size,\n          modified: new Date(file.lastModified),\n          isCSV\n        };\n\n        // Detect band for CSV files\n        if (isCSV) {\n          const bandFromFilename = CsvService.detectBandFromFilename(file.name);\n          if (bandFromFilename) {\n            item.detectedBand = bandFromFilename;\n            item.bandConfidence = 'high';\n          } else {\n            item.detectedBand = null;\n            item.bandConfidence = 'low';\n          }\n        }\n\n        items.push(item);\n      }\n    }\n\n    // Filter to show only items in current directory level\n    const currentLevel = currentPath.split('/').length;\n    const currentLevelItems = items.filter(item => {\n      const itemLevel = item.path.split('/').length;\n      return itemLevel === currentLevel + 1 && item.path.startsWith(currentPath);\n    });\n\n    setFolderContents(currentLevelItems);\n    \n    // Apply filters inline to avoid dependency issues\n    let filtered = [...currentLevelItems];\n    if (selectedBandFilter !== 'all') {\n      filtered = filtered.filter(item => \n        item.type === 'folder' || \n        (item.isCSV && item.detectedBand === selectedBandFilter)\n      );\n    }\n    setFilteredContents(filtered);\n    setIsLoading(false);\n  }, [currentPath, selectedBandFilter]);\n\n  const openFolderDialog = useCallback(async () => {\n    try {\n      // Use the File System Access API for modern browsers\n      if ('showDirectoryPicker' in window) {\n        const dirHandle = await (window as any).showDirectoryPicker();\n        const path = dirHandle.name;\n        setCurrentPath(path);\n        await loadFolderContents(dirHandle);\n      } else {\n        // Fallback: use input element\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.webkitdirectory = true;\n        input.multiple = true;\n        \n        input.onchange = (e) => {\n          const files = (e.target as HTMLInputElement).files;\n          if (files && files.length > 0) {\n            const firstFile = files[0];\n            const pathParts = firstFile.webkitRelativePath.split('/');\n            const folderName = pathParts[0];\n            setCurrentPath(folderName);\n            loadFolderContentsFromFiles(files);\n          }\n        };\n        \n        input.click();\n      }\n    } catch (error) {\n      if ((error as Error).name !== 'AbortError') {\n        setError('Failed to open folder. Please try again.');\n      }\n    }\n  }, [loadFolderContents, loadFolderContentsFromFiles]);\n\n  // ========================================================================\n  // FILE SELECTION\n  // ========================================================================\n\n    const toggleFileSelection = useCallback((path: string, itemBand?: BandType | null) => {\n    setSelectedFiles(prev => {\n      const newSelection = new Set<string>();\n      let updatedBands = new Set<BandType>();\n      \n      if (prev.has(path)) {\n        // Deselecting the currently selected file - clear everything\n        newSelection.clear();\n        updatedBands.clear();\n            setSelectedBands(updatedBands);\n        console.log(`🗑️ Deselected file: ${path}`);\n      } else {\n        // Selecting a new file - replace any previous selection\n        newSelection.clear(); // Clear any previous selections\n        newSelection.add(path); // Add only the new file\n        \n        // Update bands for the new selection\n        updatedBands.clear();\n        if (itemBand) {\n          updatedBands.add(itemBand);\n          setSelectedBands(updatedBands);\n          console.log(`🔄 Selected new file: ${path} (${itemBand} band) - replacing any previous selection`);\n        } else {\n          setSelectedBands(updatedBands);\n          console.log(`🔄 Selected new file: ${path} (Unknown band) - replacing any previous selection`);\n        }\n        \n        setError(''); // Clear any previous errors\n      }\n\n      // Always trigger file loading when selection changes (including when clearing)\n      setTimeout(() => {\n        const selectedItems = filteredContents.filter(item => \n          newSelection.has(item.path) && item.type === 'file' && item.isCSV\n        );\n        \n        // Always call the callback, even when no files are selected (to clear the plot)\n        if (onFilesSelected) {\n          onFilesSelected(selectedItems);\n        }\n      }, 100); // Small delay to ensure state updates are complete\n      \n      return newSelection;\n    });\n  }, [filteredContents, onFilesSelected]);\n\n  // ========================================================================\n  // NAVIGATION\n  // ========================================================================\n\n  const navigateToFolder = useCallback((folderPath: string) => {\n    setPathHistory(prev => [...prev, currentPath]);\n    setCurrentPath(folderPath);\n    setSelectedFiles(new Set());\n    setSelectedBands(new Set());\n    setError('');\n  }, [currentPath]);\n\n  const navigateBack = useCallback(() => {\n    if (pathHistory.length > 0) {\n      const previousPath = pathHistory[pathHistory.length - 1];\n      setPathHistory(prev => prev.slice(0, -1));\n      setCurrentPath(previousPath);\n      setSelectedFiles(new Set());\n    }\n  }, [pathHistory]);\n\n  const navigateToRoot = useCallback(() => {\n    setCurrentPath('');\n    setPathHistory([]);\n    setFolderContents([]);\n    setSelectedFiles(new Set());\n  }, []);\n\n  // ========================================================================\n  // CLEAR SELECTION\n  // ========================================================================\n\n  const clearSelection = useCallback(() => {\n    setSelectedFiles(new Set());\n    setSelectedBands(new Set());\n    setError('');\n    \n    // Notify parent that no files are selected\n    if (onFilesSelected) {\n      onFilesSelected([]);\n    }\n  }, [onFilesSelected]);\n\n  // ========================================================================\n  // RENDER HELPERS\n  // ========================================================================\n\n  const renderPathBreadcrumb = () => {\n    if (!currentPath) return null;\n\n    const pathParts = currentPath.split('/');\n    \n    return (\n      <div className=\"path-breadcrumb\">\n        <button onClick={navigateToRoot} className=\"breadcrumb-item root\">\n          Home\n        </button>\n        {pathParts.map((part, index) => (\n          <React.Fragment key={index}>\n            <span className=\"breadcrumb-separator\">/</span>\n            <span className=\"breadcrumb-item\">{part}</span>\n          </React.Fragment>\n        ))}\n      </div>\n    );\n  };\n\n  const renderFolderItem = (item: FolderItem) => {\n    const isSelected = selectedFiles.has(item.path);\n    const isSelectable = item.type === 'file' && item.isCSV;\n\n    return (\n      <div\n        key={item.path}\n        className={`folder-item ${item.type} ${isSelected ? 'selected' : ''} ${isSelectable ? 'selectable' : ''}`}\n        onClick={() => {\n          if (item.type === 'folder') {\n            navigateToFolder(item.path);\n          } else if (isSelectable) {\n            toggleFileSelection(item.path, item.detectedBand);\n          }\n        }}\n      >\n        <div className=\"item-icon\">\n          {item.type === 'folder' ? '📁' : item.isCSV ? '📈' : '📄'}\n        </div>\n        <div className=\"item-details\">\n          <div className=\"item-name\">{item.name}</div>\n          {item.type === 'file' && item.isCSV && (\n            <div className=\"item-meta\">\n              {item.detectedBand && (\n                <span className={`band-indicator ${item.bandConfidence}`}>\n                  {item.detectedBand}\n                </span>\n              )}\n              {!item.detectedBand && (\n                <span className=\"band-indicator unknown\">\n                  Unknown Band\n                </span>\n              )}\n            </div>\n          )}\n        </div>\n        {isSelectable && (\n          <div className=\"selection-indicator\">\n            <input \n              type=\"checkbox\" \n              checked={isSelected} \n              onChange={() => toggleFileSelection(item.path, item.detectedBand)}\n              onClick={(e) => e.stopPropagation()}\n            />\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // ========================================================================\n  // MAIN RENDER\n  // ========================================================================\n\n  return (\n    <div className=\"folder-browser\" data-panel-id={panelId}>\n      <div className=\"browser-header\">\n        <h3 \n          onClick={!isLoading ? openFolderDialog : undefined}\n          style={{ \n            cursor: !isLoading ? 'pointer' : 'default',\n            userSelect: 'none',\n            color: !currentPath ? '#3498db' : 'inherit'\n          }}\n          title={!currentPath ? 'Click to open folder' : `Click to change folder (${currentPath})`}\n        >\n          {title}\n          {currentPath ? ` - ${currentPath}` : ' (Click here to open folder)'}\n        </h3>\n        <div className=\"browser-controls\">\n          <button \n            onClick={openFolderDialog}\n            className=\"open-folder-btn\"\n            disabled={isLoading}\n          >\n            {currentPath ? 'Change Folder' : 'Open Folder'}\n          </button>\n          {pathHistory.length > 0 && (\n            <button onClick={navigateBack} className=\"back-btn\">\n              Back\n            </button>\n          )}\n        </div>\n      </div>\n\n              {error && (\n          <div className=\"error-message\">\n            {error}\n          </div>\n        )}\n\n      {currentPath && (\n        <>\n          {renderPathBreadcrumb()}\n          \n          {/* Simplified Controls */}\n          <div className=\"filter-controls\">\n            <div className=\"filter-section\">\n              <label htmlFor={`band-filter-${panelId}`} className=\"filter-label\">\n                Band Filter:\n              </label>\n              <select\n                id={`band-filter-${panelId}`}\n                value={selectedBandFilter}\n                onChange={(e) => {\n                  setSelectedBandFilter(e.target.value as BandType | 'all');\n                  applyFilters(folderContents);\n                }}\n                className=\"band-filter-select\"\n              >\n                <option value=\"all\">All Bands</option>\n                {Object.entries(BAND_DEFINITIONS).map(([bandType, definition]) => {\n                  const count = folderContents.filter(item => item.detectedBand === bandType).length;\n                  return (\n                    <option key={bandType} value={bandType}>\n                      {bandType}: {definition.range} ({count} files)\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n            <div className=\"action-section\">\n              <button \n                onClick={clearSelection}\n                disabled={selectedFiles.size === 0}\n                className=\"clear-all-btn\"\n              >\n                {selectedFiles.size > 0 ? 'Clear Selection' : 'Clear All'}\n              </button>\n            </div>\n          </div>\n        </>\n      )}\n\n      <div className=\"folder-contents\">\n        {!currentPath ? (\n          <div className=\"empty-state\">\n            <div className=\"empty-icon\">📂</div>\n            <p>Click \"Open Folder\" to browse and select CSV files</p>\n          </div>\n        ) : isLoading ? (\n          <div className=\"loading-state\">\n            <div className=\"spinner\">⟳</div>\n            <p>Loading folder contents...</p>\n          </div>\n        ) : filteredContents.length === 0 ? (\n          <div className=\"empty-folder\">\n            <div className=\"empty-icon\">📂</div>\n            <p>{selectedBandFilter !== 'all' ? `No CSV files found for band ${selectedBandFilter}` : 'This folder is empty'}</p>\n            {selectedBandFilter !== 'all' && folderContents.length > 0 && (\n              <small>Try selecting \"All Bands\" to see all files</small>\n            )}\n          </div>\n        ) : (\n          <div className=\"items-list\">\n            {filteredContents.map(renderFolderItem)}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FolderBrowser; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}