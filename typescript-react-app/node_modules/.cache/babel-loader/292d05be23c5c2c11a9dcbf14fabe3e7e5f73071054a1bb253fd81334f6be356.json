{"ast":null,"code":"import _objectSpread from\"/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncIterator from\"/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";// ========================================================================\n// REDA EMC Testing Tool - Folder Browser Component\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Folder navigation component for browsing and selecting files\n// ========================================================================\nimport React,{useState,useCallback}from'react';import{CsvService}from'../../services/CsvService';import{NoiseAnalysisService}from'../../services/NoiseAnalysisService';import{BAND_DEFINITIONS}from'../../constants';import'./FolderBrowser.css';// ========================================================================\n// INTERFACES\n// ========================================================================\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";// ========================================================================\n// FOLDER BROWSER COMPONENT\n// ========================================================================\nexport const FolderBrowser=_ref=>{let{panelId,title,maxFiles=8,onFilesSelected}=_ref;const[currentPath,setCurrentPath]=useState('');const[folderContents,setFolderContents]=useState([]);const[filteredContents,setFilteredContents]=useState([]);const[selectedFiles,setSelectedFiles]=useState(new Set());const[selectedBandFilter,setSelectedBandFilter]=useState('all');const[,setSelectedBands]=useState(new Set());const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState('');const[pathHistory,setPathHistory]=useState([]);const[sortBy,setSortBy]=useState('noisiness');const[isAnalyzingNoise,setIsAnalyzingNoise]=useState(false);// ========================================================================\n// NOISINESS ANALYSIS\n// ========================================================================\nconst batchAnalyzeNoisiness=useCallback(async items=>{const csvFiles=items.filter(item=>item.isCSV&&item.fileHandle);if(csvFiles.length===0)return;setIsAnalyzingNoise(true);console.log(\"\\uD83D\\uDD0A Analyzing band-relative noisiness for \".concat(csvFiles.length,\" CSV files...\"));// Parse all CSV files first\nconst filesData=[];for(const item of csvFiles){try{const file=await item.fileHandle.getFile();const parseResult=await CsvService.parseCsvFile(file);if(parseResult.success&&parseResult.data){// Detect band from frequency data if not already detected\nlet detectedBand=item.detectedBand;if(!detectedBand){const frequencies=parseResult.data.map(point=>point.frequency/1e6);const minFreq=Math.min(...frequencies);const maxFreq=Math.max(...frequencies);detectedBand=CsvService.detectBandFromFrequencyRange(minFreq,maxFreq);}filesData.push({filename:item.name,data:parseResult.data,band:detectedBand||'Unknown',item});}}catch(error){console.warn(\"Failed to parse \".concat(item.name,\":\"),error);}}if(filesData.length===0){setIsAnalyzingNoise(false);return;}// Use band-relative noisiness analysis\nconst analyses=NoiseAnalysisService.calculateBandRelativeNoisiness(filesData);// Update items with analysis results\nconst updatedItems=[...items];analyses.forEach(analysis=>{const fileData=filesData.find(fd=>fd.filename===analysis.filename);if(fileData){const itemIndex=updatedItems.findIndex(ui=>ui.path===fileData.item.path);if(itemIndex>=0){updatedItems[itemIndex]=_objectSpread(_objectSpread({},updatedItems[itemIndex]),{},{noisinessAnalysis:analysis,detectedBand:fileData.band// Update band if it was detected\n});}}});setFolderContents(updatedItems);setIsAnalyzingNoise(false);console.log(\"\\u2705 Band-relative noisiness analysis complete for \".concat(csvFiles.length,\" files\"));console.log(\"\\uD83D\\uDCCA Results: Files now ranked 1-10 within their respective bands (1=quietest, 10=noisiest)\");},[]);// ========================================================================\n// FILTERING AND BAND DETECTION\n// ========================================================================\nconst applyFilters=useCallback(items=>{let filtered=[...items];// Filter by band if not 'all'\nif(selectedBandFilter!=='all'){filtered=filtered.filter(item=>item.type==='folder'||item.isCSV&&item.detectedBand===selectedBandFilter);}// Sort items\nfiltered.sort((a,b)=>{var _a$noisinessAnalysis$,_a$noisinessAnalysis,_b$noisinessAnalysis$,_b$noisinessAnalysis;// Always put folders first\nif(a.type!==b.type){return a.type==='folder'?-1:1;}// For files, sort by selected criteria\nif(a.type==='file'&&b.type==='file'){switch(sortBy){case'noisiness':const aNoise=(_a$noisinessAnalysis$=(_a$noisinessAnalysis=a.noisinessAnalysis)===null||_a$noisinessAnalysis===void 0?void 0:_a$noisinessAnalysis.noisinessIndex)!==null&&_a$noisinessAnalysis$!==void 0?_a$noisinessAnalysis$:-1;const bNoise=(_b$noisinessAnalysis$=(_b$noisinessAnalysis=b.noisinessAnalysis)===null||_b$noisinessAnalysis===void 0?void 0:_b$noisinessAnalysis.noisinessIndex)!==null&&_b$noisinessAnalysis$!==void 0?_b$noisinessAnalysis$:-1;// Sort by noisiness descending (noisiest first), then by name\nif(aNoise!==bNoise){return bNoise-aNoise;}break;case'band':const aBand=a.detectedBand||'ZZ';const bBand=b.detectedBand||'ZZ';if(aBand!==bBand){return aBand.localeCompare(bBand);}break;case'name':default:// Fall through to name sorting\nbreak;}}// Default: sort by name\nreturn a.name.localeCompare(b.name);});setFilteredContents(filtered);},[selectedBandFilter,sortBy]);// Apply filters whenever band filter, sort option, or folder contents change\nReact.useEffect(()=>{applyFilters(folderContents);},[folderContents,selectedBandFilter,sortBy,applyFilters]);// ========================================================================\n// FOLDER NAVIGATION\n// ========================================================================\nconst loadFolderContents=useCallback(async dirHandle=>{setIsLoading(true);setError('');const items=[];try{var _iteratorAbruptCompletion=false;var _didIteratorError=false;var _iteratorError;try{for(var _iterator=_asyncIterator(dirHandle.entries()),_step;_iteratorAbruptCompletion=!(_step=await _iterator.next()).done;_iteratorAbruptCompletion=false){const[name,handle]=_step.value;{const isFile=handle.kind==='file';const isCSV=isFile?CsvService.isValidCsvFile({name}):false;// Only include CSV files\nif(isFile&&!isCSV){continue;}const item={name,path:\"\".concat(currentPath,\"/\").concat(name),type:isFile?'file':'folder',isCSV,fileHandle:isFile?handle:undefined// Store the file handle for later access\n};if(isFile){try{const file=await handle.getFile();item.size=file.size;item.modified=new Date(file.lastModified);// Detect band for CSV files\nif(item.isCSV){const bandFromFilename=CsvService.detectBandFromFilename(name);if(bandFromFilename){item.detectedBand=bandFromFilename;item.bandConfidence='high';}else{// Just detect from filename for now to avoid parsing all files\nitem.detectedBand=null;item.bandConfidence='low';}}}catch(err){// Skip files we can't access\ncontinue;}}items.push(item);}}// Sort: folders first, then files, alphabetically\n}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(_iteratorAbruptCompletion&&_iterator.return!=null){await _iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}items.sort((a,b)=>{if(a.type!==b.type){return a.type==='folder'?-1:1;}return a.name.localeCompare(b.name);});setFolderContents(items);// Apply filters inline to avoid dependency issues\nlet filtered=[...items];if(selectedBandFilter!=='all'){filtered=filtered.filter(item=>item.type==='folder'||item.isCSV&&item.detectedBand===selectedBandFilter);}setFilteredContents(filtered);// Start noisiness analysis for CSV files in the background\nsetTimeout(()=>batchAnalyzeNoisiness(items),100);}catch(error){setError('Failed to read folder contents.');}finally{setIsLoading(false);}},[currentPath,selectedBandFilter,batchAnalyzeNoisiness]);const loadFolderContentsFromFiles=useCallback(files=>{setIsLoading(true);setError('');const items=[];const seenPaths=new Set();for(let i=0;i<files.length;i++){const file=files[i];const pathParts=file.webkitRelativePath.split('/');// Add folders in the path\nfor(let j=1;j<pathParts.length-1;j++){const folderPath=pathParts.slice(0,j+1).join('/');if(!seenPaths.has(folderPath)){seenPaths.add(folderPath);items.push({name:pathParts[j],path:folderPath,type:'folder'});}}// Add the file\nif(!seenPaths.has(file.webkitRelativePath)){seenPaths.add(file.webkitRelativePath);const isCSV=CsvService.isValidCsvFile(file);// Only include CSV files\nif(!isCSV){continue;}const item={name:file.name,path:file.webkitRelativePath,type:'file',size:file.size,modified:new Date(file.lastModified),isCSV};// Detect band for CSV files\nif(isCSV){const bandFromFilename=CsvService.detectBandFromFilename(file.name);if(bandFromFilename){item.detectedBand=bandFromFilename;item.bandConfidence='high';}else{item.detectedBand=null;item.bandConfidence='low';}}items.push(item);}}// Filter to show only items in current directory level\nconst currentLevel=currentPath.split('/').length;const currentLevelItems=items.filter(item=>{const itemLevel=item.path.split('/').length;return itemLevel===currentLevel+1&&item.path.startsWith(currentPath);});setFolderContents(currentLevelItems);// Apply filters inline to avoid dependency issues\nlet filtered=[...currentLevelItems];if(selectedBandFilter!=='all'){filtered=filtered.filter(item=>item.type==='folder'||item.isCSV&&item.detectedBand===selectedBandFilter);}setFilteredContents(filtered);setIsLoading(false);// Note: Noisiness analysis not available for fallback file loading\n// since we don't have direct file handles in this mode\n},[currentPath,selectedBandFilter]);const openFolderDialog=useCallback(async()=>{try{// Use the File System Access API for modern browsers\nif('showDirectoryPicker'in window){const dirHandle=await window.showDirectoryPicker();const path=dirHandle.name;setCurrentPath(path);await loadFolderContents(dirHandle);}else{// Fallback: use input element\nconst input=document.createElement('input');input.type='file';input.webkitdirectory=true;input.multiple=true;input.onchange=e=>{const files=e.target.files;if(files&&files.length>0){const firstFile=files[0];const pathParts=firstFile.webkitRelativePath.split('/');const folderName=pathParts[0];setCurrentPath(folderName);loadFolderContentsFromFiles(files);}};input.click();}}catch(error){if(error.name!=='AbortError'){setError('Failed to open folder. Please try again.');}}},[loadFolderContents,loadFolderContentsFromFiles]);// ========================================================================\n// FILE SELECTION\n// ========================================================================\nconst toggleFileSelection=useCallback((path,itemBand)=>{setSelectedFiles(prev=>{const newSelection=new Set();let updatedBands=new Set();if(prev.has(path)){// Deselecting the currently selected file - clear everything\nnewSelection.clear();updatedBands.clear();setSelectedBands(updatedBands);console.log(\"\\uD83D\\uDDD1\\uFE0F Deselected file: \".concat(path));}else{// Selecting a new file - replace any previous selection\nnewSelection.clear();// Clear any previous selections\nnewSelection.add(path);// Add only the new file\n// Update bands for the new selection\nupdatedBands.clear();if(itemBand){updatedBands.add(itemBand);setSelectedBands(updatedBands);console.log(\"\\uD83D\\uDD04 Selected new file: \".concat(path,\" (\").concat(itemBand,\" band) - replacing any previous selection\"));}else{setSelectedBands(updatedBands);console.log(\"\\uD83D\\uDD04 Selected new file: \".concat(path,\" (Unknown band) - replacing any previous selection\"));}setError('');// Clear any previous errors\n}// Always trigger file loading when selection changes (including when clearing)\nsetTimeout(()=>{const selectedItems=filteredContents.filter(item=>newSelection.has(item.path)&&item.type==='file'&&item.isCSV);// Always call the callback, even when no files are selected (to clear the plot)\nif(onFilesSelected){onFilesSelected(selectedItems);}},100);// Small delay to ensure state updates are complete\nreturn newSelection;});},[filteredContents,onFilesSelected]);// ========================================================================\n// NAVIGATION\n// ========================================================================\nconst navigateToFolder=useCallback(folderPath=>{setPathHistory(prev=>[...prev,currentPath]);setCurrentPath(folderPath);setSelectedFiles(new Set());setSelectedBands(new Set());setError('');},[currentPath]);const navigateBack=useCallback(()=>{if(pathHistory.length>0){const previousPath=pathHistory[pathHistory.length-1];setPathHistory(prev=>prev.slice(0,-1));setCurrentPath(previousPath);setSelectedFiles(new Set());}},[pathHistory]);const navigateToRoot=useCallback(()=>{setCurrentPath('');setPathHistory([]);setFolderContents([]);setSelectedFiles(new Set());},[]);// ========================================================================\n// CLEAR SELECTION\n// ========================================================================\nconst clearSelection=useCallback(()=>{setSelectedFiles(new Set());setSelectedBands(new Set());setError('');// Notify parent that no files are selected\nif(onFilesSelected){onFilesSelected([]);}},[onFilesSelected]);// ========================================================================\n// RENDER HELPERS\n// ========================================================================\nconst renderPathBreadcrumb=()=>{if(!currentPath)return null;const pathParts=currentPath.split('/');return/*#__PURE__*/_jsxs(\"div\",{className:\"path-breadcrumb\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:navigateToRoot,className:\"breadcrumb-item root\",children:\"Home\"}),pathParts.map((part,index)=>/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(\"span\",{className:\"breadcrumb-separator\",children:\"/\"}),/*#__PURE__*/_jsx(\"span\",{className:\"breadcrumb-item\",children:part})]},index))]});};const renderFolderItem=item=>{const isSelected=selectedFiles.has(item.path);const isSelectable=item.type==='file'&&item.isCSV;return/*#__PURE__*/_jsxs(\"div\",{className:\"folder-item \".concat(item.type,\" \").concat(isSelected?'selected':'',\" \").concat(isSelectable?'selectable':''),onClick:()=>{if(item.type==='folder'){navigateToFolder(item.path);}else if(isSelectable){toggleFileSelection(item.path,item.detectedBand);}},children:[/*#__PURE__*/_jsx(\"div\",{className:\"item-icon\",children:item.type==='folder'?'📁':item.isCSV?'📈':'📄'}),/*#__PURE__*/_jsxs(\"div\",{className:\"item-details\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"item-name\",children:item.name}),item.type==='file'&&item.isCSV&&/*#__PURE__*/_jsxs(\"div\",{className:\"item-meta\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"band-info\",children:[item.detectedBand&&/*#__PURE__*/_jsx(\"span\",{className:\"band-indicator \".concat(item.bandConfidence),children:item.detectedBand}),!item.detectedBand&&/*#__PURE__*/_jsx(\"span\",{className:\"band-indicator unknown\",children:\"Unknown Band\"})]}),item.noisinessAnalysis&&/*#__PURE__*/_jsx(\"div\",{className:\"noisiness-info\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"noisiness-indicator\",style:{color:NoiseAnalysisService.getNoisinessColor(item.noisinessAnalysis.noisinessIndex)},title:\"Noisiness: \".concat(item.noisinessAnalysis.noisinessIndex,\"/10 (\").concat(NoiseAnalysisService.getNoisinessDescription(item.noisinessAnalysis.noisinessIndex),\")\"),children:[NoiseAnalysisService.getNoisinessEmoji(item.noisinessAnalysis.noisinessIndex),\" \",item.noisinessAnalysis.noisinessIndex]})}),!item.noisinessAnalysis&&isAnalyzingNoise&&/*#__PURE__*/_jsx(\"div\",{className:\"noisiness-info\",children:/*#__PURE__*/_jsx(\"span\",{className:\"noisiness-loading\",children:\"\\uD83D\\uDD04 ...\"})})]})]}),isSelectable&&/*#__PURE__*/_jsx(\"div\",{className:\"selection-indicator\",children:/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:isSelected,onChange:()=>toggleFileSelection(item.path,item.detectedBand),onClick:e=>e.stopPropagation()})})]},item.path);};// ========================================================================\n// MAIN RENDER\n// ========================================================================\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"folder-browser\",\"data-panel-id\":panelId,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"browser-header\",children:[/*#__PURE__*/_jsxs(\"h3\",{onClick:!isLoading?openFolderDialog:undefined,style:{cursor:!isLoading?'pointer':'default',userSelect:'none',color:!currentPath?'#3498db':'inherit'},title:!currentPath?'Click to open folder':\"Click to change folder (\".concat(currentPath,\")\"),children:[title,currentPath?\" - \".concat(currentPath):' (Click here to open folder)']}),/*#__PURE__*/_jsxs(\"div\",{className:\"browser-controls\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:openFolderDialog,className:\"open-folder-btn\",disabled:isLoading,children:currentPath?'Change Folder':'Open Folder'}),pathHistory.length>0&&/*#__PURE__*/_jsx(\"button\",{onClick:navigateBack,className:\"back-btn\",children:\"Back\"})]})]}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:error}),currentPath&&/*#__PURE__*/_jsxs(_Fragment,{children:[renderPathBreadcrumb(),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-controls\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"filter-section\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"band-filter-\".concat(panelId),className:\"filter-label\",children:\"Band Filter:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"band-filter-\".concat(panelId),value:selectedBandFilter,onChange:e=>{setSelectedBandFilter(e.target.value);applyFilters(folderContents);},className:\"band-filter-select\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"all\",children:\"All Bands\"}),Object.entries(BAND_DEFINITIONS).map(_ref2=>{let[bandType,definition]=_ref2;const count=folderContents.filter(item=>item.detectedBand===bandType).length;return/*#__PURE__*/_jsxs(\"option\",{value:bandType,children:[bandType,\": \",definition.range,\" (\",count,\" files)\"]},bandType);})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-section\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"sort-filter-\".concat(panelId),className:\"filter-label\",children:\"Sort by:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"sort-filter-\".concat(panelId),value:sortBy,onChange:e=>{setSortBy(e.target.value);applyFilters(folderContents);},className:\"sort-filter-select\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"noisiness\",children:\"\\uD83D\\uDD0A Noisiness (High\\u2192Low)\"}),/*#__PURE__*/_jsx(\"option\",{value:\"band\",children:\"\\uD83D\\uDCCA Band\"}),/*#__PURE__*/_jsx(\"option\",{value:\"name\",children:\"\\uD83D\\uDCDD Name\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"action-section\",children:[isAnalyzingNoise&&/*#__PURE__*/_jsx(\"span\",{className:\"analysis-status\",children:\"\\uD83D\\uDD04 Analyzing...\"}),/*#__PURE__*/_jsx(\"button\",{onClick:clearSelection,disabled:selectedFiles.size===0,className:\"clear-all-btn\",children:selectedFiles.size>0?'Clear Selection':'Clear All'})]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"folder-contents\",children:!currentPath?/*#__PURE__*/_jsxs(\"div\",{className:\"empty-state\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"empty-icon\",children:\"\\uD83D\\uDCC2\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Click \\\"Open Folder\\\" to browse and select CSV files\"})]}):isLoading?/*#__PURE__*/_jsxs(\"div\",{className:\"loading-state\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"spinner\",children:\"\\u27F3\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Loading folder contents...\"})]}):filteredContents.length===0?/*#__PURE__*/_jsxs(\"div\",{className:\"empty-folder\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"empty-icon\",children:\"\\uD83D\\uDCC2\"}),/*#__PURE__*/_jsx(\"p\",{children:selectedBandFilter!=='all'?\"No CSV files found for band \".concat(selectedBandFilter):'This folder is empty'}),selectedBandFilter!=='all'&&folderContents.length>0&&/*#__PURE__*/_jsx(\"small\",{children:\"Try selecting \\\"All Bands\\\" to see all files\"})]}):/*#__PURE__*/_jsx(\"div\",{className:\"items-list\",children:filteredContents.map(renderFolderItem)})})]});};export default FolderBrowser;","map":{"version":3,"names":["React","useState","useCallback","CsvService","NoiseAnalysisService","BAND_DEFINITIONS","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","FolderBrowser","_ref","panelId","title","maxFiles","onFilesSelected","currentPath","setCurrentPath","folderContents","setFolderContents","filteredContents","setFilteredContents","selectedFiles","setSelectedFiles","Set","selectedBandFilter","setSelectedBandFilter","setSelectedBands","isLoading","setIsLoading","error","setError","pathHistory","setPathHistory","sortBy","setSortBy","isAnalyzingNoise","setIsAnalyzingNoise","batchAnalyzeNoisiness","items","csvFiles","filter","item","isCSV","fileHandle","length","console","log","concat","filesData","file","getFile","parseResult","parseCsvFile","success","data","detectedBand","frequencies","map","point","frequency","minFreq","Math","min","maxFreq","max","detectBandFromFrequencyRange","push","filename","name","band","warn","analyses","calculateBandRelativeNoisiness","updatedItems","forEach","analysis","fileData","find","fd","itemIndex","findIndex","ui","path","_objectSpread","noisinessAnalysis","applyFilters","filtered","type","sort","a","b","_a$noisinessAnalysis$","_a$noisinessAnalysis","_b$noisinessAnalysis$","_b$noisinessAnalysis","aNoise","noisinessIndex","bNoise","aBand","bBand","localeCompare","useEffect","loadFolderContents","dirHandle","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_asyncIterator","entries","_step","next","done","handle","value","isFile","kind","isValidCsvFile","undefined","size","modified","Date","lastModified","bandFromFilename","detectBandFromFilename","bandConfidence","err","return","setTimeout","loadFolderContentsFromFiles","files","seenPaths","i","pathParts","webkitRelativePath","split","j","folderPath","slice","join","has","add","currentLevel","currentLevelItems","itemLevel","startsWith","openFolderDialog","window","showDirectoryPicker","input","document","createElement","webkitdirectory","multiple","onchange","e","target","firstFile","folderName","click","toggleFileSelection","itemBand","prev","newSelection","updatedBands","clear","selectedItems","navigateToFolder","navigateBack","previousPath","navigateToRoot","clearSelection","renderPathBreadcrumb","className","children","onClick","part","index","renderFolderItem","isSelected","isSelectable","style","color","getNoisinessColor","getNoisinessDescription","getNoisinessEmoji","checked","onChange","stopPropagation","cursor","userSelect","disabled","htmlFor","id","Object","_ref2","bandType","definition","count","range"],"sources":["/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/src/components/FolderBrowser/FolderBrowser.tsx"],"sourcesContent":["// ========================================================================\n// REDA EMC Testing Tool - Folder Browser Component\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Folder navigation component for browsing and selecting files\n// ========================================================================\n\nimport React, { useState, useCallback } from 'react';\nimport { CsvService } from '../../services/CsvService';\nimport { NoiseAnalysisService, NoiseAnalysisResult } from '../../services/NoiseAnalysisService';\nimport { BandType, CsvDataPoint } from '../../types';\nimport { BAND_DEFINITIONS } from '../../constants';\nimport './FolderBrowser.css';\n\n// ========================================================================\n// INTERFACES\n// ========================================================================\n\ninterface FolderItem {\n  name: string;\n  path: string;\n  type: 'file' | 'folder';\n  size?: number;\n  modified?: Date;\n  isCSV?: boolean;\n  detectedBand?: BandType | null;\n  bandConfidence?: 'high' | 'medium' | 'low';\n  fileHandle?: any; // File handle for File System Access API\n  noisinessAnalysis?: NoiseAnalysisResult; // Noisiness analysis data\n}\n\ninterface FolderBrowserProps {\n  panelId: string;\n  title: string;\n  maxFiles?: number;\n  onFilesSelected?: (files: FolderItem[]) => void;\n}\n\n// ========================================================================\n// FOLDER BROWSER COMPONENT\n// ========================================================================\n\nexport const FolderBrowser: React.FC<FolderBrowserProps> = ({\n  panelId,\n  title,\n  maxFiles = 8,\n  onFilesSelected\n}) => {\n  const [currentPath, setCurrentPath] = useState<string>('');\n  const [folderContents, setFolderContents] = useState<FolderItem[]>([]);\n  const [filteredContents, setFilteredContents] = useState<FolderItem[]>([]);\n  const [selectedFiles, setSelectedFiles] = useState<Set<string>>(new Set());\n  const [selectedBandFilter, setSelectedBandFilter] = useState<BandType | 'all'>('all');\n  const [, setSelectedBands] = useState<Set<BandType>>(new Set());\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string>('');\n  const [pathHistory, setPathHistory] = useState<string[]>([]);\n  const [sortBy, setSortBy] = useState<'name' | 'noisiness' | 'band'>('noisiness');\n  const [isAnalyzingNoise, setIsAnalyzingNoise] = useState(false);\n\n  // ========================================================================\n  // NOISINESS ANALYSIS\n  // ========================================================================\n\n  const batchAnalyzeNoisiness = useCallback(async (items: FolderItem[]) => {\n    const csvFiles = items.filter(item => item.isCSV && item.fileHandle);\n    if (csvFiles.length === 0) return;\n\n    setIsAnalyzingNoise(true);\n    console.log(`🔊 Analyzing band-relative noisiness for ${csvFiles.length} CSV files...`);\n\n    // Parse all CSV files first\n    const filesData: Array<{ filename: string; data: CsvDataPoint[]; band?: string; item: FolderItem }> = [];\n    \n    for (const item of csvFiles) {\n      try {\n        const file = await item.fileHandle!.getFile();\n        const parseResult = await CsvService.parseCsvFile(file);\n        \n        if (parseResult.success && parseResult.data) {\n          // Detect band from frequency data if not already detected\n          let detectedBand = item.detectedBand;\n          if (!detectedBand) {\n            const frequencies = parseResult.data.map(point => point.frequency / 1e6);\n            const minFreq = Math.min(...frequencies);\n            const maxFreq = Math.max(...frequencies);\n            detectedBand = CsvService.detectBandFromFrequencyRange(minFreq, maxFreq);\n          }\n          \n          filesData.push({\n            filename: item.name,\n            data: parseResult.data,\n            band: detectedBand || 'Unknown',\n            item\n          });\n        }\n      } catch (error) {\n        console.warn(`Failed to parse ${item.name}:`, error);\n      }\n    }\n    \n    if (filesData.length === 0) {\n      setIsAnalyzingNoise(false);\n      return;\n    }\n\n    // Use band-relative noisiness analysis\n    const analyses = NoiseAnalysisService.calculateBandRelativeNoisiness(filesData);\n    \n    // Update items with analysis results\n    const updatedItems = [...items];\n    analyses.forEach(analysis => {\n      const fileData = filesData.find(fd => fd.filename === analysis.filename);\n      if (fileData) {\n        const itemIndex = updatedItems.findIndex(ui => ui.path === fileData.item.path);\n        if (itemIndex >= 0) {\n          updatedItems[itemIndex] = { \n            ...updatedItems[itemIndex], \n            noisinessAnalysis: analysis,\n            detectedBand: fileData.band as any // Update band if it was detected\n          };\n        }\n      }\n    });\n    \n    setFolderContents(updatedItems);\n    setIsAnalyzingNoise(false);\n    \n    console.log(`✅ Band-relative noisiness analysis complete for ${csvFiles.length} files`);\n    console.log(`📊 Results: Files now ranked 1-10 within their respective bands (1=quietest, 10=noisiest)`);\n  }, []);\n\n  // ========================================================================\n  // FILTERING AND BAND DETECTION\n  // ========================================================================\n\n  const applyFilters = useCallback((items: FolderItem[]) => {\n    let filtered = [...items];\n\n    // Filter by band if not 'all'\n    if (selectedBandFilter !== 'all') {\n      filtered = filtered.filter(item => \n        item.type === 'folder' || \n        (item.isCSV && item.detectedBand === selectedBandFilter)\n      );\n    }\n\n    // Sort items\n    filtered.sort((a, b) => {\n      // Always put folders first\n      if (a.type !== b.type) {\n        return a.type === 'folder' ? -1 : 1;\n      }\n      \n      // For files, sort by selected criteria\n      if (a.type === 'file' && b.type === 'file') {\n        switch (sortBy) {\n          case 'noisiness':\n            const aNoise = a.noisinessAnalysis?.noisinessIndex ?? -1;\n            const bNoise = b.noisinessAnalysis?.noisinessIndex ?? -1;\n            // Sort by noisiness descending (noisiest first), then by name\n            if (aNoise !== bNoise) {\n              return bNoise - aNoise;\n            }\n            break;\n          case 'band':\n            const aBand = a.detectedBand || 'ZZ';\n            const bBand = b.detectedBand || 'ZZ';\n            if (aBand !== bBand) {\n              return aBand.localeCompare(bBand);\n            }\n            break;\n          case 'name':\n          default:\n            // Fall through to name sorting\n            break;\n        }\n      }\n      \n      // Default: sort by name\n      return a.name.localeCompare(b.name);\n    });\n\n    setFilteredContents(filtered);\n  }, [selectedBandFilter, sortBy]);\n\n  // Apply filters whenever band filter, sort option, or folder contents change\n  React.useEffect(() => {\n    applyFilters(folderContents);\n  }, [folderContents, selectedBandFilter, sortBy, applyFilters]);\n\n  // ========================================================================\n  // FOLDER NAVIGATION\n  // ========================================================================\n\n  const loadFolderContents = useCallback(async (dirHandle: any) => {\n    setIsLoading(true);\n    setError('');\n    const items: FolderItem[] = [];\n\n    try {\n      for await (const [name, handle] of dirHandle.entries()) {\n        const isFile = handle.kind === 'file';\n        const isCSV = isFile ? CsvService.isValidCsvFile({ name } as File) : false;\n        \n        // Only include CSV files\n        if (isFile && !isCSV) {\n          continue;\n        }\n\n        const item: FolderItem = {\n          name,\n          path: `${currentPath}/${name}`,\n          type: isFile ? 'file' : 'folder',\n          isCSV,\n          fileHandle: isFile ? handle : undefined // Store the file handle for later access\n        };\n\n        if (isFile) {\n          try {\n            const file = await handle.getFile();\n            item.size = file.size;\n            item.modified = new Date(file.lastModified);\n            \n            // Detect band for CSV files\n            if (item.isCSV) {\n              const bandFromFilename = CsvService.detectBandFromFilename(name);\n              if (bandFromFilename) {\n                item.detectedBand = bandFromFilename;\n                item.bandConfidence = 'high';\n              } else {\n                // Just detect from filename for now to avoid parsing all files\n                item.detectedBand = null;\n                item.bandConfidence = 'low';\n              }\n            }\n          } catch (err) {\n            // Skip files we can't access\n            continue;\n          }\n        }\n\n        items.push(item);\n      }\n\n      // Sort: folders first, then files, alphabetically\n      items.sort((a, b) => {\n        if (a.type !== b.type) {\n          return a.type === 'folder' ? -1 : 1;\n        }\n        return a.name.localeCompare(b.name);\n      });\n\n      setFolderContents(items);\n      \n      // Apply filters inline to avoid dependency issues\n      let filtered = [...items];\n      if (selectedBandFilter !== 'all') {\n        filtered = filtered.filter(item => \n          item.type === 'folder' || \n          (item.isCSV && item.detectedBand === selectedBandFilter)\n        );\n      }\n      setFilteredContents(filtered);\n      \n      // Start noisiness analysis for CSV files in the background\n      setTimeout(() => batchAnalyzeNoisiness(items), 100);\n    } catch (error) {\n      setError('Failed to read folder contents.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentPath, selectedBandFilter, batchAnalyzeNoisiness]);\n\n  const loadFolderContentsFromFiles = useCallback((files: FileList) => {\n    setIsLoading(true);\n    setError('');\n    const items: FolderItem[] = [];\n    const seenPaths = new Set<string>();\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      const pathParts = file.webkitRelativePath.split('/');\n      \n      // Add folders in the path\n      for (let j = 1; j < pathParts.length - 1; j++) {\n        const folderPath = pathParts.slice(0, j + 1).join('/');\n        if (!seenPaths.has(folderPath)) {\n          seenPaths.add(folderPath);\n          items.push({\n            name: pathParts[j],\n            path: folderPath,\n            type: 'folder'\n          });\n        }\n      }\n\n      // Add the file\n      if (!seenPaths.has(file.webkitRelativePath)) {\n        seenPaths.add(file.webkitRelativePath);\n        const isCSV = CsvService.isValidCsvFile(file);\n        \n        // Only include CSV files\n        if (!isCSV) {\n          continue;\n        }\n\n        const item: FolderItem = {\n          name: file.name,\n          path: file.webkitRelativePath,\n          type: 'file',\n          size: file.size,\n          modified: new Date(file.lastModified),\n          isCSV\n        };\n\n        // Detect band for CSV files\n        if (isCSV) {\n          const bandFromFilename = CsvService.detectBandFromFilename(file.name);\n          if (bandFromFilename) {\n            item.detectedBand = bandFromFilename;\n            item.bandConfidence = 'high';\n          } else {\n            item.detectedBand = null;\n            item.bandConfidence = 'low';\n          }\n        }\n\n        items.push(item);\n      }\n    }\n\n    // Filter to show only items in current directory level\n    const currentLevel = currentPath.split('/').length;\n    const currentLevelItems = items.filter(item => {\n      const itemLevel = item.path.split('/').length;\n      return itemLevel === currentLevel + 1 && item.path.startsWith(currentPath);\n    });\n\n    setFolderContents(currentLevelItems);\n    \n    // Apply filters inline to avoid dependency issues\n    let filtered = [...currentLevelItems];\n    if (selectedBandFilter !== 'all') {\n      filtered = filtered.filter(item => \n        item.type === 'folder' || \n        (item.isCSV && item.detectedBand === selectedBandFilter)\n      );\n    }\n    setFilteredContents(filtered);\n    setIsLoading(false);\n    \n    // Note: Noisiness analysis not available for fallback file loading\n    // since we don't have direct file handles in this mode\n  }, [currentPath, selectedBandFilter]);\n\n  const openFolderDialog = useCallback(async () => {\n    try {\n      // Use the File System Access API for modern browsers\n      if ('showDirectoryPicker' in window) {\n        const dirHandle = await (window as any).showDirectoryPicker();\n        const path = dirHandle.name;\n        setCurrentPath(path);\n        await loadFolderContents(dirHandle);\n      } else {\n        // Fallback: use input element\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.webkitdirectory = true;\n        input.multiple = true;\n        \n        input.onchange = (e) => {\n          const files = (e.target as HTMLInputElement).files;\n          if (files && files.length > 0) {\n            const firstFile = files[0];\n            const pathParts = firstFile.webkitRelativePath.split('/');\n            const folderName = pathParts[0];\n            setCurrentPath(folderName);\n            loadFolderContentsFromFiles(files);\n          }\n        };\n        \n        input.click();\n      }\n    } catch (error) {\n      if ((error as Error).name !== 'AbortError') {\n        setError('Failed to open folder. Please try again.');\n      }\n    }\n  }, [loadFolderContents, loadFolderContentsFromFiles]);\n\n  // ========================================================================\n  // FILE SELECTION\n  // ========================================================================\n\n    const toggleFileSelection = useCallback((path: string, itemBand?: BandType | null) => {\n    setSelectedFiles(prev => {\n      const newSelection = new Set<string>();\n      let updatedBands = new Set<BandType>();\n      \n      if (prev.has(path)) {\n        // Deselecting the currently selected file - clear everything\n        newSelection.clear();\n        updatedBands.clear();\n            setSelectedBands(updatedBands);\n        console.log(`🗑️ Deselected file: ${path}`);\n      } else {\n        // Selecting a new file - replace any previous selection\n        newSelection.clear(); // Clear any previous selections\n        newSelection.add(path); // Add only the new file\n        \n        // Update bands for the new selection\n        updatedBands.clear();\n        if (itemBand) {\n          updatedBands.add(itemBand);\n          setSelectedBands(updatedBands);\n          console.log(`🔄 Selected new file: ${path} (${itemBand} band) - replacing any previous selection`);\n        } else {\n          setSelectedBands(updatedBands);\n          console.log(`🔄 Selected new file: ${path} (Unknown band) - replacing any previous selection`);\n        }\n        \n        setError(''); // Clear any previous errors\n      }\n\n      // Always trigger file loading when selection changes (including when clearing)\n      setTimeout(() => {\n        const selectedItems = filteredContents.filter(item => \n          newSelection.has(item.path) && item.type === 'file' && item.isCSV\n        );\n        \n        // Always call the callback, even when no files are selected (to clear the plot)\n        if (onFilesSelected) {\n          onFilesSelected(selectedItems);\n        }\n      }, 100); // Small delay to ensure state updates are complete\n      \n      return newSelection;\n    });\n  }, [filteredContents, onFilesSelected]);\n\n  // ========================================================================\n  // NAVIGATION\n  // ========================================================================\n\n  const navigateToFolder = useCallback((folderPath: string) => {\n    setPathHistory(prev => [...prev, currentPath]);\n    setCurrentPath(folderPath);\n    setSelectedFiles(new Set());\n    setSelectedBands(new Set());\n    setError('');\n  }, [currentPath]);\n\n  const navigateBack = useCallback(() => {\n    if (pathHistory.length > 0) {\n      const previousPath = pathHistory[pathHistory.length - 1];\n      setPathHistory(prev => prev.slice(0, -1));\n      setCurrentPath(previousPath);\n      setSelectedFiles(new Set());\n    }\n  }, [pathHistory]);\n\n  const navigateToRoot = useCallback(() => {\n    setCurrentPath('');\n    setPathHistory([]);\n    setFolderContents([]);\n    setSelectedFiles(new Set());\n  }, []);\n\n  // ========================================================================\n  // CLEAR SELECTION\n  // ========================================================================\n\n  const clearSelection = useCallback(() => {\n    setSelectedFiles(new Set());\n    setSelectedBands(new Set());\n    setError('');\n    \n    // Notify parent that no files are selected\n    if (onFilesSelected) {\n      onFilesSelected([]);\n    }\n  }, [onFilesSelected]);\n\n  // ========================================================================\n  // RENDER HELPERS\n  // ========================================================================\n\n  const renderPathBreadcrumb = () => {\n    if (!currentPath) return null;\n\n    const pathParts = currentPath.split('/');\n    \n    return (\n      <div className=\"path-breadcrumb\">\n        <button onClick={navigateToRoot} className=\"breadcrumb-item root\">\n          Home\n        </button>\n        {pathParts.map((part, index) => (\n          <React.Fragment key={index}>\n            <span className=\"breadcrumb-separator\">/</span>\n            <span className=\"breadcrumb-item\">{part}</span>\n          </React.Fragment>\n        ))}\n      </div>\n    );\n  };\n\n  const renderFolderItem = (item: FolderItem) => {\n    const isSelected = selectedFiles.has(item.path);\n    const isSelectable = item.type === 'file' && item.isCSV;\n\n    return (\n      <div\n        key={item.path}\n        className={`folder-item ${item.type} ${isSelected ? 'selected' : ''} ${isSelectable ? 'selectable' : ''}`}\n        onClick={() => {\n          if (item.type === 'folder') {\n            navigateToFolder(item.path);\n          } else if (isSelectable) {\n            toggleFileSelection(item.path, item.detectedBand);\n          }\n        }}\n      >\n        <div className=\"item-icon\">\n          {item.type === 'folder' ? '📁' : item.isCSV ? '📈' : '📄'}\n        </div>\n        <div className=\"item-details\">\n          <div className=\"item-name\">{item.name}</div>\n          {item.type === 'file' && item.isCSV && (\n            <div className=\"item-meta\">\n              <div className=\"band-info\">\n                {item.detectedBand && (\n                  <span className={`band-indicator ${item.bandConfidence}`}>\n                    {item.detectedBand}\n                  </span>\n                )}\n                {!item.detectedBand && (\n                  <span className=\"band-indicator unknown\">\n                    Unknown Band\n                  </span>\n                )}\n              </div>\n              {item.noisinessAnalysis && (\n                <div className=\"noisiness-info\">\n                  <span \n                    className=\"noisiness-indicator\"\n                    style={{ color: NoiseAnalysisService.getNoisinessColor(item.noisinessAnalysis.noisinessIndex) }}\n                    title={`Noisiness: ${item.noisinessAnalysis.noisinessIndex}/10 (${NoiseAnalysisService.getNoisinessDescription(item.noisinessAnalysis.noisinessIndex)})`}\n                  >\n                    {NoiseAnalysisService.getNoisinessEmoji(item.noisinessAnalysis.noisinessIndex)} {item.noisinessAnalysis.noisinessIndex}\n                  </span>\n                </div>\n              )}\n              {!item.noisinessAnalysis && isAnalyzingNoise && (\n                <div className=\"noisiness-info\">\n                  <span className=\"noisiness-loading\">🔄 ...</span>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n        {isSelectable && (\n          <div className=\"selection-indicator\">\n            <input \n              type=\"checkbox\" \n              checked={isSelected} \n              onChange={() => toggleFileSelection(item.path, item.detectedBand)}\n              onClick={(e) => e.stopPropagation()}\n            />\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // ========================================================================\n  // MAIN RENDER\n  // ========================================================================\n\n  return (\n    <div className=\"folder-browser\" data-panel-id={panelId}>\n      <div className=\"browser-header\">\n        <h3 \n          onClick={!isLoading ? openFolderDialog : undefined}\n          style={{ \n            cursor: !isLoading ? 'pointer' : 'default',\n            userSelect: 'none',\n            color: !currentPath ? '#3498db' : 'inherit'\n          }}\n          title={!currentPath ? 'Click to open folder' : `Click to change folder (${currentPath})`}\n        >\n          {title}\n          {currentPath ? ` - ${currentPath}` : ' (Click here to open folder)'}\n        </h3>\n        <div className=\"browser-controls\">\n          <button \n            onClick={openFolderDialog}\n            className=\"open-folder-btn\"\n            disabled={isLoading}\n          >\n            {currentPath ? 'Change Folder' : 'Open Folder'}\n          </button>\n          {pathHistory.length > 0 && (\n            <button onClick={navigateBack} className=\"back-btn\">\n              Back\n            </button>\n          )}\n        </div>\n      </div>\n\n              {error && (\n          <div className=\"error-message\">\n            {error}\n          </div>\n        )}\n\n      {currentPath && (\n        <>\n          {renderPathBreadcrumb()}\n          \n          {/* Filter and Sort Controls */}\n          <div className=\"filter-controls\">\n            <div className=\"filter-section\">\n              <label htmlFor={`band-filter-${panelId}`} className=\"filter-label\">\n                Band Filter:\n              </label>\n              <select\n                id={`band-filter-${panelId}`}\n                value={selectedBandFilter}\n                onChange={(e) => {\n                  setSelectedBandFilter(e.target.value as BandType | 'all');\n                  applyFilters(folderContents);\n                }}\n                className=\"band-filter-select\"\n              >\n                <option value=\"all\">All Bands</option>\n                {Object.entries(BAND_DEFINITIONS).map(([bandType, definition]) => {\n                  const count = folderContents.filter(item => item.detectedBand === bandType).length;\n                  return (\n                    <option key={bandType} value={bandType}>\n                      {bandType}: {definition.range} ({count} files)\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n            <div className=\"filter-section\">\n              <label htmlFor={`sort-filter-${panelId}`} className=\"filter-label\">\n                Sort by:\n              </label>\n              <select\n                id={`sort-filter-${panelId}`}\n                value={sortBy}\n                onChange={(e) => {\n                  setSortBy(e.target.value as 'name' | 'noisiness' | 'band');\n                  applyFilters(folderContents);\n                }}\n                className=\"sort-filter-select\"\n              >\n                <option value=\"noisiness\">🔊 Noisiness (High→Low)</option>\n                <option value=\"band\">📊 Band</option>\n                <option value=\"name\">📝 Name</option>\n              </select>\n            </div>\n            <div className=\"action-section\">\n              {isAnalyzingNoise && (\n                <span className=\"analysis-status\">\n                  🔄 Analyzing...\n                </span>\n              )}\n              <button \n                onClick={clearSelection}\n                disabled={selectedFiles.size === 0}\n                className=\"clear-all-btn\"\n              >\n                {selectedFiles.size > 0 ? 'Clear Selection' : 'Clear All'}\n              </button>\n            </div>\n          </div>\n        </>\n      )}\n\n      <div className=\"folder-contents\">\n        {!currentPath ? (\n          <div className=\"empty-state\">\n            <div className=\"empty-icon\">📂</div>\n            <p>Click \"Open Folder\" to browse and select CSV files</p>\n          </div>\n        ) : isLoading ? (\n          <div className=\"loading-state\">\n            <div className=\"spinner\">⟳</div>\n            <p>Loading folder contents...</p>\n          </div>\n        ) : filteredContents.length === 0 ? (\n          <div className=\"empty-folder\">\n            <div className=\"empty-icon\">📂</div>\n            <p>{selectedBandFilter !== 'all' ? `No CSV files found for band ${selectedBandFilter}` : 'This folder is empty'}</p>\n            {selectedBandFilter !== 'all' && folderContents.length > 0 && (\n              <small>Try selecting \"All Bands\" to see all files</small>\n            )}\n          </div>\n        ) : (\n          <div className=\"items-list\">\n            {filteredContents.map(renderFolderItem)}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FolderBrowser; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}