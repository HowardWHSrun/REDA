{"ast":null,"code":"import _objectSpread from\"/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// ========================================================================\n// REDA EMC Testing Tool - Application Context\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Central state management using React Context API\n// ========================================================================\nimport React,{createContext,useContext,useReducer,useCallback,useEffect}from'react';import{DEFAULT_LIMIT_CONFIGURATION,DEFAULT_IMAGE_FORM_DATA,DEFAULT_CSV_FORM_DATA,STORAGE_KEYS}from'../constants';// ========================================================================\n// ACTION TYPES\n// ========================================================================\nimport{jsx as _jsx}from\"react/jsx-runtime\";// ========================================================================\n// INITIAL STATE\n// ========================================================================\nconst createInitialPageData=pageId=>({pageId,imageState1:{image:null,originalFilename:null,isDragging:false,lastX:0,lastY:0,offsetX:0,offsetY:0,scale:1,baseWidth:0,baseHeight:0},imageState2:{image:null,originalFilename:null,isDragging:false,lastX:0,lastY:0,offsetX:0,offsetY:0,scale:1,baseWidth:0,baseHeight:0},csvState1:{data:null,originalFilename:null,frequencyData:[],amplitudeData:[],minFreq:0,maxFreq:0,minAmp:0,maxAmp:0,rowCount:0,scale:1,offsetX:0,offsetY:0,isDragging:false,lastX:0,lastY:0},csvState2:{data:null,originalFilename:null,frequencyData:[],amplitudeData:[],minFreq:0,maxFreq:0,minAmp:0,maxAmp:0,rowCount:0,scale:1,offsetX:0,offsetY:0,isDragging:false,lastX:0,lastY:0},formData1:_objectSpread({},DEFAULT_IMAGE_FORM_DATA),formData2:_objectSpread({},DEFAULT_IMAGE_FORM_DATA),csvFormData:_objectSpread({},DEFAULT_CSV_FORM_DATA),comments:'',lastModified:new Date()});const initialState={currentMode:'csv',currentLayout:'horizontal',currentCsvMode:'overlay',currentPageId:1,nextPageId:2,pages:new Map([[1,createInitialPageData(1)]]),csvOverlayState:{scale:1,offsetX:0,offsetY:0,isDragging:false,lastX:0,lastY:0,showLegend:true,datasets:[]},correctionState:{measurementData:null,addCorrectionData:null,subtractCorrectionData:null,correctedData:null,scale:1,offsetX:0,offsetY:0,isDragging:false,lastMouseX:0,lastMouseY:0},limitConfiguration:_objectSpread({},DEFAULT_LIMIT_CONFIGURATION),folderSelection:{folder:null,analyzedFiles:[],selectedFiles:[],availableFiles:[],currentFilter:'all'}};// ========================================================================\n// REDUCER\n// ========================================================================\nfunction appReducer(state,action){switch(action.type){case'SET_MODE':return _objectSpread(_objectSpread({},state),{},{currentMode:action.payload});case'SET_LAYOUT':return _objectSpread(_objectSpread({},state),{},{currentLayout:action.payload});case'SET_CSV_MODE':return _objectSpread(_objectSpread({},state),{},{currentCsvMode:action.payload});case'SWITCH_PAGE':return _objectSpread(_objectSpread({},state),{},{currentPageId:action.payload});case'ADD_PAGE':const newPages=new Map(state.pages);newPages.set(action.payload.pageId,action.payload);return _objectSpread(_objectSpread({},state),{},{pages:newPages,nextPageId:Math.max(state.nextPageId,action.payload.pageId+1)});case'REMOVE_PAGE':const updatedPages=new Map(state.pages);updatedPages.delete(action.payload);// If removing current page, switch to another page\nlet newCurrentPageId=state.currentPageId;if(action.payload===state.currentPageId&&updatedPages.size>0){newCurrentPageId=Math.min(...Array.from(updatedPages.keys()));}return _objectSpread(_objectSpread({},state),{},{pages:updatedPages,currentPageId:newCurrentPageId});case'UPDATE_PAGE_DATA':const pageToUpdate=state.pages.get(action.payload.pageId);if(!pageToUpdate)return state;const updatedPageData=_objectSpread(_objectSpread(_objectSpread({},pageToUpdate),action.payload.data),{},{lastModified:new Date()});const newPagesMap=new Map(state.pages);newPagesMap.set(action.payload.pageId,updatedPageData);return _objectSpread(_objectSpread({},state),{},{pages:newPagesMap});case'ADD_CSV_OVERLAY_DATASET':return _objectSpread(_objectSpread({},state),{},{csvOverlayState:_objectSpread(_objectSpread({},state.csvOverlayState),{},{datasets:[...state.csvOverlayState.datasets,action.payload]})});case'REMOVE_CSV_OVERLAY_DATASET':return _objectSpread(_objectSpread({},state),{},{csvOverlayState:_objectSpread(_objectSpread({},state.csvOverlayState),{},{datasets:state.csvOverlayState.datasets.filter(d=>d.id!==action.payload)})});case'UPDATE_CSV_OVERLAY_DATASET':return _objectSpread(_objectSpread({},state),{},{csvOverlayState:_objectSpread(_objectSpread({},state.csvOverlayState),{},{datasets:state.csvOverlayState.datasets.map(dataset=>dataset.id===action.payload.id?_objectSpread(_objectSpread({},dataset),action.payload.data):dataset)})});case'UPDATE_CSV_OVERLAY_STATE':return _objectSpread(_objectSpread({},state),{},{csvOverlayState:_objectSpread(_objectSpread({},state.csvOverlayState),action.payload)});case'UPDATE_CORRECTION_STATE':return _objectSpread(_objectSpread({},state),{},{correctionState:_objectSpread(_objectSpread({},state.correctionState),action.payload)});case'UPDATE_FOLDER_SELECTION':return _objectSpread(_objectSpread({},state),{},{folderSelection:_objectSpread(_objectSpread({},state.folderSelection),action.payload)});case'UPDATE_LIMIT_CONFIGURATION':return _objectSpread(_objectSpread({},state),{},{limitConfiguration:_objectSpread(_objectSpread({},state.limitConfiguration),action.payload)});case'RESET_APPLICATION_STATE':return _objectSpread(_objectSpread({},initialState),{},{pages:new Map([[1,createInitialPageData(1)]])});case'LOAD_STATE_FROM_STORAGE':return _objectSpread(_objectSpread({},state),action.payload);default:return state;}}// ========================================================================\n// CONTEXT INTERFACE\n// ========================================================================\n// ========================================================================\n// CONTEXT CREATION\n// ========================================================================\nconst AppContext=/*#__PURE__*/createContext(undefined);// ========================================================================\n// PROVIDER COMPONENT\n// ========================================================================\nexport const AppContextProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(appReducer,initialState);// ========================================================================\n// ACTION CREATORS\n// ========================================================================\nconst setMode=useCallback(mode=>{dispatch({type:'SET_MODE',payload:mode});},[]);const setLayout=useCallback(layout=>{dispatch({type:'SET_LAYOUT',payload:layout});},[]);const setCsvMode=useCallback(mode=>{dispatch({type:'SET_CSV_MODE',payload:mode});},[]);const switchToPage=useCallback(pageId=>{dispatch({type:'SWITCH_PAGE',payload:pageId});},[]);const addNewPage=useCallback(()=>{const newPageData=createInitialPageData(state.nextPageId);dispatch({type:'ADD_PAGE',payload:newPageData});return state.nextPageId;},[state.nextPageId]);const removePage=useCallback(pageId=>{dispatch({type:'REMOVE_PAGE',payload:pageId});},[]);const updatePageData=useCallback((pageId,data)=>{dispatch({type:'UPDATE_PAGE_DATA',payload:{pageId,data}});},[]);const getCurrentPage=useCallback(()=>{return state.pages.get(state.currentPageId);},[state.pages,state.currentPageId]);const addCsvOverlayDataset=useCallback(dataset=>{dispatch({type:'ADD_CSV_OVERLAY_DATASET',payload:dataset});},[]);const removeCsvOverlayDataset=useCallback(id=>{dispatch({type:'REMOVE_CSV_OVERLAY_DATASET',payload:id});},[]);const updateCsvOverlayDataset=useCallback((id,data)=>{dispatch({type:'UPDATE_CSV_OVERLAY_DATASET',payload:{id,data}});},[]);const updateCsvOverlayState=useCallback(overlayState=>{dispatch({type:'UPDATE_CSV_OVERLAY_STATE',payload:overlayState});},[]);const updateCorrectionState=useCallback(correctionState=>{dispatch({type:'UPDATE_CORRECTION_STATE',payload:correctionState});},[]);const updateFolderSelection=useCallback(selection=>{dispatch({type:'UPDATE_FOLDER_SELECTION',payload:selection});},[]);const updateLimitConfiguration=useCallback(config=>{dispatch({type:'UPDATE_LIMIT_CONFIGURATION',payload:config});},[]);const resetApplicationState=useCallback(()=>{dispatch({type:'RESET_APPLICATION_STATE'});},[]);// ========================================================================\n// PERSISTENCE FUNCTIONS\n// ========================================================================\nconst saveStateToStorage=useCallback(()=>{try{const stateToSave={currentMode:state.currentMode,currentLayout:state.currentLayout,currentCsvMode:state.currentCsvMode,limitConfiguration:state.limitConfiguration,folderSelection:_objectSpread(_objectSpread({},state.folderSelection),{},{folder:null// Don't persist FileList\n})};localStorage.setItem(STORAGE_KEYS.APPLICATION_STATE,JSON.stringify(stateToSave));}catch(error){console.warn('Failed to save application state to localStorage:',error);}},[state]);const loadStateFromStorage=useCallback(()=>{try{const savedState=localStorage.getItem(STORAGE_KEYS.APPLICATION_STATE);if(savedState){const parsedState=JSON.parse(savedState);dispatch({type:'LOAD_STATE_FROM_STORAGE',payload:parsedState});}}catch(error){console.warn('Failed to load application state from localStorage:',error);}},[]);// ========================================================================\n// EFFECTS\n// ========================================================================\n// Load state from localStorage on mount\nuseEffect(()=>{loadStateFromStorage();},[loadStateFromStorage]);// Auto-save state changes to localStorage\nuseEffect(()=>{const timeoutId=setTimeout(()=>{saveStateToStorage();},1000);// Debounce saves by 1 second\nreturn()=>clearTimeout(timeoutId);},[state,saveStateToStorage]);// ========================================================================\n// CONTEXT VALUE\n// ========================================================================\nconst contextValue={state,setMode,setLayout,setCsvMode,switchToPage,addNewPage,removePage,updatePageData,getCurrentPage,addCsvOverlayDataset,removeCsvOverlayDataset,updateCsvOverlayDataset,updateCsvOverlayState,updateCorrectionState,updateFolderSelection,updateLimitConfiguration,resetApplicationState,saveStateToStorage,loadStateFromStorage};return/*#__PURE__*/_jsx(AppContext.Provider,{value:contextValue,children:children});};// ========================================================================\n// CUSTOM HOOK\n// ========================================================================\nexport const useAppContext=()=>{const context=useContext(AppContext);if(context===undefined){throw new Error('useAppContext must be used within an AppContextProvider');}return context;};// ========================================================================\n// CONVENIENCE HOOKS\n// ========================================================================\nexport const useCurrentPage=()=>{const{getCurrentPage}=useAppContext();return getCurrentPage();};export const useCurrentMode=()=>{const{state}=useAppContext();return state.currentMode;};export const useCsvOverlayState=()=>{const{state,updateCsvOverlayState}=useAppContext();return{csvOverlayState:state.csvOverlayState,updateCsvOverlayState};};export const useCorrectionState=()=>{const{state,updateCorrectionState}=useAppContext();return{correctionState:state.correctionState,updateCorrectionState};};export const useLimitConfiguration=()=>{const{state,updateLimitConfiguration}=useAppContext();return{limitConfiguration:state.limitConfiguration,updateLimitConfiguration};};export const useFolderSelection=()=>{const{state,updateFolderSelection}=useAppContext();return{folderSelection:state.folderSelection,updateFolderSelection};};","map":{"version":3,"names":["React","createContext","useContext","useReducer","useCallback","useEffect","DEFAULT_LIMIT_CONFIGURATION","DEFAULT_IMAGE_FORM_DATA","DEFAULT_CSV_FORM_DATA","STORAGE_KEYS","jsx","_jsx","createInitialPageData","pageId","imageState1","image","originalFilename","isDragging","lastX","lastY","offsetX","offsetY","scale","baseWidth","baseHeight","imageState2","csvState1","data","frequencyData","amplitudeData","minFreq","maxFreq","minAmp","maxAmp","rowCount","csvState2","formData1","_objectSpread","formData2","csvFormData","comments","lastModified","Date","initialState","currentMode","currentLayout","currentCsvMode","currentPageId","nextPageId","pages","Map","csvOverlayState","showLegend","datasets","correctionState","measurementData","addCorrectionData","subtractCorrectionData","correctedData","lastMouseX","lastMouseY","limitConfiguration","folderSelection","folder","analyzedFiles","selectedFiles","availableFiles","currentFilter","appReducer","state","action","type","payload","newPages","set","Math","max","updatedPages","delete","newCurrentPageId","size","min","Array","from","keys","pageToUpdate","get","updatedPageData","newPagesMap","filter","d","id","map","dataset","AppContext","undefined","AppContextProvider","_ref","children","dispatch","setMode","mode","setLayout","layout","setCsvMode","switchToPage","addNewPage","newPageData","removePage","updatePageData","getCurrentPage","addCsvOverlayDataset","removeCsvOverlayDataset","updateCsvOverlayDataset","updateCsvOverlayState","overlayState","updateCorrectionState","updateFolderSelection","selection","updateLimitConfiguration","config","resetApplicationState","saveStateToStorage","stateToSave","localStorage","setItem","APPLICATION_STATE","JSON","stringify","error","console","warn","loadStateFromStorage","savedState","getItem","parsedState","parse","timeoutId","setTimeout","clearTimeout","contextValue","Provider","value","useAppContext","context","Error","useCurrentPage","useCurrentMode","useCsvOverlayState","useCorrectionState","useLimitConfiguration","useFolderSelection"],"sources":["/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/src/context/AppContext.tsx"],"sourcesContent":["// ========================================================================\n// REDA EMC Testing Tool - Application Context\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Central state management using React Context API\n// ========================================================================\n\nimport React, { createContext, useContext, useReducer, useCallback, useEffect } from 'react';\nimport {\n  ApplicationState,\n  ApplicationMode,\n  LayoutType,\n  CsvMode,\n  PageData,\n  CsvOverlayDataset,\n  EmiCorrectionState,\n  FolderSelection,\n  LimitConfiguration\n} from '../types';\nimport {\n  DEFAULT_LIMIT_CONFIGURATION,\n  DEFAULT_IMAGE_FORM_DATA,\n  DEFAULT_CSV_FORM_DATA,\n  STORAGE_KEYS\n} from '../constants';\n\n// ========================================================================\n// ACTION TYPES\n// ========================================================================\n\ntype AppAction =\n  | { type: 'SET_MODE'; payload: ApplicationMode }\n  | { type: 'SET_LAYOUT'; payload: LayoutType }\n  | { type: 'SET_CSV_MODE'; payload: CsvMode }\n  | { type: 'SWITCH_PAGE'; payload: number }\n  | { type: 'ADD_PAGE'; payload: PageData }\n  | { type: 'REMOVE_PAGE'; payload: number }\n  | { type: 'UPDATE_PAGE_DATA'; payload: { pageId: number; data: Partial<PageData> } }\n  | { type: 'ADD_CSV_OVERLAY_DATASET'; payload: CsvOverlayDataset }\n  | { type: 'REMOVE_CSV_OVERLAY_DATASET'; payload: string }\n  | { type: 'UPDATE_CSV_OVERLAY_DATASET'; payload: { id: string; data: Partial<CsvOverlayDataset> } }\n  | { type: 'UPDATE_CSV_OVERLAY_STATE'; payload: Partial<typeof initialState.csvOverlayState> }\n  | { type: 'UPDATE_CORRECTION_STATE'; payload: Partial<EmiCorrectionState> }\n  | { type: 'UPDATE_FOLDER_SELECTION'; payload: Partial<FolderSelection> }\n  | { type: 'UPDATE_LIMIT_CONFIGURATION'; payload: Partial<LimitConfiguration> }\n  | { type: 'RESET_APPLICATION_STATE' }\n  | { type: 'LOAD_STATE_FROM_STORAGE'; payload: Partial<ApplicationState> };\n\n// ========================================================================\n// INITIAL STATE\n// ========================================================================\n\nconst createInitialPageData = (pageId: number): PageData => ({\n  pageId,\n  imageState1: {\n    image: null,\n    originalFilename: null,\n    isDragging: false,\n    lastX: 0,\n    lastY: 0,\n    offsetX: 0,\n    offsetY: 0,\n    scale: 1,\n    baseWidth: 0,\n    baseHeight: 0\n  },\n  imageState2: {\n    image: null,\n    originalFilename: null,\n    isDragging: false,\n    lastX: 0,\n    lastY: 0,\n    offsetX: 0,\n    offsetY: 0,\n    scale: 1,\n    baseWidth: 0,\n    baseHeight: 0\n  },\n  csvState1: {\n    data: null,\n    originalFilename: null,\n    frequencyData: [],\n    amplitudeData: [],\n    minFreq: 0,\n    maxFreq: 0,\n    minAmp: 0,\n    maxAmp: 0,\n    rowCount: 0,\n    scale: 1,\n    offsetX: 0,\n    offsetY: 0,\n    isDragging: false,\n    lastX: 0,\n    lastY: 0\n  },\n  csvState2: {\n    data: null,\n    originalFilename: null,\n    frequencyData: [],\n    amplitudeData: [],\n    minFreq: 0,\n    maxFreq: 0,\n    minAmp: 0,\n    maxAmp: 0,\n    rowCount: 0,\n    scale: 1,\n    offsetX: 0,\n    offsetY: 0,\n    isDragging: false,\n    lastX: 0,\n    lastY: 0\n  },\n  formData1: { ...DEFAULT_IMAGE_FORM_DATA },\n  formData2: { ...DEFAULT_IMAGE_FORM_DATA },\n  csvFormData: { ...DEFAULT_CSV_FORM_DATA },\n  comments: '',\n  lastModified: new Date()\n});\n\nconst initialState: ApplicationState = {\n  currentMode: 'csv',\n  currentLayout: 'horizontal',\n  currentCsvMode: 'overlay',\n  currentPageId: 1,\n  nextPageId: 2,\n  pages: new Map([[1, createInitialPageData(1)]]),\n  csvOverlayState: {\n    scale: 1,\n    offsetX: 0,\n    offsetY: 0,\n    isDragging: false,\n    lastX: 0,\n    lastY: 0,\n    showLegend: true,\n    datasets: []\n  },\n  correctionState: {\n    measurementData: null,\n    addCorrectionData: null,\n    subtractCorrectionData: null,\n    correctedData: null,\n    scale: 1,\n    offsetX: 0,\n    offsetY: 0,\n    isDragging: false,\n    lastMouseX: 0,\n    lastMouseY: 0\n  },\n  limitConfiguration: { ...DEFAULT_LIMIT_CONFIGURATION },\n  folderSelection: {\n    folder: null,\n    analyzedFiles: [],\n    selectedFiles: [],\n    availableFiles: [],\n    currentFilter: 'all'\n  }\n};\n\n// ========================================================================\n// REDUCER\n// ========================================================================\n\nfunction appReducer(state: ApplicationState, action: AppAction): ApplicationState {\n  switch (action.type) {\n    case 'SET_MODE':\n      return {\n        ...state,\n        currentMode: action.payload\n      };\n\n    case 'SET_LAYOUT':\n      return {\n        ...state,\n        currentLayout: action.payload\n      };\n\n    case 'SET_CSV_MODE':\n      return {\n        ...state,\n        currentCsvMode: action.payload\n      };\n\n    case 'SWITCH_PAGE':\n      return {\n        ...state,\n        currentPageId: action.payload\n      };\n\n    case 'ADD_PAGE':\n      const newPages = new Map(state.pages);\n      newPages.set(action.payload.pageId, action.payload);\n      return {\n        ...state,\n        pages: newPages,\n        nextPageId: Math.max(state.nextPageId, action.payload.pageId + 1)\n      };\n\n    case 'REMOVE_PAGE':\n      const updatedPages = new Map(state.pages);\n      updatedPages.delete(action.payload);\n      \n      // If removing current page, switch to another page\n      let newCurrentPageId = state.currentPageId;\n      if (action.payload === state.currentPageId && updatedPages.size > 0) {\n        newCurrentPageId = Math.min(...Array.from(updatedPages.keys()));\n      }\n\n      return {\n        ...state,\n        pages: updatedPages,\n        currentPageId: newCurrentPageId\n      };\n\n    case 'UPDATE_PAGE_DATA':\n      const pageToUpdate = state.pages.get(action.payload.pageId);\n      if (!pageToUpdate) return state;\n\n      const updatedPageData = {\n        ...pageToUpdate,\n        ...action.payload.data,\n        lastModified: new Date()\n      };\n\n      const newPagesMap = new Map(state.pages);\n      newPagesMap.set(action.payload.pageId, updatedPageData);\n\n      return {\n        ...state,\n        pages: newPagesMap\n      };\n\n    case 'ADD_CSV_OVERLAY_DATASET':\n      return {\n        ...state,\n        csvOverlayState: {\n          ...state.csvOverlayState,\n          datasets: [...state.csvOverlayState.datasets, action.payload]\n        }\n      };\n\n    case 'REMOVE_CSV_OVERLAY_DATASET':\n      return {\n        ...state,\n        csvOverlayState: {\n          ...state.csvOverlayState,\n          datasets: state.csvOverlayState.datasets.filter(d => d.id !== action.payload)\n        }\n      };\n\n    case 'UPDATE_CSV_OVERLAY_DATASET':\n      return {\n        ...state,\n        csvOverlayState: {\n          ...state.csvOverlayState,\n          datasets: state.csvOverlayState.datasets.map(dataset =>\n            dataset.id === action.payload.id\n              ? { ...dataset, ...action.payload.data }\n              : dataset\n          )\n        }\n      };\n\n    case 'UPDATE_CSV_OVERLAY_STATE':\n      return {\n        ...state,\n        csvOverlayState: {\n          ...state.csvOverlayState,\n          ...action.payload\n        }\n      };\n\n    case 'UPDATE_CORRECTION_STATE':\n      return {\n        ...state,\n        correctionState: {\n          ...state.correctionState,\n          ...action.payload\n        }\n      };\n\n    case 'UPDATE_FOLDER_SELECTION':\n      return {\n        ...state,\n        folderSelection: {\n          ...state.folderSelection,\n          ...action.payload\n        }\n      };\n\n    case 'UPDATE_LIMIT_CONFIGURATION':\n      return {\n        ...state,\n        limitConfiguration: {\n          ...state.limitConfiguration,\n          ...action.payload\n        }\n      };\n\n    case 'RESET_APPLICATION_STATE':\n      return {\n        ...initialState,\n        pages: new Map([[1, createInitialPageData(1)]])\n      };\n\n    case 'LOAD_STATE_FROM_STORAGE':\n      return {\n        ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n\n// ========================================================================\n// CONTEXT INTERFACE\n// ========================================================================\n\ninterface AppContextType {\n  state: ApplicationState;\n  // Mode and Layout Actions\n  setMode: (mode: ApplicationMode) => void;\n  setLayout: (layout: LayoutType) => void;\n  setCsvMode: (mode: CsvMode) => void;\n  \n  // Page Management Actions\n  switchToPage: (pageId: number) => void;\n  addNewPage: () => number;\n  removePage: (pageId: number) => void;\n  updatePageData: (pageId: number, data: Partial<PageData>) => void;\n  getCurrentPage: () => PageData | undefined;\n  \n  // CSV Overlay Actions\n  addCsvOverlayDataset: (dataset: CsvOverlayDataset) => void;\n  removeCsvOverlayDataset: (id: string) => void;\n  updateCsvOverlayDataset: (id: string, data: Partial<CsvOverlayDataset>) => void;\n  updateCsvOverlayState: (state: Partial<typeof initialState.csvOverlayState>) => void;\n  \n  // EMI Correction Actions\n  updateCorrectionState: (state: Partial<EmiCorrectionState>) => void;\n  \n  // Folder Selection Actions\n  updateFolderSelection: (selection: Partial<FolderSelection>) => void;\n  \n  // Limit Configuration Actions\n  updateLimitConfiguration: (config: Partial<LimitConfiguration>) => void;\n  \n  // Utility Actions\n  resetApplicationState: () => void;\n  saveStateToStorage: () => void;\n  loadStateFromStorage: () => void;\n}\n\n// ========================================================================\n// CONTEXT CREATION\n// ========================================================================\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\n// ========================================================================\n// PROVIDER COMPONENT\n// ========================================================================\n\ninterface AppContextProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AppContextProvider: React.FC<AppContextProviderProps> = ({ children }) => {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  // ========================================================================\n  // ACTION CREATORS\n  // ========================================================================\n\n  const setMode = useCallback((mode: ApplicationMode) => {\n    dispatch({ type: 'SET_MODE', payload: mode });\n  }, []);\n\n  const setLayout = useCallback((layout: LayoutType) => {\n    dispatch({ type: 'SET_LAYOUT', payload: layout });\n  }, []);\n\n  const setCsvMode = useCallback((mode: CsvMode) => {\n    dispatch({ type: 'SET_CSV_MODE', payload: mode });\n  }, []);\n\n  const switchToPage = useCallback((pageId: number) => {\n    dispatch({ type: 'SWITCH_PAGE', payload: pageId });\n  }, []);\n\n  const addNewPage = useCallback((): number => {\n    const newPageData = createInitialPageData(state.nextPageId);\n    dispatch({ type: 'ADD_PAGE', payload: newPageData });\n    return state.nextPageId;\n  }, [state.nextPageId]);\n\n  const removePage = useCallback((pageId: number) => {\n    dispatch({ type: 'REMOVE_PAGE', payload: pageId });\n  }, []);\n\n  const updatePageData = useCallback((pageId: number, data: Partial<PageData>) => {\n    dispatch({ type: 'UPDATE_PAGE_DATA', payload: { pageId, data } });\n  }, []);\n\n  const getCurrentPage = useCallback((): PageData | undefined => {\n    return state.pages.get(state.currentPageId);\n  }, [state.pages, state.currentPageId]);\n\n  const addCsvOverlayDataset = useCallback((dataset: CsvOverlayDataset) => {\n    dispatch({ type: 'ADD_CSV_OVERLAY_DATASET', payload: dataset });\n  }, []);\n\n  const removeCsvOverlayDataset = useCallback((id: string) => {\n    dispatch({ type: 'REMOVE_CSV_OVERLAY_DATASET', payload: id });\n  }, []);\n\n  const updateCsvOverlayDataset = useCallback((id: string, data: Partial<CsvOverlayDataset>) => {\n    dispatch({ type: 'UPDATE_CSV_OVERLAY_DATASET', payload: { id, data } });\n  }, []);\n\n  const updateCsvOverlayState = useCallback((overlayState: Partial<typeof initialState.csvOverlayState>) => {\n    dispatch({ type: 'UPDATE_CSV_OVERLAY_STATE', payload: overlayState });\n  }, []);\n\n  const updateCorrectionState = useCallback((correctionState: Partial<EmiCorrectionState>) => {\n    dispatch({ type: 'UPDATE_CORRECTION_STATE', payload: correctionState });\n  }, []);\n\n  const updateFolderSelection = useCallback((selection: Partial<FolderSelection>) => {\n    dispatch({ type: 'UPDATE_FOLDER_SELECTION', payload: selection });\n  }, []);\n\n  const updateLimitConfiguration = useCallback((config: Partial<LimitConfiguration>) => {\n    dispatch({ type: 'UPDATE_LIMIT_CONFIGURATION', payload: config });\n  }, []);\n\n  const resetApplicationState = useCallback(() => {\n    dispatch({ type: 'RESET_APPLICATION_STATE' });\n  }, []);\n\n  // ========================================================================\n  // PERSISTENCE FUNCTIONS\n  // ========================================================================\n\n  const saveStateToStorage = useCallback(() => {\n    try {\n      const stateToSave = {\n        currentMode: state.currentMode,\n        currentLayout: state.currentLayout,\n        currentCsvMode: state.currentCsvMode,\n        limitConfiguration: state.limitConfiguration,\n        folderSelection: {\n          ...state.folderSelection,\n          folder: null // Don't persist FileList\n        }\n      };\n      localStorage.setItem(STORAGE_KEYS.APPLICATION_STATE, JSON.stringify(stateToSave));\n    } catch (error) {\n      console.warn('Failed to save application state to localStorage:', error);\n    }\n  }, [state]);\n\n  const loadStateFromStorage = useCallback(() => {\n    try {\n      const savedState = localStorage.getItem(STORAGE_KEYS.APPLICATION_STATE);\n      if (savedState) {\n        const parsedState = JSON.parse(savedState);\n        dispatch({ type: 'LOAD_STATE_FROM_STORAGE', payload: parsedState });\n      }\n    } catch (error) {\n      console.warn('Failed to load application state from localStorage:', error);\n    }\n  }, []);\n\n  // ========================================================================\n  // EFFECTS\n  // ========================================================================\n\n  // Load state from localStorage on mount\n  useEffect(() => {\n    loadStateFromStorage();\n  }, [loadStateFromStorage]);\n\n  // Auto-save state changes to localStorage\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      saveStateToStorage();\n    }, 1000); // Debounce saves by 1 second\n\n    return () => clearTimeout(timeoutId);\n  }, [state, saveStateToStorage]);\n\n  // ========================================================================\n  // CONTEXT VALUE\n  // ========================================================================\n\n  const contextValue: AppContextType = {\n    state,\n    setMode,\n    setLayout,\n    setCsvMode,\n    switchToPage,\n    addNewPage,\n    removePage,\n    updatePageData,\n    getCurrentPage,\n    addCsvOverlayDataset,\n    removeCsvOverlayDataset,\n    updateCsvOverlayDataset,\n    updateCsvOverlayState,\n    updateCorrectionState,\n    updateFolderSelection,\n    updateLimitConfiguration,\n    resetApplicationState,\n    saveStateToStorage,\n    loadStateFromStorage\n  };\n\n  return (\n    <AppContext.Provider value={contextValue}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\n// ========================================================================\n// CUSTOM HOOK\n// ========================================================================\n\nexport const useAppContext = (): AppContextType => {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppContextProvider');\n  }\n  return context;\n};\n\n// ========================================================================\n// CONVENIENCE HOOKS\n// ========================================================================\n\nexport const useCurrentPage = () => {\n  const { getCurrentPage } = useAppContext();\n  return getCurrentPage();\n};\n\nexport const useCurrentMode = () => {\n  const { state } = useAppContext();\n  return state.currentMode;\n};\n\nexport const useCsvOverlayState = () => {\n  const { state, updateCsvOverlayState } = useAppContext();\n  return {\n    csvOverlayState: state.csvOverlayState,\n    updateCsvOverlayState\n  };\n};\n\nexport const useCorrectionState = () => {\n  const { state, updateCorrectionState } = useAppContext();\n  return {\n    correctionState: state.correctionState,\n    updateCorrectionState\n  };\n};\n\nexport const useLimitConfiguration = () => {\n  const { state, updateLimitConfiguration } = useAppContext();\n  return {\n    limitConfiguration: state.limitConfiguration,\n    updateLimitConfiguration\n  };\n};\n\nexport const useFolderSelection = () => {\n  const { state, updateFolderSelection } = useAppContext();\n  return {\n    folderSelection: state.folderSelection,\n    updateFolderSelection\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}