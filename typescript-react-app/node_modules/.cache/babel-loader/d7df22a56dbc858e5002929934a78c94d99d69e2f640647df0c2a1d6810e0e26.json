{"ast":null,"code":"import _objectSpread from\"/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncIterator from\"/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";// ========================================================================\n// REDA EMC Testing Tool - Folder Browser Component\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Folder navigation component for browsing and selecting files\n// ========================================================================\nimport React,{useState,useCallback}from'react';import{CsvService}from'../../services/CsvService';import{NoiseAnalysisService}from'../../services/NoiseAnalysisService';import{BAND_DEFINITIONS}from'../../constants';import'./FolderBrowser.css';// ========================================================================\n// INTERFACES\n// ========================================================================\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";// ========================================================================\n// FOLDER BROWSER COMPONENT\n// ========================================================================\nexport const FolderBrowser=_ref=>{let{panelId,title,maxFiles=8,onFilesSelected}=_ref;const[currentPath,setCurrentPath]=useState('');const[folderContents,setFolderContents]=useState([]);const[filteredContents,setFilteredContents]=useState([]);const[selectedFiles,setSelectedFiles]=useState(new Set());const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState('');const[selectedBandFilter,setSelectedBandFilter]=useState('all');const[sortBy,setSortBy]=useState('noisiness');const[isAnalyzingNoise,setIsAnalyzingNoise]=useState(false);// ========================================================================\n// NOISINESS ANALYSIS\n// ========================================================================\nconst batchAnalyzeNoisiness=useCallback(async items=>{const csvFiles=items.filter(item=>item.isCSV&&item.fileHandle);if(csvFiles.length===0)return;setIsAnalyzingNoise(true);console.log(\"\\uD83D\\uDD0A Analyzing band-relative noisiness for \".concat(csvFiles.length,\" CSV files...\"));// Parse all CSV files first\nconst filesData=[];for(const item of csvFiles){try{const file=await item.fileHandle.getFile();const parseResult=await CsvService.parseCsvFile(file);if(parseResult.success&&parseResult.data){// Detect band from frequency data if not already detected\nlet detectedBand=item.detectedBand;if(!detectedBand){const frequencies=parseResult.data.map(point=>point.frequency/1e6);const minFreq=Math.min(...frequencies);const maxFreq=Math.max(...frequencies);detectedBand=CsvService.detectBandFromFrequencyRange(minFreq,maxFreq);}filesData.push({filename:item.name,data:parseResult.data,band:detectedBand||'Unknown',item});}}catch(error){console.warn(\"Failed to parse \".concat(item.name,\":\"),error);}}if(filesData.length===0){setIsAnalyzingNoise(false);return;}// Use band-relative noisiness analysis\nconst analyses=NoiseAnalysisService.calculateBandRelativeNoisiness(filesData);// Update items with analysis results\nconst updatedItems=[...items];analyses.forEach(analysis=>{const fileData=filesData.find(fd=>fd.filename===analysis.filename);if(fileData){const itemIndex=updatedItems.findIndex(ui=>ui.path===fileData.item.path);if(itemIndex>=0){updatedItems[itemIndex]=_objectSpread(_objectSpread({},updatedItems[itemIndex]),{},{noisinessAnalysis:analysis,detectedBand:fileData.band// Update band if it was detected\n});}}});setFolderContents(updatedItems);setIsAnalyzingNoise(false);console.log(\"\\u2705 Band-relative noisiness analysis complete for \".concat(csvFiles.length,\" files\"));console.log(\"\\uD83D\\uDCCA Results: Files now ranked 1-10 within their respective bands (1=quietest, 10=noisiest)\");},[]);// ========================================================================\n// FILTERING AND BAND DETECTION\n// ========================================================================\nconst applyFilters=useCallback(allItems=>{let filtered=[...allItems];// Band filter (only CSV files, no folders to worry about)\nif(selectedBandFilter!=='all'){filtered=filtered.filter(item=>item.detectedBand===selectedBandFilter);}// Sort\nfiltered.sort((a,b)=>{if(sortBy==='noisiness'){var _a$noisinessAnalysis,_b$noisinessAnalysis;const aNoise=((_a$noisinessAnalysis=a.noisinessAnalysis)===null||_a$noisinessAnalysis===void 0?void 0:_a$noisinessAnalysis.noisinessIndex)||0;const bNoise=((_b$noisinessAnalysis=b.noisinessAnalysis)===null||_b$noisinessAnalysis===void 0?void 0:_b$noisinessAnalysis.noisinessIndex)||0;return bNoise-aNoise;// Highest first\n}// Default: sort by name\nreturn a.name.localeCompare(b.name);});setFilteredContents(filtered);},[selectedBandFilter,sortBy]);// Apply filters whenever band filter, sort option, or folder contents change\nReact.useEffect(()=>{applyFilters(folderContents);},[folderContents,selectedBandFilter,sortBy,applyFilters]);// ========================================================================\n// FOLDER NAVIGATION\n// ========================================================================\nconst loadFolderContents=useCallback(async dirHandle=>{setIsLoading(true);setError('');const items=[];try{var _iteratorAbruptCompletion=false;var _didIteratorError=false;var _iteratorError;try{for(var _iterator=_asyncIterator(dirHandle.entries()),_step;_iteratorAbruptCompletion=!(_step=await _iterator.next()).done;_iteratorAbruptCompletion=false){const[name,handle]=_step.value;{// Only process files, skip folders\nif(handle.kind!=='file'){continue;}// Only include CSV files\nconst isCSV=CsvService.isValidCsvFile({name});if(!isCSV){continue;}const item={name,path:name,// Simplified - just the filename\ntype:'file',isCSV:true,fileHandle:handle};try{const file=await handle.getFile();item.size=file.size;item.modified=new Date(file.lastModified);// Detect band for CSV files\nconst bandFromFilename=CsvService.detectBandFromFilename(name);if(bandFromFilename){item.detectedBand=bandFromFilename;item.bandConfidence='high';}else{item.detectedBand=null;item.bandConfidence='low';}}catch(err){// Skip files we can't access\ncontinue;}items.push(item);}}// Simple alphabetical sort\n}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(_iteratorAbruptCompletion&&_iterator.return!=null){await _iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}items.sort((a,b)=>a.name.localeCompare(b.name));setFolderContents(items);setFilteredContents(items);// No filtering needed initially\n// Start noisiness analysis for CSV files in the background\nsetTimeout(()=>batchAnalyzeNoisiness(items),100);}catch(error){setError('Failed to read folder contents.');}finally{setIsLoading(false);}},[batchAnalyzeNoisiness]);const loadFolderContentsFromFiles=useCallback(files=>{setIsLoading(true);setError('');const items=[];for(let i=0;i<files.length;i++){const file=files[i];// Only include CSV files\nconst isCSV=CsvService.isValidCsvFile(file);if(!isCSV){continue;}const item={name:file.name,path:file.name,// Simplified - just the filename\ntype:'file',size:file.size,modified:new Date(file.lastModified),isCSV:true};// Detect band for CSV files\nconst bandFromFilename=CsvService.detectBandFromFilename(file.name);if(bandFromFilename){item.detectedBand=bandFromFilename;item.bandConfidence='high';}else{item.detectedBand=null;item.bandConfidence='low';}items.push(item);}// Simple alphabetical sort\nitems.sort((a,b)=>a.name.localeCompare(b.name));setFolderContents(items);setFilteredContents(items);// No filtering needed initially\nsetIsLoading(false);},[]);const openFolderDialog=useCallback(async()=>{try{// Use the File System Access API for modern browsers\nif('showDirectoryPicker'in window){const dirHandle=await window.showDirectoryPicker();const path=dirHandle.name;setCurrentPath(path);await loadFolderContents(dirHandle);}else{// Fallback: use input element\nconst input=document.createElement('input');input.type='file';input.webkitdirectory=true;input.multiple=true;input.onchange=e=>{const files=e.target.files;if(files&&files.length>0){const firstFile=files[0];const pathParts=firstFile.webkitRelativePath.split('/');const folderName=pathParts[0];setCurrentPath(folderName);loadFolderContentsFromFiles(files);}};input.click();}}catch(error){if(error.name!=='AbortError'){setError('Failed to open folder. Please try again.');}}},[loadFolderContents,loadFolderContentsFromFiles]);// ========================================================================\n// FILE SELECTION\n// ========================================================================\nconst toggleFileSelection=useCallback((path,itemBand)=>{setSelectedFiles(prev=>{const newSelection=new Set();if(prev.has(path)){// Deselecting the currently selected file - clear everything\nnewSelection.clear();console.log(\"\\uD83D\\uDDD1\\uFE0F Deselected file: \".concat(path));}else{// Selecting a new file - replace any previous selection\nnewSelection.clear();// Clear any previous selections\nnewSelection.add(path);// Add only the new file\nif(itemBand){console.log(\"\\uD83D\\uDD04 Selected new file: \".concat(path,\" (\").concat(itemBand,\" band) - replacing any previous selection\"));}else{console.log(\"\\uD83D\\uDD04 Selected new file: \".concat(path,\" (Unknown band) - replacing any previous selection\"));}setError('');// Clear any previous errors\n}// Always trigger file loading when selection changes (including when clearing)\nsetTimeout(()=>{const selectedItems=filteredContents.filter(item=>newSelection.has(item.path)&&item.type==='file'&&item.isCSV);// Always call the callback, even when no files are selected (to clear the plot)\nif(onFilesSelected){onFilesSelected(selectedItems);}},100);// Small delay to ensure state updates are complete\nreturn newSelection;});},[filteredContents,onFilesSelected]);// ========================================================================\n// CLEAR SELECTION\n// ========================================================================\nconst clearSelection=useCallback(()=>{setSelectedFiles(new Set());setError('');// Notify parent that no files are selected\nif(onFilesSelected){onFilesSelected([]);}},[onFilesSelected]);// ========================================================================\n// RENDER HELPERS\n// ========================================================================\n// const renderPathBreadcrumb = () => {\n//   // Removed - not using breadcrumb navigation anymore\n// };\nconst renderFolderItem=item=>{const isSelected=selectedFiles.has(item.path);// All items are CSV files and selectable - no need for isSelectable variable\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"folder-item file \".concat(isSelected?'selected':'',\" selectable\"),onClick:()=>toggleFileSelection(item.path,item.detectedBand),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"item-details\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"item-name\",children:item.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"item-meta\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"band-info\",children:[item.detectedBand&&/*#__PURE__*/_jsx(\"span\",{className:\"band-indicator \".concat(item.bandConfidence),children:item.detectedBand}),!item.detectedBand&&/*#__PURE__*/_jsx(\"span\",{className:\"band-indicator unknown\",children:\"Unknown\"})]}),item.noisinessAnalysis&&/*#__PURE__*/_jsx(\"div\",{className:\"noisiness-info\",children:/*#__PURE__*/_jsx(\"span\",{className:\"noisiness-indicator\",style:{color:NoiseAnalysisService.getNoisinessColor(item.noisinessAnalysis.noisinessIndex)},title:\"Noisiness: \".concat(item.noisinessAnalysis.noisinessIndex,\"/10 (\").concat(NoiseAnalysisService.getNoisinessDescription(item.noisinessAnalysis.noisinessIndex),\")\"),children:item.noisinessAnalysis.noisinessIndex})}),!item.noisinessAnalysis&&isAnalyzingNoise&&/*#__PURE__*/_jsx(\"div\",{className:\"noisiness-info\",children:/*#__PURE__*/_jsx(\"span\",{className:\"noisiness-loading\",children:\"...\"})})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"selection-indicator\",children:/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:isSelected,onChange:()=>toggleFileSelection(item.path,item.detectedBand),onClick:e=>e.stopPropagation()})})]},item.path);};// ========================================================================\n// MAIN RENDER\n// ========================================================================\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"folder-browser\",\"data-panel-id\":panelId,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"browser-header\",children:[/*#__PURE__*/_jsxs(\"h3\",{onClick:!isLoading?openFolderDialog:undefined,style:{cursor:!isLoading?'pointer':'default',userSelect:'none',color:!currentPath?'#3498db':'inherit'},title:!currentPath?'Click to open folder':\"Click to change folder (\".concat(currentPath,\")\"),children:[title,currentPath?\" - \".concat(currentPath):' (Click here to open folder)']}),/*#__PURE__*/_jsx(\"div\",{className:\"browser-controls\",children:/*#__PURE__*/_jsx(\"button\",{onClick:openFolderDialog,className:\"open-folder-btn\",disabled:isLoading,children:currentPath?'Change Folder':'Open Folder'})})]}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:error}),currentPath&&/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"filter-controls\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"filter-section\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"band-filter-\".concat(panelId),className:\"filter-label\",children:\"Band Filter:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"band-filter-\".concat(panelId),value:selectedBandFilter,onChange:e=>{setSelectedBandFilter(e.target.value);applyFilters(folderContents);},className:\"band-filter-select\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"all\",children:\"All Bands\"}),Object.entries(BAND_DEFINITIONS).map(_ref2=>{let[bandType,definition]=_ref2;const count=folderContents.filter(item=>item.detectedBand===bandType).length;return/*#__PURE__*/_jsxs(\"option\",{value:bandType,children:[bandType,\": \",definition.range,\" (\",count,\" files)\"]},bandType);})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-section\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"sort-filter-\".concat(panelId),className:\"filter-label\",children:\"Sort by:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"sort-filter-\".concat(panelId),value:sortBy,onChange:e=>{setSortBy(e.target.value);applyFilters(folderContents);},className:\"sort-filter-select\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"noisiness\",children:\"Noisiness (High\\u2192Low)\"}),/*#__PURE__*/_jsx(\"option\",{value:\"name\",children:\"Name\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"action-section\",children:[isAnalyzingNoise&&/*#__PURE__*/_jsx(\"span\",{className:\"analysis-status\",children:\"Analyzing...\"}),/*#__PURE__*/_jsx(\"button\",{onClick:clearSelection,disabled:selectedFiles.size===0,className:\"clear-all-btn\",children:selectedFiles.size>0?'Clear Selection':'Clear All'})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"folder-contents\",children:!currentPath?/*#__PURE__*/_jsxs(\"div\",{className:\"empty-state\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"empty-icon\",children:\"Open Folder\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Click \\\"Open Folder\\\" to browse and select CSV files\"})]}):isLoading?/*#__PURE__*/_jsxs(\"div\",{className:\"loading-state\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"spinner\",children:\"Loading...\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Loading folder contents...\"})]}):filteredContents.length===0?/*#__PURE__*/_jsxs(\"div\",{className:\"empty-folder\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"empty-icon\",children:\"Empty\"}),/*#__PURE__*/_jsx(\"p\",{children:selectedBandFilter!=='all'?\"No CSV files found for band \".concat(selectedBandFilter):'This folder is empty'}),selectedBandFilter!=='all'&&folderContents.length>0&&/*#__PURE__*/_jsx(\"small\",{children:\"Try selecting \\\"All Bands\\\" to see all files\"})]}):/*#__PURE__*/_jsx(\"div\",{className:\"items-list\",children:filteredContents.map(renderFolderItem)})})]});};export default FolderBrowser;","map":{"version":3,"names":["React","useState","useCallback","CsvService","NoiseAnalysisService","BAND_DEFINITIONS","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","FolderBrowser","_ref","panelId","title","maxFiles","onFilesSelected","currentPath","setCurrentPath","folderContents","setFolderContents","filteredContents","setFilteredContents","selectedFiles","setSelectedFiles","Set","isLoading","setIsLoading","error","setError","selectedBandFilter","setSelectedBandFilter","sortBy","setSortBy","isAnalyzingNoise","setIsAnalyzingNoise","batchAnalyzeNoisiness","items","csvFiles","filter","item","isCSV","fileHandle","length","console","log","concat","filesData","file","getFile","parseResult","parseCsvFile","success","data","detectedBand","frequencies","map","point","frequency","minFreq","Math","min","maxFreq","max","detectBandFromFrequencyRange","push","filename","name","band","warn","analyses","calculateBandRelativeNoisiness","updatedItems","forEach","analysis","fileData","find","fd","itemIndex","findIndex","ui","path","_objectSpread","noisinessAnalysis","applyFilters","allItems","filtered","sort","a","b","_a$noisinessAnalysis","_b$noisinessAnalysis","aNoise","noisinessIndex","bNoise","localeCompare","useEffect","loadFolderContents","dirHandle","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_asyncIterator","entries","_step","next","done","handle","value","kind","isValidCsvFile","type","size","modified","Date","lastModified","bandFromFilename","detectBandFromFilename","bandConfidence","err","return","setTimeout","loadFolderContentsFromFiles","files","i","openFolderDialog","window","showDirectoryPicker","input","document","createElement","webkitdirectory","multiple","onchange","e","target","firstFile","pathParts","webkitRelativePath","split","folderName","click","toggleFileSelection","itemBand","prev","newSelection","has","clear","add","selectedItems","clearSelection","renderFolderItem","isSelected","className","onClick","children","style","color","getNoisinessColor","getNoisinessDescription","checked","onChange","stopPropagation","undefined","cursor","userSelect","disabled","htmlFor","id","Object","_ref2","bandType","definition","count","range"],"sources":["/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/src/components/FolderBrowser/FolderBrowser.tsx"],"sourcesContent":["// ========================================================================\n// REDA EMC Testing Tool - Folder Browser Component\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Folder navigation component for browsing and selecting files\n// ========================================================================\n\nimport React, { useState, useCallback } from 'react';\nimport { CsvService } from '../../services/CsvService';\nimport { NoiseAnalysisService, NoiseAnalysisResult } from '../../services/NoiseAnalysisService';\nimport { BandType, CsvDataPoint } from '../../types';\nimport { BAND_DEFINITIONS } from '../../constants';\nimport './FolderBrowser.css';\n\n// ========================================================================\n// INTERFACES\n// ========================================================================\n\ninterface FolderItem {\n  name: string;\n  path: string;\n  type: 'file' | 'folder';\n  size?: number;\n  modified?: Date;\n  isCSV?: boolean;\n  detectedBand?: BandType | null;\n  bandConfidence?: 'high' | 'medium' | 'low';\n  fileHandle?: any; // File handle for File System Access API\n  noisinessAnalysis?: NoiseAnalysisResult; // Noisiness analysis data\n}\n\ninterface FolderBrowserProps {\n  panelId: string;\n  title: string;\n  maxFiles?: number;\n  onFilesSelected?: (files: FolderItem[]) => void;\n}\n\n// ========================================================================\n// FOLDER BROWSER COMPONENT\n// ========================================================================\n\nexport const FolderBrowser: React.FC<FolderBrowserProps> = ({\n  panelId,\n  title,\n  maxFiles = 8,\n  onFilesSelected\n}) => {\n  const [currentPath, setCurrentPath] = useState<string>('');\n  const [folderContents, setFolderContents] = useState<FolderItem[]>([]);\n  const [filteredContents, setFilteredContents] = useState<FolderItem[]>([]);\n  const [selectedFiles, setSelectedFiles] = useState<Set<string>>(new Set());\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const [selectedBandFilter, setSelectedBandFilter] = useState<BandType | 'all'>('all');\n  const [sortBy, setSortBy] = useState<'name' | 'noisiness'>('noisiness');\n  const [isAnalyzingNoise, setIsAnalyzingNoise] = useState<boolean>(false);\n\n  // ========================================================================\n  // NOISINESS ANALYSIS\n  // ========================================================================\n\n  const batchAnalyzeNoisiness = useCallback(async (items: FolderItem[]) => {\n    const csvFiles = items.filter(item => item.isCSV && item.fileHandle);\n    if (csvFiles.length === 0) return;\n\n    setIsAnalyzingNoise(true);\n    console.log(`🔊 Analyzing band-relative noisiness for ${csvFiles.length} CSV files...`);\n\n    // Parse all CSV files first\n    const filesData: Array<{ filename: string; data: CsvDataPoint[]; band?: string; item: FolderItem }> = [];\n    \n    for (const item of csvFiles) {\n      try {\n        const file = await item.fileHandle!.getFile();\n        const parseResult = await CsvService.parseCsvFile(file);\n        \n        if (parseResult.success && parseResult.data) {\n          // Detect band from frequency data if not already detected\n          let detectedBand = item.detectedBand;\n          if (!detectedBand) {\n            const frequencies = parseResult.data.map(point => point.frequency / 1e6);\n            const minFreq = Math.min(...frequencies);\n            const maxFreq = Math.max(...frequencies);\n            detectedBand = CsvService.detectBandFromFrequencyRange(minFreq, maxFreq);\n          }\n          \n          filesData.push({\n            filename: item.name,\n            data: parseResult.data,\n            band: detectedBand || 'Unknown',\n            item\n          });\n        }\n      } catch (error) {\n        console.warn(`Failed to parse ${item.name}:`, error);\n      }\n    }\n    \n    if (filesData.length === 0) {\n      setIsAnalyzingNoise(false);\n      return;\n    }\n\n    // Use band-relative noisiness analysis\n    const analyses = NoiseAnalysisService.calculateBandRelativeNoisiness(filesData);\n    \n    // Update items with analysis results\n    const updatedItems = [...items];\n    analyses.forEach(analysis => {\n      const fileData = filesData.find(fd => fd.filename === analysis.filename);\n      if (fileData) {\n        const itemIndex = updatedItems.findIndex(ui => ui.path === fileData.item.path);\n        if (itemIndex >= 0) {\n          updatedItems[itemIndex] = { \n            ...updatedItems[itemIndex], \n            noisinessAnalysis: analysis,\n            detectedBand: fileData.band as any // Update band if it was detected\n          };\n        }\n      }\n    });\n    \n    setFolderContents(updatedItems);\n    setIsAnalyzingNoise(false);\n    \n    console.log(`✅ Band-relative noisiness analysis complete for ${csvFiles.length} files`);\n    console.log(`📊 Results: Files now ranked 1-10 within their respective bands (1=quietest, 10=noisiest)`);\n  }, []);\n\n  // ========================================================================\n  // FILTERING AND BAND DETECTION\n  // ========================================================================\n\n  const applyFilters = useCallback((allItems: FolderItem[]) => {\n    let filtered = [...allItems];\n    \n    // Band filter (only CSV files, no folders to worry about)\n    if (selectedBandFilter !== 'all') {\n      filtered = filtered.filter(item => item.detectedBand === selectedBandFilter);\n    }\n    \n    // Sort\n    filtered.sort((a, b) => {\n      if (sortBy === 'noisiness') {\n        const aNoise = a.noisinessAnalysis?.noisinessIndex || 0;\n        const bNoise = b.noisinessAnalysis?.noisinessIndex || 0;\n        return bNoise - aNoise; // Highest first\n      }\n      \n      // Default: sort by name\n      return a.name.localeCompare(b.name);\n    });\n\n    setFilteredContents(filtered);\n  }, [selectedBandFilter, sortBy]);\n\n  // Apply filters whenever band filter, sort option, or folder contents change\n  React.useEffect(() => {\n    applyFilters(folderContents);\n  }, [folderContents, selectedBandFilter, sortBy, applyFilters]);\n\n  // ========================================================================\n  // FOLDER NAVIGATION\n  // ========================================================================\n\n  const loadFolderContents = useCallback(async (dirHandle: any) => {\n    setIsLoading(true);\n    setError('');\n    const items: FolderItem[] = [];\n\n    try {\n      for await (const [name, handle] of dirHandle.entries()) {\n        // Only process files, skip folders\n        if (handle.kind !== 'file') {\n          continue;\n        }\n        \n        // Only include CSV files\n        const isCSV = CsvService.isValidCsvFile({ name } as File);\n        if (!isCSV) {\n          continue;\n        }\n\n        const item: FolderItem = {\n          name,\n          path: name, // Simplified - just the filename\n          type: 'file',\n          isCSV: true,\n          fileHandle: handle\n        };\n\n        try {\n          const file = await handle.getFile();\n          item.size = file.size;\n          item.modified = new Date(file.lastModified);\n          \n          // Detect band for CSV files\n          const bandFromFilename = CsvService.detectBandFromFilename(name);\n          if (bandFromFilename) {\n            item.detectedBand = bandFromFilename;\n            item.bandConfidence = 'high';\n          } else {\n            item.detectedBand = null;\n            item.bandConfidence = 'low';\n          }\n        } catch (err) {\n          // Skip files we can't access\n          continue;\n        }\n\n        items.push(item);\n      }\n\n      // Simple alphabetical sort\n      items.sort((a, b) => a.name.localeCompare(b.name));\n\n      setFolderContents(items);\n      setFilteredContents(items); // No filtering needed initially\n      \n      // Start noisiness analysis for CSV files in the background\n      setTimeout(() => batchAnalyzeNoisiness(items), 100);\n    } catch (error) {\n      setError('Failed to read folder contents.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [batchAnalyzeNoisiness]);\n\n  const loadFolderContentsFromFiles = useCallback((files: FileList) => {\n    setIsLoading(true);\n    setError('');\n    const items: FolderItem[] = [];\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      \n      // Only include CSV files\n      const isCSV = CsvService.isValidCsvFile(file);\n      if (!isCSV) {\n        continue;\n      }\n\n      const item: FolderItem = {\n        name: file.name,\n        path: file.name, // Simplified - just the filename\n        type: 'file',\n        size: file.size,\n        modified: new Date(file.lastModified),\n        isCSV: true\n      };\n\n      // Detect band for CSV files\n      const bandFromFilename = CsvService.detectBandFromFilename(file.name);\n      if (bandFromFilename) {\n        item.detectedBand = bandFromFilename;\n        item.bandConfidence = 'high';\n      } else {\n        item.detectedBand = null;\n        item.bandConfidence = 'low';\n      }\n\n      items.push(item);\n    }\n\n    // Simple alphabetical sort\n    items.sort((a, b) => a.name.localeCompare(b.name));\n\n    setFolderContents(items);\n    setFilteredContents(items); // No filtering needed initially\n    setIsLoading(false);\n  }, []);\n\n  const openFolderDialog = useCallback(async () => {\n    try {\n      // Use the File System Access API for modern browsers\n      if ('showDirectoryPicker' in window) {\n        const dirHandle = await (window as any).showDirectoryPicker();\n        const path = dirHandle.name;\n        setCurrentPath(path);\n        await loadFolderContents(dirHandle);\n      } else {\n        // Fallback: use input element\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.webkitdirectory = true;\n        input.multiple = true;\n        \n        input.onchange = (e) => {\n          const files = (e.target as HTMLInputElement).files;\n          if (files && files.length > 0) {\n            const firstFile = files[0];\n            const pathParts = firstFile.webkitRelativePath.split('/');\n            const folderName = pathParts[0];\n            setCurrentPath(folderName);\n            loadFolderContentsFromFiles(files);\n          }\n        };\n        \n        input.click();\n      }\n    } catch (error) {\n      if ((error as Error).name !== 'AbortError') {\n        setError('Failed to open folder. Please try again.');\n      }\n    }\n  }, [loadFolderContents, loadFolderContentsFromFiles]);\n\n  // ========================================================================\n  // FILE SELECTION\n  // ========================================================================\n\n  const toggleFileSelection = useCallback((path: string, itemBand?: BandType | null) => {\n    setSelectedFiles(prev => {\n      const newSelection = new Set<string>();\n      \n      if (prev.has(path)) {\n        // Deselecting the currently selected file - clear everything\n        newSelection.clear();\n        console.log(`🗑️ Deselected file: ${path}`);\n      } else {\n        // Selecting a new file - replace any previous selection\n        newSelection.clear(); // Clear any previous selections\n        newSelection.add(path); // Add only the new file\n        \n        if (itemBand) {\n          console.log(`🔄 Selected new file: ${path} (${itemBand} band) - replacing any previous selection`);\n        } else {\n          console.log(`🔄 Selected new file: ${path} (Unknown band) - replacing any previous selection`);\n        }\n        \n        setError(''); // Clear any previous errors\n      }\n\n      // Always trigger file loading when selection changes (including when clearing)\n      setTimeout(() => {\n        const selectedItems = filteredContents.filter(item => \n          newSelection.has(item.path) && item.type === 'file' && item.isCSV\n        );\n        \n        // Always call the callback, even when no files are selected (to clear the plot)\n        if (onFilesSelected) {\n          onFilesSelected(selectedItems);\n        }\n      }, 100); // Small delay to ensure state updates are complete\n      \n      return newSelection;\n    });\n  }, [filteredContents, onFilesSelected]);\n\n  // ========================================================================\n  // CLEAR SELECTION\n  // ========================================================================\n\n  const clearSelection = useCallback(() => {\n    setSelectedFiles(new Set());\n    setError('');\n    \n    // Notify parent that no files are selected\n    if (onFilesSelected) {\n      onFilesSelected([]);\n    }\n  }, [onFilesSelected]);\n\n  // ========================================================================\n  // RENDER HELPERS\n  // ========================================================================\n\n  // const renderPathBreadcrumb = () => {\n  //   // Removed - not using breadcrumb navigation anymore\n  // };\n\n  const renderFolderItem = (item: FolderItem) => {\n    const isSelected = selectedFiles.has(item.path);\n    // All items are CSV files and selectable - no need for isSelectable variable\n\n    return (\n      <div\n        key={item.path}\n        className={`folder-item file ${isSelected ? 'selected' : ''} selectable`}\n        onClick={() => toggleFileSelection(item.path, item.detectedBand)}\n      >\n        <div className=\"item-details\">\n          <div className=\"item-name\">{item.name}</div>\n          <div className=\"item-meta\">\n            <div className=\"band-info\">\n              {item.detectedBand && (\n                <span className={`band-indicator ${item.bandConfidence}`}>\n                  {item.detectedBand}\n                </span>\n              )}\n              {!item.detectedBand && (\n                <span className=\"band-indicator unknown\">\n                  Unknown\n                </span>\n              )}\n            </div>\n            {item.noisinessAnalysis && (\n              <div className=\"noisiness-info\">\n                <span \n                  className=\"noisiness-indicator\"\n                  style={{ color: NoiseAnalysisService.getNoisinessColor(item.noisinessAnalysis.noisinessIndex) }}\n                  title={`Noisiness: ${item.noisinessAnalysis.noisinessIndex}/10 (${NoiseAnalysisService.getNoisinessDescription(item.noisinessAnalysis.noisinessIndex)})`}\n                >\n                  {item.noisinessAnalysis.noisinessIndex}\n                </span>\n              </div>\n            )}\n            {!item.noisinessAnalysis && isAnalyzingNoise && (\n              <div className=\"noisiness-info\">\n                <span className=\"noisiness-loading\">...</span>\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"selection-indicator\">\n          <input \n            type=\"checkbox\" \n            checked={isSelected} \n            onChange={() => toggleFileSelection(item.path, item.detectedBand)}\n            onClick={(e) => e.stopPropagation()}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  // ========================================================================\n  // MAIN RENDER\n  // ========================================================================\n\n  return (\n    <div className=\"folder-browser\" data-panel-id={panelId}>\n      <div className=\"browser-header\">\n        <h3 \n          onClick={!isLoading ? openFolderDialog : undefined}\n          style={{ \n            cursor: !isLoading ? 'pointer' : 'default',\n            userSelect: 'none',\n            color: !currentPath ? '#3498db' : 'inherit'\n          }}\n          title={!currentPath ? 'Click to open folder' : `Click to change folder (${currentPath})`}\n        >\n          {title}\n          {currentPath ? ` - ${currentPath}` : ' (Click here to open folder)'}\n        </h3>\n        <div className=\"browser-controls\">\n          <button \n            onClick={openFolderDialog}\n            className=\"open-folder-btn\"\n            disabled={isLoading}\n          >\n            {currentPath ? 'Change Folder' : 'Open Folder'}\n          </button>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">\n          {error}\n        </div>\n      )}\n\n      {currentPath && (\n        <>\n          {/* {renderPathBreadcrumb()} - Removed for cleaner UI */}\n          \n          {/* Filter and Sort Controls */}\n          <div className=\"filter-controls\">\n            <div className=\"filter-section\">\n              <label htmlFor={`band-filter-${panelId}`} className=\"filter-label\">\n                Band Filter:\n              </label>\n              <select\n                id={`band-filter-${panelId}`}\n                value={selectedBandFilter}\n                onChange={(e) => {\n                  setSelectedBandFilter(e.target.value as BandType | 'all');\n                  applyFilters(folderContents);\n                }}\n                className=\"band-filter-select\"\n              >\n                <option value=\"all\">All Bands</option>\n                {Object.entries(BAND_DEFINITIONS).map(([bandType, definition]) => {\n                  const count = folderContents.filter(item => item.detectedBand === bandType).length;\n                  return (\n                    <option key={bandType} value={bandType}>\n                      {bandType}: {definition.range} ({count} files)\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n            <div className=\"filter-section\">\n              <label htmlFor={`sort-filter-${panelId}`} className=\"filter-label\">\n                Sort by:\n              </label>\n              <select\n                id={`sort-filter-${panelId}`}\n                value={sortBy}\n                onChange={(e) => {\n                  setSortBy(e.target.value as 'name' | 'noisiness');\n                  applyFilters(folderContents);\n                }}\n                className=\"sort-filter-select\"\n              >\n                <option value=\"noisiness\">Noisiness (High→Low)</option>\n                <option value=\"name\">Name</option>\n              </select>\n            </div>\n            <div className=\"action-section\">\n              {isAnalyzingNoise && (\n                <span className=\"analysis-status\">\n                  Analyzing...\n                </span>\n              )}\n              <button \n                onClick={clearSelection}\n                disabled={selectedFiles.size === 0}\n                className=\"clear-all-btn\"\n              >\n                {selectedFiles.size > 0 ? 'Clear Selection' : 'Clear All'}\n              </button>\n            </div>\n          </div>\n        </>\n      )}\n\n      <div className=\"folder-contents\">\n        {!currentPath ? (\n          <div className=\"empty-state\">\n            <div className=\"empty-icon\">Open Folder</div>\n            <p>Click \"Open Folder\" to browse and select CSV files</p>\n          </div>\n        ) : isLoading ? (\n          <div className=\"loading-state\">\n            <div className=\"spinner\">Loading...</div>\n            <p>Loading folder contents...</p>\n          </div>\n        ) : filteredContents.length === 0 ? (\n          <div className=\"empty-folder\">\n            <div className=\"empty-icon\">Empty</div>\n            <p>{selectedBandFilter !== 'all' ? `No CSV files found for band ${selectedBandFilter}` : 'This folder is empty'}</p>\n            {selectedBandFilter !== 'all' && folderContents.length > 0 && (\n              <small>Try selecting \"All Bands\" to see all files</small>\n            )}\n          </div>\n        ) : (\n          <div className=\"items-list\">\n            {filteredContents.map(renderFolderItem)}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FolderBrowser; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}