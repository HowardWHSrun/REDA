{"ast":null,"code":"var _jsxFileName = \"/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/src/components/CsvUpload/CsvUpload.tsx\",\n  _s = $RefreshSig$();\n// ========================================================================\n// REDA EMC Testing Tool - CSV Upload Component\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// File upload component with drag-and-drop, validation, and preview\n// ========================================================================\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport { useAppContext, useCsvOverlayState } from '../../context/AppContext';\nimport { CsvService } from '../../services/CsvService';\nimport { APP_CONFIG, SUPPORTED_CSV_TYPES } from '../../constants';\nimport './CsvUpload.css';\n\n// ========================================================================\n// UPLOAD COMPONENT INTERFACES\n// ========================================================================\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// ========================================================================\n// CSV UPLOAD COMPONENT\n// ========================================================================\n\nexport const CsvUpload = ({\n  maxFiles = 8,\n  showAnalysis = true,\n  onFilesUploaded,\n  onError\n}) => {\n  _s();\n  const {\n    addCsvOverlayDataset\n  } = useAppContext();\n  const {\n    csvOverlayState\n  } = useCsvOverlayState();\n  const fileInputRef = useRef(null);\n  const [uploadState, setUploadState] = useState({\n    isDragging: false,\n    isProcessing: false,\n    uploadedFiles: [],\n    errors: [],\n    warnings: []\n  });\n\n  // ========================================================================\n  // FILE VALIDATION\n  // ========================================================================\n\n  const validateFiles = useCallback(files => {\n    const fileArray = Array.from(files);\n    const valid = [];\n    const errors = [];\n\n    // Check file count\n    const totalFiles = csvOverlayState.datasets.length + fileArray.length;\n    if (totalFiles > maxFiles) {\n      errors.push(`Maximum ${maxFiles} files allowed. Currently ${csvOverlayState.datasets.length} files loaded.`);\n      return {\n        valid,\n        errors\n      };\n    }\n    for (const file of fileArray) {\n      // Check file type\n      if (!CsvService.isValidCsvFile(file)) {\n        errors.push(`Invalid file type: ${file.name}. Please select CSV or TXT files.`);\n        continue;\n      }\n\n      // Check file size\n      if (file.size > APP_CONFIG.maxFileSize) {\n        errors.push(`File too large: ${file.name}. Maximum size is ${APP_CONFIG.maxFileSize / (1024 * 1024)}MB.`);\n        continue;\n      }\n\n      // Check for duplicates\n      const isDuplicate = csvOverlayState.datasets.some(dataset => dataset.filename === file.name);\n      if (isDuplicate) {\n        errors.push(`File already loaded: ${file.name}`);\n        continue;\n      }\n      valid.push(file);\n    }\n    return {\n      valid,\n      errors\n    };\n  }, [csvOverlayState.datasets, maxFiles]);\n\n  // ========================================================================\n  // FILE PROCESSING\n  // ========================================================================\n\n  const processFiles = useCallback(async files => {\n    setUploadState(prev => ({\n      ...prev,\n      isProcessing: true,\n      errors: [],\n      warnings: []\n    }));\n    const newDatasets = [];\n    const allErrors = [];\n    const allWarnings = [];\n    const analyses = [];\n    try {\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        const colorIndex = (csvOverlayState.datasets.length + i) % APP_CONFIG.chartColors.length;\n        const color = APP_CONFIG.chartColors[colorIndex];\n        try {\n          // Create overlay dataset\n          const result = await CsvService.createOverlayDataset(file, color);\n          if (result.success && result.data) {\n            newDatasets.push(result.data);\n            allWarnings.push(...result.warnings);\n\n            // Analyze file\n            if (showAnalysis) {\n              const analysis = CsvService.analyzeFile(file, result.data.data);\n              analyses.push(analysis);\n            }\n          } else {\n            allErrors.push(...result.errors);\n          }\n        } catch (error) {\n          allErrors.push(`Failed to process ${file.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n\n      // Add successful datasets to state\n      for (const dataset of newDatasets) {\n        addCsvOverlayDataset(dataset);\n      }\n\n      // Update component state\n      setUploadState(prev => ({\n        ...prev,\n        isProcessing: false,\n        uploadedFiles: [...prev.uploadedFiles, ...analyses],\n        errors: allErrors,\n        warnings: allWarnings\n      }));\n\n      // Notify parent component\n      if (onFilesUploaded && newDatasets.length > 0) {\n        onFilesUploaded(newDatasets);\n      }\n      if (onError && allErrors.length > 0) {\n        onError(allErrors.join('; '));\n      }\n    } catch (error) {\n      const errorMessage = `Processing failed: ${error instanceof Error ? error.message : 'Unknown error'}`;\n      setUploadState(prev => ({\n        ...prev,\n        isProcessing: false,\n        errors: [errorMessage]\n      }));\n      if (onError) {\n        onError(errorMessage);\n      }\n    }\n  }, [addCsvOverlayDataset, csvOverlayState.datasets.length, showAnalysis, onFilesUploaded, onError]);\n\n  // ========================================================================\n  // EVENT HANDLERS\n  // ========================================================================\n\n  const handleFileSelect = useCallback(async event => {\n    const files = event.target.files;\n    if (!files || files.length === 0) return;\n    const {\n      valid,\n      errors\n    } = validateFiles(files);\n    if (errors.length > 0) {\n      setUploadState(prev => ({\n        ...prev,\n        errors\n      }));\n      return;\n    }\n    await processFiles(valid);\n\n    // Reset input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  }, [validateFiles, processFiles]);\n  const handleDragOver = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n    setUploadState(prev => ({\n      ...prev,\n      isDragging: true\n    }));\n  }, []);\n  const handleDragLeave = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n    setUploadState(prev => ({\n      ...prev,\n      isDragging: false\n    }));\n  }, []);\n  const handleDrop = useCallback(async event => {\n    event.preventDefault();\n    event.stopPropagation();\n    setUploadState(prev => ({\n      ...prev,\n      isDragging: false\n    }));\n    const files = event.dataTransfer.files;\n    if (!files || files.length === 0) return;\n    const {\n      valid,\n      errors\n    } = validateFiles(files);\n    if (errors.length > 0) {\n      setUploadState(prev => ({\n        ...prev,\n        errors\n      }));\n      return;\n    }\n    await processFiles(valid);\n  }, [validateFiles, processFiles]);\n  const handleClick = useCallback(() => {\n    var _fileInputRef$current;\n    if (uploadState.isProcessing) return;\n    (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n  }, [uploadState.isProcessing]);\n  const clearErrors = useCallback(() => {\n    setUploadState(prev => ({\n      ...prev,\n      errors: [],\n      warnings: []\n    }));\n  }, []);\n\n  // ========================================================================\n  // RENDER HELPERS\n  // ========================================================================\n\n  const renderUploadArea = () => {\n    const hasFiles = csvOverlayState.datasets.length > 0;\n    const remainingSlots = maxFiles - csvOverlayState.datasets.length;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `csv-upload-area ${uploadState.isDragging ? 'dragging' : ''} ${uploadState.isProcessing ? 'processing' : ''}`,\n      onDragOver: handleDragOver,\n      onDragLeave: handleDragLeave,\n      onDrop: handleDrop,\n      onClick: handleClick,\n      role: \"button\",\n      tabIndex: 0,\n      onKeyDown: e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          handleClick();\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: fileInputRef,\n        type: \"file\",\n        accept: SUPPORTED_CSV_TYPES.join(','),\n        multiple: true,\n        onChange: handleFileSelect,\n        style: {\n          display: 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-content\",\n        children: uploadState.isProcessing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upload-spinner\",\n            children: \"\\u27F3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Processing files...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"Analyzing CSV data and detecting frequency bands\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upload-icon\",\n            children: \"\\uD83D\\uDCC1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: hasFiles ? `Add more CSV files (${remainingSlots} remaining)` : 'Click to select or drag & drop CSV files'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: hasFiles ? 'Multiple datasets will be displayed with different colors' : 'Supports CSV files with frequency and amplitude data'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"Hold Ctrl/Cmd to select multiple files\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this);\n  };\n  const renderMessages = () => {\n    if (uploadState.errors.length === 0 && uploadState.warnings.length === 0) {\n      return null;\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-messages\",\n      children: [uploadState.errors.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-messages\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\u274C Errors:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: uploadState.errors.map((error, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: error\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clearErrors,\n          className: \"clear-errors-btn\",\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this), uploadState.warnings.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"warning-messages\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\u26A0\\uFE0F Warnings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: uploadState.warnings.map((warning, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: warning\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this);\n  };\n  const renderFileAnalysis = () => {\n    if (!showAnalysis || uploadState.uploadedFiles.length === 0) {\n      return null;\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-analysis\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\uD83D\\uDCCA File Analysis:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"analysis-list\",\n        children: uploadState.uploadedFiles.map((analysis, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analysis-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"analysis-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"filename\",\n              children: analysis.filename\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `status ${analysis.isValid ? 'valid' : 'invalid'}`,\n              children: analysis.isValid ? '✅' : '❌'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"analysis-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Band: \", analysis.band || 'Unknown']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Points: \", analysis.dataPoints.toLocaleString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Range: \", analysis.frequencyRange.min.toFixed(1), \" - \", analysis.frequencyRange.max.toFixed(1), \" MHz\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 15\n          }, this), analysis.errors.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"analysis-errors\",\n            children: analysis.errors.map((error, errorIndex) => /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"error\",\n              children: error\n            }, errorIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this);\n  };\n\n  // ========================================================================\n  // MAIN RENDER\n  // ========================================================================\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"csv-upload-component\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDCC2 CSV File Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Upload EMC spectrum data files for analysis and comparison\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this), renderUploadArea(), renderMessages(), renderFileAnalysis()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 378,\n    columnNumber: 5\n  }, this);\n};\n_s(CsvUpload, \"Js+wDm8jsUWg0DKDpaI76jyO2ys=\", false, function () {\n  return [useAppContext, useCsvOverlayState];\n});\n_c = CsvUpload;\nexport default CsvUpload;\nvar _c;\n$RefreshReg$(_c, \"CsvUpload\");","map":{"version":3,"names":["React","useState","useRef","useCallback","useAppContext","useCsvOverlayState","CsvService","APP_CONFIG","SUPPORTED_CSV_TYPES","jsxDEV","_jsxDEV","Fragment","_Fragment","CsvUpload","maxFiles","showAnalysis","onFilesUploaded","onError","_s","addCsvOverlayDataset","csvOverlayState","fileInputRef","uploadState","setUploadState","isDragging","isProcessing","uploadedFiles","errors","warnings","validateFiles","files","fileArray","Array","from","valid","totalFiles","datasets","length","push","file","isValidCsvFile","name","size","maxFileSize","isDuplicate","some","dataset","filename","processFiles","prev","newDatasets","allErrors","allWarnings","analyses","i","colorIndex","chartColors","color","result","createOverlayDataset","success","data","analysis","analyzeFile","error","Error","message","join","errorMessage","handleFileSelect","event","target","current","value","handleDragOver","preventDefault","stopPropagation","handleDragLeave","handleDrop","dataTransfer","handleClick","_fileInputRef$current","click","clearErrors","renderUploadArea","hasFiles","remainingSlots","className","onDragOver","onDragLeave","onDrop","onClick","role","tabIndex","onKeyDown","e","key","children","ref","type","accept","multiple","onChange","style","display","fileName","_jsxFileName","lineNumber","columnNumber","renderMessages","map","index","warning","renderFileAnalysis","isValid","band","dataPoints","toLocaleString","frequencyRange","min","toFixed","max","errorIndex","_c","$RefreshReg$"],"sources":["/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/src/components/CsvUpload/CsvUpload.tsx"],"sourcesContent":["// ========================================================================\n// REDA EMC Testing Tool - CSV Upload Component\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// File upload component with drag-and-drop, validation, and preview\n// ========================================================================\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport { useAppContext, useCsvOverlayState } from '../../context/AppContext';\nimport { CsvService } from '../../services/CsvService';\nimport { FileAnalysis, CsvOverlayDataset } from '../../types';\nimport { APP_CONFIG, SUPPORTED_CSV_TYPES } from '../../constants';\nimport './CsvUpload.css';\n\n// ========================================================================\n// UPLOAD COMPONENT INTERFACES\n// ========================================================================\n\ninterface CsvUploadProps {\n  maxFiles?: number;\n  showAnalysis?: boolean;\n  onFilesUploaded?: (datasets: CsvOverlayDataset[]) => void;\n  onError?: (error: string) => void;\n}\n\ninterface FileUploadState {\n  isDragging: boolean;\n  isProcessing: boolean;\n  uploadedFiles: FileAnalysis[];\n  errors: string[];\n  warnings: string[];\n}\n\n// ========================================================================\n// CSV UPLOAD COMPONENT\n// ========================================================================\n\nexport const CsvUpload: React.FC<CsvUploadProps> = ({\n  maxFiles = 8,\n  showAnalysis = true,\n  onFilesUploaded,\n  onError\n}) => {\n  const { addCsvOverlayDataset } = useAppContext();\n  const { csvOverlayState } = useCsvOverlayState();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const [uploadState, setUploadState] = useState<FileUploadState>({\n    isDragging: false,\n    isProcessing: false,\n    uploadedFiles: [],\n    errors: [],\n    warnings: []\n  });\n\n  // ========================================================================\n  // FILE VALIDATION\n  // ========================================================================\n\n  const validateFiles = useCallback((files: FileList | File[]): { valid: File[]; errors: string[] } => {\n    const fileArray = Array.from(files);\n    const valid: File[] = [];\n    const errors: string[] = [];\n\n    // Check file count\n    const totalFiles = csvOverlayState.datasets.length + fileArray.length;\n    if (totalFiles > maxFiles) {\n      errors.push(`Maximum ${maxFiles} files allowed. Currently ${csvOverlayState.datasets.length} files loaded.`);\n      return { valid, errors };\n    }\n\n    for (const file of fileArray) {\n      // Check file type\n      if (!CsvService.isValidCsvFile(file)) {\n        errors.push(`Invalid file type: ${file.name}. Please select CSV or TXT files.`);\n        continue;\n      }\n\n      // Check file size\n      if (file.size > APP_CONFIG.maxFileSize) {\n        errors.push(`File too large: ${file.name}. Maximum size is ${APP_CONFIG.maxFileSize / (1024 * 1024)}MB.`);\n        continue;\n      }\n\n      // Check for duplicates\n      const isDuplicate = csvOverlayState.datasets.some(dataset => \n        dataset.filename === file.name\n      );\n      if (isDuplicate) {\n        errors.push(`File already loaded: ${file.name}`);\n        continue;\n      }\n\n      valid.push(file);\n    }\n\n    return { valid, errors };\n  }, [csvOverlayState.datasets, maxFiles]);\n\n  // ========================================================================\n  // FILE PROCESSING\n  // ========================================================================\n\n  const processFiles = useCallback(async (files: File[]) => {\n    setUploadState(prev => ({ ...prev, isProcessing: true, errors: [], warnings: [] }));\n\n    const newDatasets: CsvOverlayDataset[] = [];\n    const allErrors: string[] = [];\n    const allWarnings: string[] = [];\n    const analyses: FileAnalysis[] = [];\n\n    try {\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        const colorIndex = (csvOverlayState.datasets.length + i) % APP_CONFIG.chartColors.length;\n        const color = APP_CONFIG.chartColors[colorIndex];\n\n        try {\n          // Create overlay dataset\n          const result = await CsvService.createOverlayDataset(file, color);\n          \n          if (result.success && result.data) {\n            newDatasets.push(result.data);\n            allWarnings.push(...result.warnings);\n\n            // Analyze file\n            if (showAnalysis) {\n              const analysis = CsvService.analyzeFile(file, result.data.data);\n              analyses.push(analysis);\n            }\n          } else {\n            allErrors.push(...result.errors);\n          }\n        } catch (error) {\n          allErrors.push(`Failed to process ${file.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n\n      // Add successful datasets to state\n      for (const dataset of newDatasets) {\n        addCsvOverlayDataset(dataset);\n      }\n\n      // Update component state\n      setUploadState(prev => ({\n        ...prev,\n        isProcessing: false,\n        uploadedFiles: [...prev.uploadedFiles, ...analyses],\n        errors: allErrors,\n        warnings: allWarnings\n      }));\n\n      // Notify parent component\n      if (onFilesUploaded && newDatasets.length > 0) {\n        onFilesUploaded(newDatasets);\n      }\n\n      if (onError && allErrors.length > 0) {\n        onError(allErrors.join('; '));\n      }\n\n    } catch (error) {\n      const errorMessage = `Processing failed: ${error instanceof Error ? error.message : 'Unknown error'}`;\n      setUploadState(prev => ({\n        ...prev,\n        isProcessing: false,\n        errors: [errorMessage]\n      }));\n\n      if (onError) {\n        onError(errorMessage);\n      }\n    }\n  }, [addCsvOverlayDataset, csvOverlayState.datasets.length, showAnalysis, onFilesUploaded, onError]);\n\n  // ========================================================================\n  // EVENT HANDLERS\n  // ========================================================================\n\n  const handleFileSelect = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files || files.length === 0) return;\n\n    const { valid, errors } = validateFiles(files);\n    \n    if (errors.length > 0) {\n      setUploadState(prev => ({ ...prev, errors }));\n      return;\n    }\n\n    await processFiles(valid);\n    \n    // Reset input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  }, [validateFiles, processFiles]);\n\n  const handleDragOver = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setUploadState(prev => ({ ...prev, isDragging: true }));\n  }, []);\n\n  const handleDragLeave = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setUploadState(prev => ({ ...prev, isDragging: false }));\n  }, []);\n\n  const handleDrop = useCallback(async (event: React.DragEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setUploadState(prev => ({ ...prev, isDragging: false }));\n\n    const files = event.dataTransfer.files;\n    if (!files || files.length === 0) return;\n\n    const { valid, errors } = validateFiles(files);\n    \n    if (errors.length > 0) {\n      setUploadState(prev => ({ ...prev, errors }));\n      return;\n    }\n\n    await processFiles(valid);\n  }, [validateFiles, processFiles]);\n\n  const handleClick = useCallback(() => {\n    if (uploadState.isProcessing) return;\n    fileInputRef.current?.click();\n  }, [uploadState.isProcessing]);\n\n  const clearErrors = useCallback(() => {\n    setUploadState(prev => ({ ...prev, errors: [], warnings: [] }));\n  }, []);\n\n  // ========================================================================\n  // RENDER HELPERS\n  // ========================================================================\n\n  const renderUploadArea = () => {\n    const hasFiles = csvOverlayState.datasets.length > 0;\n    const remainingSlots = maxFiles - csvOverlayState.datasets.length;\n\n    return (\n      <div\n        className={`csv-upload-area ${uploadState.isDragging ? 'dragging' : ''} ${uploadState.isProcessing ? 'processing' : ''}`}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        onClick={handleClick}\n        role=\"button\"\n        tabIndex={0}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter' || e.key === ' ') {\n            e.preventDefault();\n            handleClick();\n          }\n        }}\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept={SUPPORTED_CSV_TYPES.join(',')}\n          multiple\n          onChange={handleFileSelect}\n          style={{ display: 'none' }}\n        />\n\n        <div className=\"upload-content\">\n          {uploadState.isProcessing ? (\n            <>\n              <div className=\"upload-spinner\">⟳</div>\n              <p>Processing files...</p>\n              <small>Analyzing CSV data and detecting frequency bands</small>\n            </>\n          ) : (\n            <>\n              <div className=\"upload-icon\">📁</div>\n              <p>\n                {hasFiles \n                  ? `Add more CSV files (${remainingSlots} remaining)`\n                  : 'Click to select or drag & drop CSV files'\n                }\n              </p>\n              <small>\n                {hasFiles\n                  ? 'Multiple datasets will be displayed with different colors'\n                  : 'Supports CSV files with frequency and amplitude data'\n                }\n              </small>\n              <small>Hold Ctrl/Cmd to select multiple files</small>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderMessages = () => {\n    if (uploadState.errors.length === 0 && uploadState.warnings.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className=\"upload-messages\">\n        {uploadState.errors.length > 0 && (\n          <div className=\"error-messages\">\n            <h4>❌ Errors:</h4>\n            <ul>\n              {uploadState.errors.map((error, index) => (\n                <li key={index}>{error}</li>\n              ))}\n            </ul>\n            <button onClick={clearErrors} className=\"clear-errors-btn\">\n              Clear\n            </button>\n          </div>\n        )}\n        \n        {uploadState.warnings.length > 0 && (\n          <div className=\"warning-messages\">\n            <h4>⚠️ Warnings:</h4>\n            <ul>\n              {uploadState.warnings.map((warning, index) => (\n                <li key={index}>{warning}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const renderFileAnalysis = () => {\n    if (!showAnalysis || uploadState.uploadedFiles.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className=\"file-analysis\">\n        <h4>📊 File Analysis:</h4>\n        <div className=\"analysis-list\">\n          {uploadState.uploadedFiles.map((analysis, index) => (\n            <div key={index} className=\"analysis-item\">\n              <div className=\"analysis-header\">\n                <span className=\"filename\">{analysis.filename}</span>\n                <span className={`status ${analysis.isValid ? 'valid' : 'invalid'}`}>\n                  {analysis.isValid ? '✅' : '❌'}\n                </span>\n              </div>\n              <div className=\"analysis-details\">\n                <span>Band: {analysis.band || 'Unknown'}</span>\n                <span>Points: {analysis.dataPoints.toLocaleString()}</span>\n                <span>Range: {analysis.frequencyRange.min.toFixed(1)} - {analysis.frequencyRange.max.toFixed(1)} MHz</span>\n              </div>\n              {analysis.errors.length > 0 && (\n                <div className=\"analysis-errors\">\n                  {analysis.errors.map((error, errorIndex) => (\n                    <small key={errorIndex} className=\"error\">{error}</small>\n                  ))}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  // ========================================================================\n  // MAIN RENDER\n  // ========================================================================\n\n  return (\n    <div className=\"csv-upload-component\">\n      <div className=\"upload-header\">\n        <h3>📂 CSV File Upload</h3>\n        <p>Upload EMC spectrum data files for analysis and comparison</p>\n      </div>\n      \n      {renderUploadArea()}\n      {renderMessages()}\n      {renderFileAnalysis()}\n    </div>\n  );\n};\n\nexport default CsvUpload; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}