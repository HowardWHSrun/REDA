{"ast":null,"code":"var _jsxFileName = \"/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/src/components/CsvVisualization/CsvVisualization.tsx\",\n  _s = $RefreshSig$();\n// ========================================================================\n// REDA EMC Testing Tool - CSV Visualization Component (Enhanced)\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Professional Chart.js visualization with matplotlib-quality styling\n// ========================================================================\n\nimport React, { useRef, useState, useCallback, useMemo } from 'react';\nimport { Chart as ChartJS, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport { useCsvOverlayState } from '../../context/AppContext';\nimport { CsvService } from '../../services/CsvService';\nimport { BAND_DEFINITIONS } from '../../constants';\nimport './CsvVisualization.css';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LinearScale, PointElement, LineElement, Title, Tooltip, Legend, zoomPlugin);\n\n// ========================================================================\n// COMPONENT INTERFACES\n// ========================================================================\n\n// ========================================================================\n// PROFESSIONAL CHART STYLING (MATPLOTLIB-INSPIRED)\n// ========================================================================\n\nconst CHART_COLORS = {\n  primary: '#1f77b4',\n  // Matplotlib default blue\n  orange: '#ff7f0e',\n  // Matplotlib orange\n  green: '#2ca02c',\n  // Matplotlib green\n  red: '#d62728',\n  // Matplotlib red\n  purple: '#9467bd',\n  // Matplotlib purple\n  brown: '#8c564b',\n  // Matplotlib brown\n  pink: '#e377c2',\n  // Matplotlib pink\n  gray: '#7f7f7f',\n  // Matplotlib gray\n  olive: '#bcbd22',\n  // Matplotlib olive\n  cyan: '#17becf' // Matplotlib cyan\n};\nconst PROFESSIONAL_COLORS = [CHART_COLORS.primary, CHART_COLORS.orange, CHART_COLORS.green, CHART_COLORS.red, CHART_COLORS.purple, CHART_COLORS.brown, CHART_COLORS.pink, CHART_COLORS.gray];\n\n// ========================================================================\n// CSV VISUALIZATION COMPONENT\n// ========================================================================\n\nexport const CsvVisualization = ({\n  width = 1200,\n  height = 600,\n  // Exactly 1/2 of width for 2:1 ratio\n  showControls = true,\n  showLegend = true,\n  onPeakClick\n}) => {\n  _s();\n  const {\n    csvOverlayState\n  } = useCsvOverlayState();\n  const chartRef = useRef(null);\n  const [vizState, setVizState] = useState({\n    selectedBand: 'all',\n    showPeaks: false,\n    detectedPeaks: [],\n    isAnalyzing: false,\n    zoomLevel: 1,\n    isExporting: false,\n    isEditingTitle: false,\n    isEditingLegend: false,\n    customTitle: '',\n    customLegendLabels: {}\n  });\n\n  // ========================================================================\n  // DATA PROCESSING\n  // ========================================================================\n\n  // Reset chart zoom when datasets change to prevent cropping issues\n  React.useEffect(() => {\n    if (chartRef.current) {\n      // Small delay to ensure chart has rendered with new/cleared data\n      setTimeout(() => {\n        if (chartRef.current) {\n          chartRef.current.resetZoom();\n          console.log('🔄 Chart zoom reset for dataset change');\n        }\n      }, 100);\n    }\n  }, [csvOverlayState.datasets.length, csvOverlayState.datasets]);\n  const processedDatasets = useMemo(() => {\n    if (!csvOverlayState.datasets || csvOverlayState.datasets.length === 0) {\n      return [];\n    }\n    return csvOverlayState.datasets.filter(dataset => dataset.visible).map((dataset, index) => {\n      let processedData = dataset.data;\n\n      // Auto-detect band from frequency range for labeling purposes only\n      const frequencies = dataset.data.map(point => point.frequency / 1e6); // Convert to MHz\n      const minFreq = Math.min(...frequencies);\n      const maxFreq = Math.max(...frequencies);\n      const detectedBand = CsvService.detectBandFromFrequencyRange(minFreq, maxFreq);\n\n      // Only filter if user explicitly selects a band filter (not automatic)\n      if (vizState.selectedBand !== 'all') {\n        // Filter to user-selected band only when explicitly requested\n        const bandDefinition = BAND_DEFINITIONS[vizState.selectedBand];\n        const startHz = bandDefinition.startMHz * 1e6;\n        const endHz = bandDefinition.endMHz * 1e6;\n        processedData = dataset.data.filter(point => point.frequency >= startHz && point.frequency <= endHz);\n        console.log(`🎯 User-filtered ${dataset.filename} to band ${vizState.selectedBand} (${bandDefinition.range}): ${processedData.length} points`);\n      } else {\n        // Show ALL data when no explicit filter is applied\n        processedData = dataset.data;\n        console.log(`📊 Showing full dataset for ${dataset.filename}: ${processedData.length} points (detected band: ${detectedBand || 'Unknown'})`);\n      }\n\n      // Use the color assigned during file loading (preserves panel colors)\n      const color = dataset.color || PROFESSIONAL_COLORS[index % PROFESSIONAL_COLORS.length];\n      return {\n        ...dataset,\n        data: processedData,\n        color: color,\n        frequencyData: processedData.map(point => point.frequency / 1e6),\n        // Convert to MHz\n        amplitudeData: processedData.map(point => point.amplitude),\n        detectedBand: detectedBand\n      };\n    });\n  }, [csvOverlayState.datasets, vizState.selectedBand]);\n\n  // ========================================================================\n  // PROFESSIONAL CHART CONFIGURATION\n  // ========================================================================\n\n  // Calculate optimal x-axis ticks with dynamic units based on frequency range\n  const calculateOptimalTicks = useMemo(() => {\n    if (processedDatasets.length === 0) return {\n      min: 0,\n      max: 1,\n      step: 0.1,\n      ticks: [],\n      unit: 'MHz',\n      unitMultiplier: 1\n    };\n\n    // Use actual data range for x-axis instead of forcing band boundaries\n    const allFrequencies = processedDatasets.flatMap(dataset => dataset.frequencyData);\n    if (allFrequencies.length === 0) return {\n      min: 0,\n      max: 1,\n      step: 0.1,\n      ticks: [],\n      unit: 'MHz',\n      unitMultiplier: 1\n    };\n    let minFreq = Math.min(...allFrequencies);\n    let maxFreq = Math.max(...allFrequencies);\n\n    // Only use band boundaries if user has explicitly filtered to a single band\n    if (vizState.selectedBand !== 'all') {\n      const bandDef = BAND_DEFINITIONS[vizState.selectedBand];\n      minFreq = bandDef.startMHz;\n      maxFreq = bandDef.endMHz;\n      console.log(`🎯 Using band ${vizState.selectedBand} boundaries for x-axis: ${minFreq}-${maxFreq} MHz`);\n    } else {\n      console.log(`📊 Using full data range for x-axis: ${minFreq.toFixed(3)}-${maxFreq.toFixed(3)} MHz`);\n    }\n\n    // Determine the best unit based on frequency range\n    let unit, unitMultiplier, displayMin, displayMax;\n    if (maxFreq < 1) {\n      // Use kHz for frequencies below 1 MHz\n      unit = 'kHz';\n      unitMultiplier = 1000; // Convert MHz to kHz\n      displayMin = minFreq * unitMultiplier;\n      displayMax = maxFreq * unitMultiplier;\n    } else if (maxFreq < 1000) {\n      // Use MHz for frequencies below 1000 MHz\n      unit = 'MHz';\n      unitMultiplier = 1; // Already in MHz\n      displayMin = minFreq * unitMultiplier;\n      displayMax = maxFreq * unitMultiplier;\n    } else {\n      // Use GHz for frequencies 1000 MHz and above\n      unit = 'GHz';\n      unitMultiplier = 0.001; // Convert MHz to GHz\n      displayMin = minFreq * unitMultiplier;\n      displayMax = maxFreq * unitMultiplier;\n    }\n    const range = displayMax - displayMin;\n\n    // Calculate nice step size for exactly 10 divisions\n    const roughStep = range / 10;\n\n    // Round to nice numbers (prefer 0.001, 0.002, 0.005, 0.01, 0.02, 0.05, 0.1, etc.)\n    const magnitude = Math.pow(10, Math.floor(Math.log10(roughStep)));\n    const normalized = roughStep / magnitude;\n    let niceStep;\n    if (normalized <= 1) niceStep = magnitude;else if (normalized <= 2) niceStep = 2 * magnitude;else if (normalized <= 5) niceStep = 5 * magnitude;else niceStep = 10 * magnitude;\n\n    // Use appropriate boundaries based on whether we're showing band-filtered or full data\n    let niceMin, niceMax;\n    if (vizState.selectedBand !== 'all') {\n      // For band-filtered data, use exact band boundaries\n      niceMin = displayMin;\n      niceMax = displayMax;\n    } else {\n      // For full data, use nice rounded boundaries\n      niceMin = Math.floor(displayMin / niceStep) * niceStep;\n      niceMax = Math.ceil(displayMax / niceStep) * niceStep;\n    }\n\n    // Generate exactly 11 ticks (10 divisions) within the range\n    const ticks = [];\n    for (let i = 0; i <= 10; i++) {\n      ticks.push(niceMin + i * ((niceMax - niceMin) / 10));\n    }\n    console.log(`📏 Using ${unit} units for frequency range ${niceMin.toFixed(3)}-${niceMax.toFixed(3)} ${unit}`);\n    return {\n      min: niceMin,\n      max: niceMax,\n      step: (niceMax - niceMin) / 10,\n      ticks: ticks,\n      unit: unit,\n      unitMultiplier: unitMultiplier,\n      isBandConstrained: vizState.selectedBand !== 'all',\n      bandName: vizState.selectedBand !== 'all' ? vizState.selectedBand : null\n    };\n  }, [processedDatasets, vizState.selectedBand]);\n  const chartData = useMemo(() => {\n    console.log(`📊 Processing ${processedDatasets.length} datasets for visualization:`, processedDatasets.map(d => `${d.filename} (${d.panelId}) - ${d.data.length} points`));\n    const optimalTicks = calculateOptimalTicks;\n    const datasets = processedDatasets.map((dataset, index) => ({\n      label: vizState.customLegendLabels[dataset.id] || dataset.label,\n      data: dataset.frequencyData.map((freq, dataIndex) => ({\n        x: freq * optimalTicks.unitMultiplier,\n        // Convert to display units\n        y: dataset.amplitudeData[dataIndex]\n      })),\n      borderColor: dataset.color,\n      backgroundColor: `${dataset.color}15`,\n      // 15% opacity\n      borderWidth: 1.5,\n      // Thinner lines as requested\n      pointRadius: 0,\n      pointHoverRadius: 6,\n      pointHoverBorderWidth: 2,\n      pointHoverBorderColor: '#ffffff',\n      fill: false,\n      tension: 0.1,\n      spanGaps: false\n    }));\n\n    // NYCT limit lines removed per user request\n\n    return {\n      datasets\n    };\n  }, [processedDatasets, calculateOptimalTicks, vizState.customLegendLabels]);\n  const chartOptions = useMemo(() => {\n    const optimalTicks = calculateOptimalTicks;\n\n    // Calculate optimal Y-axis ticks with 10-unit increments\n    const calculateOptimalYTicks = () => {\n      if (processedDatasets.length === 0) return {\n        min: 0,\n        max: 100,\n        step: 10\n      };\n      const allAmplitudes = processedDatasets.flatMap(dataset => dataset.amplitudeData);\n      if (allAmplitudes.length === 0) return {\n        min: 0,\n        max: 100,\n        step: 10\n      };\n      const minAmp = Math.min(...allAmplitudes);\n      const maxAmp = Math.max(...allAmplitudes);\n\n      // Round to nearest 10s with some padding\n      const yMin = Math.floor((minAmp - 5) / 10) * 10;\n      const yMax = Math.ceil((maxAmp + 5) / 10) * 10;\n\n      // Ensure we have at least a 30dB range for better visibility\n      const range = yMax - yMin;\n      const minRange = 30;\n      if (range < minRange) {\n        const midPoint = (yMin + yMax) / 2;\n        const expandedMin = Math.floor((midPoint - minRange / 2) / 10) * 10;\n        const expandedMax = Math.ceil((midPoint + minRange / 2) / 10) * 10;\n        return {\n          min: expandedMin,\n          max: expandedMax,\n          step: 10\n        };\n      }\n      return {\n        min: yMin,\n        max: yMax,\n        step: 10\n      };\n    };\n    const yAxisTicks = calculateOptimalYTicks();\n    return {\n      responsive: true,\n      maintainAspectRatio: false,\n      devicePixelRatio: 2,\n      // High DPI rendering\n      plugins: {\n        title: {\n          display: true,\n          text: vizState.customTitle || (() => {\n            const leftPanelDatasets = processedDatasets.filter(d => d.panelId === 'dataset-a');\n            const rightPanelDatasets = processedDatasets.filter(d => d.panelId === 'dataset-b');\n            if (leftPanelDatasets.length > 0 && rightPanelDatasets.length > 0) {\n              const leftTitle = leftPanelDatasets[0].filename.replace('.csv', '');\n              const rightTitle = rightPanelDatasets[0].filename.replace('.csv', '');\n              return `${leftTitle} vs. ${rightTitle}`;\n            } else if (leftPanelDatasets.length > 0) {\n              return leftPanelDatasets[0].filename.replace('.csv', '');\n            } else if (rightPanelDatasets.length > 0) {\n              return rightPanelDatasets[0].filename.replace('.csv', '');\n            }\n            return 'EMC Spectrum Analysis';\n          })(),\n          font: {\n            size: 18,\n            weight: 'bold',\n            family: 'Arial, sans-serif'\n          },\n          padding: 20,\n          color: '#2c3e50'\n        },\n        legend: {\n          display: showLegend,\n          position: 'bottom',\n          labels: {\n            usePointStyle: true,\n            pointStyle: 'line',\n            font: {\n              size: 12,\n              family: 'Arial, sans-serif'\n            },\n            padding: 15\n          }\n        },\n        tooltip: {\n          mode: 'nearest',\n          intersect: false,\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\n          titleColor: '#ffffff',\n          bodyColor: '#ffffff',\n          borderColor: '#ffffff',\n          borderWidth: 1,\n          cornerRadius: 6,\n          displayColors: true,\n          callbacks: {\n            title: context => {\n              const freq = context[0].parsed.x;\n              let formattedFreq;\n              if (optimalTicks.unit === 'kHz') {\n                formattedFreq = freq >= 100 ? freq.toFixed(0) : freq.toFixed(1);\n              } else if (optimalTicks.unit === 'MHz') {\n                formattedFreq = freq >= 100 ? freq.toFixed(0) : freq.toFixed(1);\n              } else {\n                // GHz\n                formattedFreq = freq.toFixed(2);\n              }\n              return `Frequency: ${formattedFreq} ${optimalTicks.unit}`;\n            },\n            label: context => {\n              return `${context.dataset.label}: ${context.parsed.y.toFixed(2)} dBμV/m`;\n            }\n          }\n        },\n        zoom: {\n          zoom: {\n            wheel: {\n              enabled: true,\n              modifierKey: 'ctrl'\n            },\n            pinch: {\n              enabled: true\n            },\n            mode: 'xy',\n            onZoom: ({\n              chart\n            }) => {\n              const zoomLevel = chart.getZoomLevel();\n              setVizState(prev => ({\n                ...prev,\n                zoomLevel\n              }));\n            }\n          },\n          pan: {\n            enabled: true,\n            mode: 'xy'\n          }\n        }\n      },\n      scales: {\n        x: {\n          type: 'linear',\n          title: {\n            display: true,\n            text: `Frequency (${optimalTicks.unit})`,\n            font: {\n              size: 14,\n              weight: 'bold',\n              family: 'Arial, sans-serif'\n            },\n            color: '#2c3e50'\n          },\n          grid: {\n            color: 'rgba(0, 0, 0, 0.1)',\n            lineWidth: 1\n          },\n          min: optimalTicks.min,\n          max: optimalTicks.max,\n          ticks: {\n            font: {\n              size: 11,\n              family: 'Arial, sans-serif'\n            },\n            color: '#2c3e50',\n            count: 11,\n            // Force exactly 11 ticks = 10 divisions\n            min: optimalTicks.min,\n            max: optimalTicks.max,\n            stepSize: optimalTicks.step,\n            callback: function (value) {\n              const numValue = Number(value);\n              // Format numbers based on the unit being used\n              if (optimalTicks.unit === 'kHz') {\n                if (numValue >= 1000) {\n                  return (numValue / 1000).toFixed(1) + 'k';\n                } else if (numValue >= 100) {\n                  return numValue.toFixed(0);\n                } else if (numValue >= 10) {\n                  return numValue.toFixed(1);\n                } else {\n                  return numValue.toFixed(2);\n                }\n              } else if (optimalTicks.unit === 'MHz') {\n                if (numValue >= 1000) {\n                  return (numValue / 1000).toFixed(1) + 'k';\n                } else if (numValue >= 100) {\n                  return numValue.toFixed(0);\n                } else if (numValue >= 1) {\n                  return numValue.toFixed(1);\n                } else {\n                  return numValue.toFixed(2);\n                }\n              } else {\n                // GHz\n                if (numValue >= 1) {\n                  return numValue.toFixed(1);\n                } else {\n                  return numValue.toFixed(2);\n                }\n              }\n            }\n          }\n        },\n        y: {\n          position: 'left',\n          title: {\n            display: true,\n            text: 'Amplitude (dBμV/m)',\n            font: {\n              size: 14,\n              weight: 'bold',\n              family: 'Arial, sans-serif'\n            },\n            color: '#2c3e50'\n          },\n          grid: {\n            color: 'rgba(0, 0, 0, 0.1)',\n            lineWidth: 1\n          },\n          min: yAxisTicks.min,\n          max: yAxisTicks.max,\n          ticks: {\n            font: {\n              size: 11,\n              family: 'Arial, sans-serif'\n            },\n            color: '#2c3e50',\n            stepSize: yAxisTicks.step,\n            // Always 10 dB increments\n            callback: function (value) {\n              return Number(value).toFixed(0) + ' dB';\n            }\n          }\n        }\n      },\n      interaction: {\n        intersect: false,\n        mode: 'nearest'\n      },\n      onClick: (event, elements) => {\n        if (elements.length > 0 && onPeakClick) {\n          const element = elements[0];\n          const datasetIndex = element.datasetIndex;\n          const dataIndex = element.index;\n          if (datasetIndex < processedDatasets.length) {\n            const dataset = processedDatasets[datasetIndex];\n            const frequency = dataset.frequencyData[dataIndex];\n            const amplitude = dataset.amplitudeData[dataIndex];\n\n            // Find if this point is a detected peak\n            const peakData = vizState.detectedPeaks.find(p => p.dataset.id === dataset.id);\n            const peak = peakData === null || peakData === void 0 ? void 0 : peakData.peaks.find(p => Math.abs(p.frequency - frequency) < 0.001 && Math.abs(p.amplitude - amplitude) < 0.1);\n            if (peak) {\n              onPeakClick(peak, dataset);\n            }\n          }\n        }\n      }\n    };\n  }, [showLegend, processedDatasets, vizState.detectedPeaks, onPeakClick, calculateOptimalTicks, vizState.customTitle]);\n\n  // ========================================================================\n  // EXPORT FUNCTIONALITY\n  // ========================================================================\n\n  const exportChart = useCallback(async (exportType = 'zoom', format = 'png') => {\n    if (!chartRef.current) return;\n    setVizState(prev => ({\n      ...prev,\n      isExporting: true\n    }));\n    try {\n      // Handle original view export by temporarily resetting zoom\n      if (exportType === 'original') {\n        chartRef.current.resetZoom();\n        await new Promise(resolve => setTimeout(resolve, 100)); // Wait for reset\n      }\n\n      // Calculate optimal Y-axis ticks with 10-unit increments for export\n      const calculateOptimalYTicksForExport = () => {\n        if (processedDatasets.length === 0) return {\n          min: 0,\n          max: 100,\n          step: 10\n        };\n        const allAmplitudes = processedDatasets.flatMap(dataset => dataset.amplitudeData);\n        if (allAmplitudes.length === 0) return {\n          min: 0,\n          max: 100,\n          step: 10\n        };\n        const minAmp = Math.min(...allAmplitudes);\n        const maxAmp = Math.max(...allAmplitudes);\n\n        // Round to nearest 10s with some padding for better visualization\n        const yMin = Math.floor((minAmp - 5) / 10) * 10;\n        const yMax = Math.ceil((maxAmp + 5) / 10) * 10;\n\n        // Ensure we have at least a 30dB range for better visibility\n        const range = yMax - yMin;\n        const minRange = 30;\n        if (range < minRange) {\n          const midPoint = (yMin + yMax) / 2;\n          const expandedMin = Math.floor((midPoint - minRange / 2) / 10) * 10;\n          const expandedMax = Math.ceil((midPoint + minRange / 2) / 10) * 10;\n          return {\n            min: expandedMin,\n            max: expandedMax,\n            step: 10\n          };\n        }\n        return {\n          min: yMin,\n          max: yMax,\n          step: 10\n        };\n      };\n      const exportYAxisTicks = calculateOptimalYTicksForExport();\n\n      // Create export-specific chart with thinner lines\n      const exportCanvas = document.createElement('canvas');\n      const exportCtx = exportCanvas.getContext('2d');\n      if (!exportCtx) throw new Error('Could not create export canvas');\n\n      // Set high resolution (300 DPI equivalent)\n      const scale = 4; // Increased scale for better quality\n      const originalCanvas = chartRef.current.canvas;\n      exportCanvas.width = originalCanvas.width * scale;\n      exportCanvas.height = originalCanvas.height * scale;\n\n      // Set white background\n      exportCtx.fillStyle = '#ffffff';\n      exportCtx.fillRect(0, 0, exportCanvas.width, exportCanvas.height);\n\n      // Create export chart with thinner lines\n      const exportChartCanvas = document.createElement('canvas');\n      const exportChartCtx = exportChartCanvas.getContext('2d');\n      exportChartCanvas.width = originalCanvas.width;\n      exportChartCanvas.height = originalCanvas.height;\n      if (!exportChartCtx) throw new Error('Could not create export chart canvas');\n\n      // Create a new chart instance for export with thinner lines\n      const optimalTicks = calculateOptimalTicks;\n      const exportChartData = {\n        datasets: processedDatasets.map((dataset, index) => ({\n          label: vizState.customLegendLabels[dataset.id] || dataset.label,\n          data: dataset.frequencyData.map((freq, dataIndex) => ({\n            x: freq * optimalTicks.unitMultiplier,\n            // Convert to display units\n            y: dataset.amplitudeData[dataIndex]\n          })),\n          borderColor: dataset.color,\n          backgroundColor: `${dataset.color}15`,\n          // 15% opacity\n          borderWidth: 1,\n          // Thinner lines to match display\n          pointRadius: 0,\n          pointHoverRadius: 0,\n          pointHoverBorderWidth: 0,\n          fill: false,\n          tension: 0.1,\n          spanGaps: false\n        }))\n      };\n\n      // Create temporary chart for export\n      const tempChart = new ChartJS(exportChartCanvas, {\n        type: 'line',\n        data: exportChartData,\n        options: {\n          responsive: false,\n          maintainAspectRatio: false,\n          devicePixelRatio: 1,\n          animation: false,\n          plugins: {\n            title: {\n              display: true,\n              text: (() => {\n                // Use custom title if it exists, otherwise generate automatically\n                if (vizState.customTitle && vizState.customTitle.trim()) {\n                  return vizState.customTitle;\n                }\n                const leftPanelDatasets = processedDatasets.filter(d => d.panelId === 'dataset-a');\n                const rightPanelDatasets = processedDatasets.filter(d => d.panelId === 'dataset-b');\n                if (leftPanelDatasets.length > 0 && rightPanelDatasets.length > 0) {\n                  const leftTitle = leftPanelDatasets[0].filename.replace('.csv', '');\n                  const rightTitle = rightPanelDatasets[0].filename.replace('.csv', '');\n                  return `${leftTitle} vs. ${rightTitle}`;\n                } else if (leftPanelDatasets.length > 0) {\n                  return leftPanelDatasets[0].filename.replace('.csv', '');\n                } else if (rightPanelDatasets.length > 0) {\n                  return rightPanelDatasets[0].filename.replace('.csv', '');\n                }\n                return 'EMC Spectrum Analysis';\n              })(),\n              font: {\n                size: 36,\n                weight: 'bold',\n                family: 'Arial, sans-serif'\n              },\n              padding: 40,\n              color: '#2c3e50'\n            },\n            legend: {\n              display: showLegend,\n              position: 'bottom',\n              labels: {\n                usePointStyle: true,\n                pointStyle: 'line',\n                font: {\n                  size: 24,\n                  family: 'Arial, sans-serif'\n                },\n                padding: 30\n              }\n            },\n            tooltip: {\n              enabled: false\n            }\n          },\n          scales: {\n            x: {\n              type: 'linear',\n              title: {\n                display: true,\n                text: `Frequency (${optimalTicks.unit})`,\n                font: {\n                  size: 28,\n                  weight: 'bold',\n                  family: 'Arial, sans-serif'\n                },\n                color: '#2c3e50'\n              },\n              grid: {\n                color: 'rgba(0, 0, 0, 0.1)',\n                lineWidth: 1\n              },\n              min: optimalTicks.min,\n              max: optimalTicks.max,\n              ticks: {\n                font: {\n                  size: 22,\n                  family: 'Arial, sans-serif'\n                },\n                color: '#2c3e50',\n                count: 11,\n                callback: function (value) {\n                  const numValue = Number(value);\n                  if (optimalTicks.unit === 'kHz') {\n                    if (numValue >= 1000) return (numValue / 1000).toFixed(1) + 'k';else if (numValue >= 100) return numValue.toFixed(0);else if (numValue >= 10) return numValue.toFixed(1);else return numValue.toFixed(2);\n                  } else if (optimalTicks.unit === 'MHz') {\n                    if (numValue >= 1000) return (numValue / 1000).toFixed(1) + 'k';else if (numValue >= 100) return numValue.toFixed(0);else if (numValue >= 1) return numValue.toFixed(1);else return numValue.toFixed(2);\n                  } else {\n                    if (numValue >= 1) return numValue.toFixed(1);else return numValue.toFixed(2);\n                  }\n                }\n              }\n            },\n            y: {\n              position: 'left',\n              title: {\n                display: true,\n                text: 'Amplitude (dBμV/m)',\n                font: {\n                  size: 28,\n                  weight: 'bold',\n                  family: 'Arial, sans-serif'\n                },\n                color: '#2c3e50'\n              },\n              grid: {\n                color: 'rgba(0, 0, 0, 0.1)',\n                lineWidth: 1\n              },\n              min: exportYAxisTicks.min,\n              max: exportYAxisTicks.max,\n              ticks: {\n                font: {\n                  size: 22,\n                  family: 'Arial, sans-serif'\n                },\n                color: '#2c3e50',\n                stepSize: exportYAxisTicks.step,\n                // Always 10 dB increments\n                callback: function (value) {\n                  return Number(value).toFixed(0) + ' dB';\n                }\n              }\n            }\n          },\n          interaction: {\n            intersect: false,\n            mode: 'nearest'\n          }\n        }\n      });\n\n      // Copy current zoom state if needed\n      if (exportType === 'zoom' && chartRef.current) {\n        var _currentOptions$scale, _currentOptions$scale2;\n        const currentOptions = chartRef.current.options;\n        if (currentOptions !== null && currentOptions !== void 0 && (_currentOptions$scale = currentOptions.scales) !== null && _currentOptions$scale !== void 0 && _currentOptions$scale.x && currentOptions !== null && currentOptions !== void 0 && (_currentOptions$scale2 = currentOptions.scales) !== null && _currentOptions$scale2 !== void 0 && _currentOptions$scale2.y) {\n          tempChart.options.scales.x.min = currentOptions.scales.x.min;\n          tempChart.options.scales.x.max = currentOptions.scales.x.max;\n          // For zoom exports, also use the current y-axis range instead of the calculated optimal range\n          tempChart.options.scales.y.min = currentOptions.scales.y.min;\n          tempChart.options.scales.y.max = currentOptions.scales.y.max;\n          // Recalculate stepSize for zoom export to ensure 10 increments\n          const zoomYRange = currentOptions.scales.y.max - currentOptions.scales.y.min;\n          tempChart.options.scales.y.ticks.stepSize = zoomYRange / 10;\n        }\n      }\n\n      // Render the export chart\n      tempChart.update('none');\n      await new Promise(resolve => setTimeout(resolve, 100)); // Wait for render\n\n      // Enable high-quality rendering\n      exportCtx.imageSmoothingEnabled = true;\n      exportCtx.imageSmoothingQuality = 'high';\n\n      // Scale and draw the clean chart (no annotations)\n      exportCtx.scale(scale, scale);\n      exportCtx.drawImage(exportChartCanvas, 0, 0);\n\n      // Generate professional filename based on datasets\n      const leftPanelDatasets = processedDatasets.filter(d => d.panelId === 'dataset-a');\n      const rightPanelDatasets = processedDatasets.filter(d => d.panelId === 'dataset-b');\n      let filename = '';\n      if (leftPanelDatasets.length > 0 && rightPanelDatasets.length > 0) {\n        const leftNames = leftPanelDatasets.map(d => d.filename.replace('.csv', '')).join('+');\n        const rightNames = rightPanelDatasets.map(d => d.filename.replace('.csv', '')).join('+');\n        filename = `${leftNames} vs ${rightNames}`;\n      } else if (leftPanelDatasets.length > 0) {\n        filename = leftPanelDatasets.map(d => d.filename.replace('.csv', '')).join('+');\n      } else if (rightPanelDatasets.length > 0) {\n        filename = rightPanelDatasets.map(d => d.filename.replace('.csv', '')).join('+');\n      } else {\n        filename = 'EMC_Spectrum_Analysis';\n      }\n\n      // Add timestamp\n      const timestamp = new Date().toISOString().split('T')[0];\n      const exportSuffix = exportType === 'original' ? '_Original' : '_Zoomed';\n      filename = `${filename}${exportSuffix}_${timestamp}`;\n\n      // Clean up temporary chart\n      tempChart.destroy();\n\n      // Convert to blob and download\n      exportCanvas.toBlob(blob => {\n        if (blob) {\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `${filename}.${format}`;\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n          URL.revokeObjectURL(url);\n          console.log(`📸 Chart exported as: ${filename}.${format} (${exportType} view)`);\n        }\n      }, `image/${format}`, 0.95);\n    } catch (error) {\n      console.error('Export failed:', error);\n      alert('Export failed. Please try again.');\n    } finally {\n      setVizState(prev => ({\n        ...prev,\n        isExporting: false\n      }));\n    }\n  }, [processedDatasets, calculateOptimalTicks, showLegend, vizState.customTitle, vizState.customLegendLabels]);\n\n  // ========================================================================\n  // CHART CONTROLS\n  // ========================================================================\n\n  // ========================================================================\n  // EDIT FUNCTIONALITY\n  // ========================================================================\n\n  const handleTitleEdit = newTitle => {\n    setVizState(prev => ({\n      ...prev,\n      customTitle: newTitle,\n      isEditingTitle: false\n    }));\n  };\n  const handleLegendEdit = (datasetId, newLabel) => {\n    setVizState(prev => ({\n      ...prev,\n      customLegendLabels: {\n        ...prev.customLegendLabels,\n        [datasetId]: newLabel\n      }\n    }));\n  };\n\n  // ========================================================================\n  // RENDER HELPERS\n  // ========================================================================\n\n  const renderEditControls = () => {\n    if (csvOverlayState.datasets.length === 0) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"edit-controls professional\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '12px',\n          alignItems: 'center',\n          justifyContent: 'center',\n          flexWrap: 'wrap'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setVizState(prev => ({\n            ...prev,\n            isEditingTitle: !prev.isEditingTitle\n          })),\n          className: \"edit-btn\",\n          style: {\n            backgroundColor: vizState.isEditingTitle ? '#e74c3c' : '#3498db',\n            border: 'none',\n            color: 'white',\n            padding: '6px 12px',\n            borderRadius: '4px',\n            fontWeight: '500',\n            fontSize: '12px',\n            cursor: 'pointer',\n            transition: 'all 0.2s ease'\n          },\n          children: vizState.isEditingTitle ? 'Cancel' : 'Edit Title'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 901,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setVizState(prev => ({\n            ...prev,\n            isEditingLegend: !prev.isEditingLegend\n          })),\n          className: \"edit-btn\",\n          style: {\n            backgroundColor: vizState.isEditingLegend ? '#e74c3c' : '#2ecc71',\n            border: 'none',\n            color: 'white',\n            padding: '6px 12px',\n            borderRadius: '4px',\n            fontWeight: '500',\n            fontSize: '12px',\n            cursor: 'pointer',\n            transition: 'all 0.2s ease'\n          },\n          children: vizState.isEditingLegend ? 'Done' : 'Edit Labels'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 920,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setVizState(prev => ({\n            ...prev,\n            customTitle: '',\n            customLegendLabels: {},\n            isEditingTitle: false,\n            isEditingLegend: false\n          })),\n          className: \"reset-btn\",\n          style: {\n            backgroundColor: '#95a5a6',\n            border: 'none',\n            color: 'white',\n            padding: '6px 12px',\n            borderRadius: '4px',\n            fontWeight: '500',\n            fontSize: '12px',\n            cursor: 'pointer',\n            transition: 'all 0.2s ease'\n          },\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 939,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => exportChart('original', 'png'),\n          className: \"export-btn primary simple\",\n          disabled: vizState.isExporting || processedDatasets.length === 0,\n          style: {\n            backgroundColor: vizState.isExporting ? '#95a5a6' : '#e67e22',\n            border: 'none',\n            color: 'white',\n            padding: '6px 12px',\n            borderRadius: '4px',\n            fontWeight: '500',\n            fontSize: '12px',\n            cursor: vizState.isExporting ? 'not-allowed' : 'pointer',\n            transition: 'all 0.2s ease'\n          },\n          children: vizState.isExporting ? 'Exporting...' : 'Export Default View'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 964,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 899,\n        columnNumber: 9\n      }, this), vizState.isEditingTitle && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '12px',\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter custom chart title...\",\n          defaultValue: vizState.customTitle,\n          onKeyPress: e => {\n            if (e.key === 'Enter') {\n              handleTitleEdit(e.target.value);\n            }\n          },\n          onBlur: e => handleTitleEdit(e.target.value),\n          autoFocus: true,\n          style: {\n            padding: '8px 12px',\n            border: '2px solid #3498db',\n            borderRadius: '4px',\n            fontSize: '14px',\n            fontWeight: 'bold',\n            textAlign: 'center',\n            minWidth: '300px',\n            maxWidth: '600px',\n            width: '100%',\n            fontFamily: 'Arial, sans-serif'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 987,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '4px',\n            fontSize: '10px',\n            color: '#7f8c8d'\n          },\n          children: \"Press Enter or click away to save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1011,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 986,\n        columnNumber: 11\n      }, this), vizState.isEditingLegend && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '12px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'grid',\n            gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\n            gap: '8px',\n            maxWidth: '600px',\n            margin: '0 auto'\n          },\n          children: processedDatasets.map(dataset => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: '6px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: '16px',\n                height: '16px',\n                backgroundColor: dataset.color,\n                borderRadius: '50%',\n                flexShrink: 0,\n                border: '2px solid white',\n                boxShadow: '0 1px 3px rgba(0,0,0,0.3)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1029,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: dataset.label,\n              defaultValue: vizState.customLegendLabels[dataset.id] || '',\n              onKeyPress: e => {\n                if (e.key === 'Enter') {\n                  handleLegendEdit(dataset.id, e.target.value);\n                }\n              },\n              onBlur: e => handleLegendEdit(dataset.id, e.target.value),\n              style: {\n                padding: '6px 8px',\n                border: '1px solid #2ecc71',\n                borderRadius: '4px',\n                fontSize: '12px',\n                flex: 1,\n                fontFamily: 'Arial, sans-serif'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1040,\n              columnNumber: 19\n            }, this)]\n          }, dataset.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1028,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1020,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '6px',\n            fontSize: '10px',\n            color: '#7f8c8d',\n            textAlign: 'center'\n          },\n          children: \"Press Enter or click away to save changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1062,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1019,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 898,\n      columnNumber: 7\n    }, this);\n  };\n  const renderControls = () => {\n    if (!showControls || csvOverlayState.datasets.length === 0) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-controls professional compact\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"band-filter-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"band-filter-select\",\n          className: \"filter-label\",\n          children: \"Band Filter:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1077,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"band-filter-select\",\n          value: vizState.selectedBand,\n          onChange: e => setVizState(prev => ({\n            ...prev,\n            selectedBand: e.target.value\n          })),\n          className: \"band-filter-select\",\n          style: {\n            padding: '6px 12px',\n            marginLeft: '8px',\n            borderRadius: '4px',\n            border: '1px solid #ddd',\n            fontSize: '14px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"all\",\n            children: \"Show All Data (No Filtering)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1093,\n            columnNumber: 13\n          }, this), Object.entries(BAND_DEFINITIONS).map(([bandType, definition]) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: bandType,\n            children: [\"Filter to \", bandType, \": \", definition.range]\n          }, bandType, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1095,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1080,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1076,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1075,\n      columnNumber: 7\n    }, this);\n  };\n\n  // ========================================================================\n  // MAIN RENDER\n  // ========================================================================\n\n  if (csvOverlayState.datasets.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"csv-visualization-empty professional\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-state\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-icon\",\n          children: \"Open Folder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1111,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"csv-visualization professional\",\n    children: [renderControls(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container professional\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        ref: chartRef,\n        data: chartData,\n        options: chartOptions,\n        width: width,\n        height: height\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1123,\n      columnNumber: 7\n    }, this), renderEditControls()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1120,\n    columnNumber: 5\n  }, this);\n};\n_s(CsvVisualization, \"dEwBZ3pNGk1l5SbpGhBiY5/LA8k=\", false, function () {\n  return [useCsvOverlayState];\n});\n_c = CsvVisualization;\nexport default CsvVisualization;\nvar _c;\n$RefreshReg$(_c, \"CsvVisualization\");","map":{"version":3,"names":["React","useRef","useState","useCallback","useMemo","Chart","ChartJS","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","zoomPlugin","useCsvOverlayState","CsvService","BAND_DEFINITIONS","jsxDEV","_jsxDEV","register","CHART_COLORS","primary","orange","green","red","purple","brown","pink","gray","olive","cyan","PROFESSIONAL_COLORS","CsvVisualization","width","height","showControls","showLegend","onPeakClick","_s","csvOverlayState","chartRef","vizState","setVizState","selectedBand","showPeaks","detectedPeaks","isAnalyzing","zoomLevel","isExporting","isEditingTitle","isEditingLegend","customTitle","customLegendLabels","useEffect","current","setTimeout","resetZoom","console","log","datasets","length","processedDatasets","filter","dataset","visible","map","index","processedData","data","frequencies","point","frequency","minFreq","Math","min","maxFreq","max","detectedBand","detectBandFromFrequencyRange","bandDefinition","startHz","startMHz","endHz","endMHz","filename","range","color","frequencyData","amplitudeData","amplitude","calculateOptimalTicks","step","ticks","unit","unitMultiplier","allFrequencies","flatMap","bandDef","toFixed","displayMin","displayMax","roughStep","magnitude","pow","floor","log10","normalized","niceStep","niceMin","niceMax","ceil","i","push","isBandConstrained","bandName","chartData","d","panelId","optimalTicks","label","id","freq","dataIndex","x","y","borderColor","backgroundColor","borderWidth","pointRadius","pointHoverRadius","pointHoverBorderWidth","pointHoverBorderColor","fill","tension","spanGaps","chartOptions","calculateOptimalYTicks","allAmplitudes","minAmp","maxAmp","yMin","yMax","minRange","midPoint","expandedMin","expandedMax","yAxisTicks","responsive","maintainAspectRatio","devicePixelRatio","plugins","title","display","text","leftPanelDatasets","rightPanelDatasets","leftTitle","replace","rightTitle","font","size","weight","family","padding","legend","position","labels","usePointStyle","pointStyle","tooltip","mode","intersect","titleColor","bodyColor","cornerRadius","displayColors","callbacks","context","parsed","formattedFreq","zoom","wheel","enabled","modifierKey","pinch","onZoom","chart","getZoomLevel","prev","pan","scales","type","grid","lineWidth","count","stepSize","callback","value","numValue","Number","interaction","onClick","event","elements","element","datasetIndex","peakData","find","p","peak","peaks","abs","exportChart","exportType","format","Promise","resolve","calculateOptimalYTicksForExport","exportYAxisTicks","exportCanvas","document","createElement","exportCtx","getContext","Error","scale","originalCanvas","canvas","fillStyle","fillRect","exportChartCanvas","exportChartCtx","exportChartData","tempChart","options","animation","trim","_currentOptions$scale","_currentOptions$scale2","currentOptions","zoomYRange","update","imageSmoothingEnabled","imageSmoothingQuality","drawImage","leftNames","join","rightNames","timestamp","Date","toISOString","split","exportSuffix","destroy","toBlob","blob","url","URL","createObjectURL","a","href","download","body","appendChild","click","removeChild","revokeObjectURL","error","alert","handleTitleEdit","newTitle","handleLegendEdit","datasetId","newLabel","renderEditControls","className","children","style","gap","alignItems","justifyContent","flexWrap","border","borderRadius","fontWeight","fontSize","cursor","transition","fileName","_jsxFileName","lineNumber","columnNumber","disabled","marginTop","textAlign","placeholder","defaultValue","onKeyPress","e","key","target","onBlur","autoFocus","minWidth","maxWidth","fontFamily","gridTemplateColumns","margin","flexShrink","boxShadow","flex","renderControls","htmlFor","onChange","marginLeft","Object","entries","bandType","definition","ref","_c","$RefreshReg$"],"sources":["/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/src/components/CsvVisualization/CsvVisualization.tsx"],"sourcesContent":["// ========================================================================\n// REDA EMC Testing Tool - CSV Visualization Component (Enhanced)\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Professional Chart.js visualization with matplotlib-quality styling\n// ========================================================================\n\nimport React, { useRef, useState, useCallback, useMemo } from 'react';\nimport {\n  Chart as ChartJS,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ChartOptions,\n  ChartData\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport { useCsvOverlayState } from '../../context/AppContext';\nimport { CsvService } from '../../services/CsvService';\nimport { CsvOverlayDataset, DetectedPeak, BandType } from '../../types';\nimport { BAND_DEFINITIONS } from '../../constants';\nimport './CsvVisualization.css';\n\n// Register Chart.js components\nChartJS.register(\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  zoomPlugin\n);\n\n// ========================================================================\n// COMPONENT INTERFACES\n// ========================================================================\n\ninterface CsvVisualizationProps {\n  width?: number;\n  height?: number;\n  showControls?: boolean;\n  showLegend?: boolean;\n  onPeakClick?: (peak: DetectedPeak, dataset: CsvOverlayDataset) => void;\n}\n\ninterface VisualizationState {\n  selectedBand: BandType | 'all';\n  showPeaks: boolean;\n  detectedPeaks: Array<{ dataset: CsvOverlayDataset; peaks: DetectedPeak[] }>;\n  isAnalyzing: boolean;\n  zoomLevel: number;\n  isExporting: boolean;\n  isEditingTitle: boolean;\n  isEditingLegend: boolean;\n  customTitle: string;\n  customLegendLabels: { [key: string]: string };\n}\n\n// ========================================================================\n// PROFESSIONAL CHART STYLING (MATPLOTLIB-INSPIRED)\n// ========================================================================\n\nconst CHART_COLORS = {\n  primary: '#1f77b4',    // Matplotlib default blue\n  orange: '#ff7f0e',     // Matplotlib orange\n  green: '#2ca02c',      // Matplotlib green\n  red: '#d62728',        // Matplotlib red\n  purple: '#9467bd',     // Matplotlib purple\n  brown: '#8c564b',      // Matplotlib brown\n  pink: '#e377c2',       // Matplotlib pink\n  gray: '#7f7f7f',       // Matplotlib gray\n  olive: '#bcbd22',      // Matplotlib olive\n  cyan: '#17becf'        // Matplotlib cyan\n};\n\nconst PROFESSIONAL_COLORS = [\n  CHART_COLORS.primary,\n  CHART_COLORS.orange,\n  CHART_COLORS.green,\n  CHART_COLORS.red,\n  CHART_COLORS.purple,\n  CHART_COLORS.brown,\n  CHART_COLORS.pink,\n  CHART_COLORS.gray\n];\n\n// ========================================================================\n// CSV VISUALIZATION COMPONENT\n// ========================================================================\n\nexport const CsvVisualization: React.FC<CsvVisualizationProps> = ({\n  width = 1200,\n  height = 600, // Exactly 1/2 of width for 2:1 ratio\n  showControls = true,\n  showLegend = true,\n  onPeakClick\n}) => {\n  const { csvOverlayState } = useCsvOverlayState();\n  const chartRef = useRef<ChartJS<'line'>>(null);\n\n  const [vizState, setVizState] = useState<VisualizationState>({\n    selectedBand: 'all',\n    showPeaks: false,\n    detectedPeaks: [],\n    isAnalyzing: false,\n    zoomLevel: 1,\n    isExporting: false,\n    isEditingTitle: false,\n    isEditingLegend: false,\n    customTitle: '',\n    customLegendLabels: {}\n  });\n\n  // ========================================================================\n  // DATA PROCESSING\n  // ========================================================================\n\n  // Reset chart zoom when datasets change to prevent cropping issues\n  React.useEffect(() => {\n    if (chartRef.current) {\n              // Small delay to ensure chart has rendered with new/cleared data\n      setTimeout(() => {\n        if (chartRef.current) {\n          chartRef.current.resetZoom();\n          console.log('🔄 Chart zoom reset for dataset change');\n        }\n      }, 100);\n    }\n  }, [csvOverlayState.datasets.length, csvOverlayState.datasets]);\n\n  const processedDatasets = useMemo(() => {\n    if (!csvOverlayState.datasets || csvOverlayState.datasets.length === 0) {\n      return [];\n    }\n\n    return csvOverlayState.datasets\n      .filter(dataset => dataset.visible)\n      .map((dataset, index) => {\n        let processedData = dataset.data;\n\n        // Auto-detect band from frequency range for labeling purposes only\n        const frequencies = dataset.data.map(point => point.frequency / 1e6); // Convert to MHz\n        const minFreq = Math.min(...frequencies);\n        const maxFreq = Math.max(...frequencies);\n        const detectedBand = CsvService.detectBandFromFrequencyRange(minFreq, maxFreq);\n        \n        // Only filter if user explicitly selects a band filter (not automatic)\n        if (vizState.selectedBand !== 'all') {\n          // Filter to user-selected band only when explicitly requested\n          const bandDefinition = BAND_DEFINITIONS[vizState.selectedBand];\n          const startHz = bandDefinition.startMHz * 1e6;\n          const endHz = bandDefinition.endMHz * 1e6;\n          \n          processedData = dataset.data.filter(point => \n            point.frequency >= startHz && point.frequency <= endHz\n          );\n          \n          console.log(`🎯 User-filtered ${dataset.filename} to band ${vizState.selectedBand} (${bandDefinition.range}): ${processedData.length} points`);\n        } else {\n          // Show ALL data when no explicit filter is applied\n          processedData = dataset.data;\n          console.log(`📊 Showing full dataset for ${dataset.filename}: ${processedData.length} points (detected band: ${detectedBand || 'Unknown'})`);\n        }\n\n        // Use the color assigned during file loading (preserves panel colors)\n        const color = dataset.color || PROFESSIONAL_COLORS[index % PROFESSIONAL_COLORS.length];\n\n        return {\n          ...dataset,\n          data: processedData,\n          color: color,\n          frequencyData: processedData.map(point => point.frequency / 1e6), // Convert to MHz\n          amplitudeData: processedData.map(point => point.amplitude),\n          detectedBand: detectedBand\n        };\n      });\n  }, [csvOverlayState.datasets, vizState.selectedBand]);\n\n  // ========================================================================\n  // PROFESSIONAL CHART CONFIGURATION\n  // ========================================================================\n\n  // Calculate optimal x-axis ticks with dynamic units based on frequency range\n  const calculateOptimalTicks = useMemo(() => {\n    if (processedDatasets.length === 0) return { min: 0, max: 1, step: 0.1, ticks: [], unit: 'MHz', unitMultiplier: 1 };\n\n    // Use actual data range for x-axis instead of forcing band boundaries\n    const allFrequencies = processedDatasets.flatMap(dataset => dataset.frequencyData);\n    if (allFrequencies.length === 0) return { min: 0, max: 1, step: 0.1, ticks: [], unit: 'MHz', unitMultiplier: 1 };\n    \n    let minFreq = Math.min(...allFrequencies);\n    let maxFreq = Math.max(...allFrequencies);\n    \n    // Only use band boundaries if user has explicitly filtered to a single band\n    if (vizState.selectedBand !== 'all') {\n      const bandDef = BAND_DEFINITIONS[vizState.selectedBand];\n      minFreq = bandDef.startMHz;\n      maxFreq = bandDef.endMHz;\n      console.log(`🎯 Using band ${vizState.selectedBand} boundaries for x-axis: ${minFreq}-${maxFreq} MHz`);\n    } else {\n      console.log(`📊 Using full data range for x-axis: ${minFreq.toFixed(3)}-${maxFreq.toFixed(3)} MHz`);\n    }\n\n    // Determine the best unit based on frequency range\n    let unit, unitMultiplier, displayMin, displayMax;\n    \n    if (maxFreq < 1) {\n      // Use kHz for frequencies below 1 MHz\n      unit = 'kHz';\n      unitMultiplier = 1000; // Convert MHz to kHz\n      displayMin = minFreq * unitMultiplier;\n      displayMax = maxFreq * unitMultiplier;\n    } else if (maxFreq < 1000) {\n      // Use MHz for frequencies below 1000 MHz\n      unit = 'MHz';\n      unitMultiplier = 1; // Already in MHz\n      displayMin = minFreq * unitMultiplier;\n      displayMax = maxFreq * unitMultiplier;\n    } else {\n      // Use GHz for frequencies 1000 MHz and above\n      unit = 'GHz';\n      unitMultiplier = 0.001; // Convert MHz to GHz\n      displayMin = minFreq * unitMultiplier;\n      displayMax = maxFreq * unitMultiplier;\n    }\n\n    const range = displayMax - displayMin;\n\n    // Calculate nice step size for exactly 10 divisions\n    const roughStep = range / 10;\n    \n    // Round to nice numbers (prefer 0.001, 0.002, 0.005, 0.01, 0.02, 0.05, 0.1, etc.)\n    const magnitude = Math.pow(10, Math.floor(Math.log10(roughStep)));\n    const normalized = roughStep / magnitude;\n    \n    let niceStep;\n    if (normalized <= 1) niceStep = magnitude;\n    else if (normalized <= 2) niceStep = 2 * magnitude;\n    else if (normalized <= 5) niceStep = 5 * magnitude;\n    else niceStep = 10 * magnitude;\n\n    // Use appropriate boundaries based on whether we're showing band-filtered or full data\n    let niceMin, niceMax;\n    if (vizState.selectedBand !== 'all') {\n      // For band-filtered data, use exact band boundaries\n      niceMin = displayMin;\n      niceMax = displayMax;\n    } else {\n      // For full data, use nice rounded boundaries\n      niceMin = Math.floor(displayMin / niceStep) * niceStep;\n      niceMax = Math.ceil(displayMax / niceStep) * niceStep;\n    }\n    \n    // Generate exactly 11 ticks (10 divisions) within the range\n    const ticks = [];\n    for (let i = 0; i <= 10; i++) {\n      ticks.push(niceMin + i * ((niceMax - niceMin) / 10));\n    }\n\n    console.log(`📏 Using ${unit} units for frequency range ${niceMin.toFixed(3)}-${niceMax.toFixed(3)} ${unit}`);\n\n    return {\n      min: niceMin,\n      max: niceMax,\n      step: (niceMax - niceMin) / 10,\n      ticks: ticks,\n      unit: unit,\n      unitMultiplier: unitMultiplier,\n      isBandConstrained: vizState.selectedBand !== 'all',\n      bandName: vizState.selectedBand !== 'all' ? vizState.selectedBand : null\n    };\n  }, [processedDatasets, vizState.selectedBand]);\n\n  const chartData: ChartData<'line'> = useMemo(() => {\n    console.log(`📊 Processing ${processedDatasets.length} datasets for visualization:`, \n      processedDatasets.map(d => `${d.filename} (${d.panelId}) - ${d.data.length} points`));\n    \n    const optimalTicks = calculateOptimalTicks;\n    \n    const datasets = processedDatasets.map((dataset, index) => ({\n      label: vizState.customLegendLabels[dataset.id] || dataset.label,\n      data: dataset.frequencyData.map((freq, dataIndex) => ({\n        x: freq * optimalTicks.unitMultiplier, // Convert to display units\n        y: dataset.amplitudeData[dataIndex]\n      })),\n      borderColor: dataset.color,\n      backgroundColor: `${dataset.color}15`, // 15% opacity\n      borderWidth: 1.5, // Thinner lines as requested\n      pointRadius: 0,\n      pointHoverRadius: 6,\n      pointHoverBorderWidth: 2,\n      pointHoverBorderColor: '#ffffff',\n      fill: false,\n      tension: 0.1,\n      spanGaps: false\n    }));\n\n    // NYCT limit lines removed per user request\n\n    return { datasets };\n  }, [processedDatasets, calculateOptimalTicks, vizState.customLegendLabels]);\n\n  const chartOptions: ChartOptions<'line'> = useMemo(() => {\n    const optimalTicks = calculateOptimalTicks;\n    \n    // Calculate optimal Y-axis ticks with 10-unit increments\n    const calculateOptimalYTicks = () => {\n      if (processedDatasets.length === 0) return { min: 0, max: 100, step: 10 };\n      \n      const allAmplitudes = processedDatasets.flatMap(dataset => dataset.amplitudeData);\n      if (allAmplitudes.length === 0) return { min: 0, max: 100, step: 10 };\n      \n      const minAmp = Math.min(...allAmplitudes);\n      const maxAmp = Math.max(...allAmplitudes);\n      \n      // Round to nearest 10s with some padding\n      const yMin = Math.floor((minAmp - 5) / 10) * 10;\n      const yMax = Math.ceil((maxAmp + 5) / 10) * 10;\n      \n      // Ensure we have at least a 30dB range for better visibility\n      const range = yMax - yMin;\n      const minRange = 30;\n      if (range < minRange) {\n        const midPoint = (yMin + yMax) / 2;\n        const expandedMin = Math.floor((midPoint - minRange/2) / 10) * 10;\n        const expandedMax = Math.ceil((midPoint + minRange/2) / 10) * 10;\n        return { min: expandedMin, max: expandedMax, step: 10 };\n      }\n      \n      return { min: yMin, max: yMax, step: 10 };\n    };\n    \n    const yAxisTicks = calculateOptimalYTicks();\n    \n    return {\n      responsive: true,\n      maintainAspectRatio: false,\n      devicePixelRatio: 2, // High DPI rendering\n      plugins: {\n        title: {\n          display: true,\n          text: vizState.customTitle || (() => {\n            const leftPanelDatasets = processedDatasets.filter(d => d.panelId === 'dataset-a');\n            const rightPanelDatasets = processedDatasets.filter(d => d.panelId === 'dataset-b');\n            \n            if (leftPanelDatasets.length > 0 && rightPanelDatasets.length > 0) {\n              const leftTitle = leftPanelDatasets[0].filename.replace('.csv', '');\n              const rightTitle = rightPanelDatasets[0].filename.replace('.csv', '');\n              return `${leftTitle} vs. ${rightTitle}`;\n            } else if (leftPanelDatasets.length > 0) {\n              return leftPanelDatasets[0].filename.replace('.csv', '');\n            } else if (rightPanelDatasets.length > 0) {\n              return rightPanelDatasets[0].filename.replace('.csv', '');\n            }\n            return 'EMC Spectrum Analysis';\n          })(),\n          font: {\n            size: 18,\n            weight: 'bold',\n            family: 'Arial, sans-serif'\n          },\n          padding: 20,\n          color: '#2c3e50'\n        },\n        legend: {\n          display: showLegend,\n          position: 'bottom' as const,\n          labels: {\n            usePointStyle: true,\n            pointStyle: 'line',\n            font: {\n              size: 12,\n              family: 'Arial, sans-serif'\n            },\n            padding: 15\n          }\n        },\n        tooltip: {\n          mode: 'nearest',\n          intersect: false,\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\n          titleColor: '#ffffff',\n          bodyColor: '#ffffff',\n          borderColor: '#ffffff',\n          borderWidth: 1,\n          cornerRadius: 6,\n          displayColors: true,\n          callbacks: {\n            title: (context) => {\n              const freq = context[0].parsed.x;\n              let formattedFreq;\n              if (optimalTicks.unit === 'kHz') {\n                formattedFreq = freq >= 100 ? freq.toFixed(0) : freq.toFixed(1);\n              } else if (optimalTicks.unit === 'MHz') {\n                formattedFreq = freq >= 100 ? freq.toFixed(0) : freq.toFixed(1);\n              } else { // GHz\n                formattedFreq = freq.toFixed(2);\n              }\n              return `Frequency: ${formattedFreq} ${optimalTicks.unit}`;\n            },\n            label: (context) => {\n              return `${context.dataset.label}: ${context.parsed.y.toFixed(2)} dBμV/m`;\n            }\n          }\n        },\n        zoom: {\n          zoom: {\n            wheel: {\n              enabled: true,\n              modifierKey: 'ctrl'\n            },\n            pinch: {\n              enabled: true\n            },\n            mode: 'xy',\n            onZoom: ({ chart }) => {\n              const zoomLevel = chart.getZoomLevel();\n              setVizState(prev => ({ ...prev, zoomLevel }));\n            }\n          },\n          pan: {\n            enabled: true,\n            mode: 'xy'\n          }\n        }\n      },\n      scales: {\n        x: {\n          type: 'linear',\n          title: {\n            display: true,\n            text: `Frequency (${optimalTicks.unit})`,\n            font: {\n              size: 14,\n              weight: 'bold',\n              family: 'Arial, sans-serif'\n            },\n            color: '#2c3e50'\n          },\n          grid: {\n            color: 'rgba(0, 0, 0, 0.1)',\n            lineWidth: 1\n          },\n          min: optimalTicks.min,\n          max: optimalTicks.max,\n          ticks: {\n            font: {\n              size: 11,\n              family: 'Arial, sans-serif'\n            },\n            color: '#2c3e50',\n            count: 11, // Force exactly 11 ticks = 10 divisions\n            min: optimalTicks.min,\n            max: optimalTicks.max,\n            stepSize: optimalTicks.step,\n            callback: function(value: any) {\n              const numValue = Number(value);\n              // Format numbers based on the unit being used\n              if (optimalTicks.unit === 'kHz') {\n                if (numValue >= 1000) {\n                  return (numValue / 1000).toFixed(1) + 'k';\n                } else if (numValue >= 100) {\n                  return numValue.toFixed(0);\n                } else if (numValue >= 10) {\n                  return numValue.toFixed(1);\n                } else {\n                  return numValue.toFixed(2);\n                }\n              } else if (optimalTicks.unit === 'MHz') {\n                if (numValue >= 1000) {\n                  return (numValue / 1000).toFixed(1) + 'k';\n                } else if (numValue >= 100) {\n                  return numValue.toFixed(0);\n                } else if (numValue >= 1) {\n                  return numValue.toFixed(1);\n                } else {\n                  return numValue.toFixed(2);\n                }\n              } else { // GHz\n                if (numValue >= 1) {\n                  return numValue.toFixed(1);\n                } else {\n                  return numValue.toFixed(2);\n                }\n              }\n            }\n          }\n        },\n        y: {\n          position: 'left',\n          title: {\n            display: true,\n            text: 'Amplitude (dBμV/m)',\n            font: {\n              size: 14,\n              weight: 'bold',\n              family: 'Arial, sans-serif'\n            },\n            color: '#2c3e50'\n          },\n          grid: {\n            color: 'rgba(0, 0, 0, 0.1)',\n            lineWidth: 1\n          },\n          min: yAxisTicks.min,\n          max: yAxisTicks.max,\n          ticks: {\n            font: {\n              size: 11,\n              family: 'Arial, sans-serif'\n            },\n            color: '#2c3e50',\n            stepSize: yAxisTicks.step, // Always 10 dB increments\n            callback: function(value: any) {\n              return Number(value).toFixed(0) + ' dB';\n            }\n          }\n        }\n      },\n      interaction: {\n        intersect: false,\n        mode: 'nearest'\n      },\n      onClick: (event, elements) => {\n        if (elements.length > 0 && onPeakClick) {\n          const element = elements[0];\n          const datasetIndex = element.datasetIndex;\n          const dataIndex = element.index;\n          \n          if (datasetIndex < processedDatasets.length) {\n            const dataset = processedDatasets[datasetIndex];\n            const frequency = dataset.frequencyData[dataIndex];\n            const amplitude = dataset.amplitudeData[dataIndex];\n            \n            // Find if this point is a detected peak\n            const peakData = vizState.detectedPeaks.find(p => p.dataset.id === dataset.id);\n            const peak = peakData?.peaks.find(p => \n              Math.abs(p.frequency - frequency) < 0.001 && \n              Math.abs(p.amplitude - amplitude) < 0.1\n            );\n            \n            if (peak) {\n              onPeakClick(peak, dataset);\n            }\n          }\n        }\n      }\n    };\n  }, [showLegend, processedDatasets, vizState.detectedPeaks, onPeakClick, calculateOptimalTicks, vizState.customTitle]);\n\n  // ========================================================================\n  // EXPORT FUNCTIONALITY\n  // ========================================================================\n\n  const exportChart = useCallback(async (exportType: 'original' | 'zoom' = 'zoom', format: 'png' | 'pdf' = 'png') => {\n    if (!chartRef.current) return;\n\n    setVizState(prev => ({ ...prev, isExporting: true }));\n\n    try {\n      // Handle original view export by temporarily resetting zoom\n      if (exportType === 'original') {\n        chartRef.current.resetZoom();\n        await new Promise(resolve => setTimeout(resolve, 100)); // Wait for reset\n      }\n\n      // Calculate optimal Y-axis ticks with 10-unit increments for export\n      const calculateOptimalYTicksForExport = () => {\n        if (processedDatasets.length === 0) return { min: 0, max: 100, step: 10 };\n        \n        const allAmplitudes = processedDatasets.flatMap(dataset => dataset.amplitudeData);\n        if (allAmplitudes.length === 0) return { min: 0, max: 100, step: 10 };\n        \n        const minAmp = Math.min(...allAmplitudes);\n        const maxAmp = Math.max(...allAmplitudes);\n        \n        // Round to nearest 10s with some padding for better visualization\n        const yMin = Math.floor((minAmp - 5) / 10) * 10;\n        const yMax = Math.ceil((maxAmp + 5) / 10) * 10;\n        \n        // Ensure we have at least a 30dB range for better visibility\n        const range = yMax - yMin;\n        const minRange = 30;\n        if (range < minRange) {\n          const midPoint = (yMin + yMax) / 2;\n          const expandedMin = Math.floor((midPoint - minRange/2) / 10) * 10;\n          const expandedMax = Math.ceil((midPoint + minRange/2) / 10) * 10;\n          return { min: expandedMin, max: expandedMax, step: 10 };\n        }\n        \n        return { min: yMin, max: yMax, step: 10 };\n      };\n\n      const exportYAxisTicks = calculateOptimalYTicksForExport();\n\n      // Create export-specific chart with thinner lines\n      const exportCanvas = document.createElement('canvas');\n      const exportCtx = exportCanvas.getContext('2d');\n      \n      if (!exportCtx) throw new Error('Could not create export canvas');\n\n      // Set high resolution (300 DPI equivalent)\n      const scale = 4; // Increased scale for better quality\n      const originalCanvas = chartRef.current.canvas;\n      exportCanvas.width = originalCanvas.width * scale;\n      exportCanvas.height = originalCanvas.height * scale;\n      \n      // Set white background\n      exportCtx.fillStyle = '#ffffff';\n      exportCtx.fillRect(0, 0, exportCanvas.width, exportCanvas.height);\n      \n      // Create export chart with thinner lines\n      const exportChartCanvas = document.createElement('canvas');\n      const exportChartCtx = exportChartCanvas.getContext('2d');\n      exportChartCanvas.width = originalCanvas.width;\n      exportChartCanvas.height = originalCanvas.height;\n      \n      if (!exportChartCtx) throw new Error('Could not create export chart canvas');\n\n      // Create a new chart instance for export with thinner lines\n      const optimalTicks = calculateOptimalTicks;\n      \n      const exportChartData = {\n        datasets: processedDatasets.map((dataset, index) => ({\n          label: vizState.customLegendLabels[dataset.id] || dataset.label,\n          data: dataset.frequencyData.map((freq, dataIndex) => ({\n            x: freq * optimalTicks.unitMultiplier, // Convert to display units\n            y: dataset.amplitudeData[dataIndex]\n          })),\n          borderColor: dataset.color,\n          backgroundColor: `${dataset.color}15`, // 15% opacity\n          borderWidth: 1, // Thinner lines to match display\n          pointRadius: 0,\n          pointHoverRadius: 0,\n          pointHoverBorderWidth: 0,\n          fill: false,\n          tension: 0.1,\n          spanGaps: false\n        }))\n      };\n\n      // Create temporary chart for export\n      const tempChart = new ChartJS(exportChartCanvas, {\n        type: 'line',\n        data: exportChartData,\n        options: {\n          responsive: false,\n          maintainAspectRatio: false,\n          devicePixelRatio: 1,\n          animation: false,\n          plugins: {\n            title: {\n              display: true,\n              text: (() => {\n                // Use custom title if it exists, otherwise generate automatically\n                if (vizState.customTitle && vizState.customTitle.trim()) {\n                  return vizState.customTitle;\n                }\n                \n                const leftPanelDatasets = processedDatasets.filter(d => d.panelId === 'dataset-a');\n                const rightPanelDatasets = processedDatasets.filter(d => d.panelId === 'dataset-b');\n                \n                if (leftPanelDatasets.length > 0 && rightPanelDatasets.length > 0) {\n                  const leftTitle = leftPanelDatasets[0].filename.replace('.csv', '');\n                  const rightTitle = rightPanelDatasets[0].filename.replace('.csv', '');\n                  return `${leftTitle} vs. ${rightTitle}`;\n                } else if (leftPanelDatasets.length > 0) {\n                  return leftPanelDatasets[0].filename.replace('.csv', '');\n                } else if (rightPanelDatasets.length > 0) {\n                  return rightPanelDatasets[0].filename.replace('.csv', '');\n                }\n                return 'EMC Spectrum Analysis';\n              })(),\n              font: {\n                size: 36,\n                weight: 'bold',\n                family: 'Arial, sans-serif'\n              },\n              padding: 40,\n              color: '#2c3e50'\n            },\n            legend: {\n              display: showLegend,\n              position: 'bottom' as const,\n              labels: {\n                usePointStyle: true,\n                pointStyle: 'line',\n                font: {\n                  size: 24,\n                  family: 'Arial, sans-serif'\n                },\n                padding: 30\n              }\n            },\n            tooltip: {\n              enabled: false\n            }\n          },\n          scales: {\n            x: {\n              type: 'linear',\n              title: {\n                display: true,\n                text: `Frequency (${optimalTicks.unit})`,\n                font: {\n                  size: 28,\n                  weight: 'bold',\n                  family: 'Arial, sans-serif'\n                },\n                color: '#2c3e50'\n              },\n              grid: {\n                color: 'rgba(0, 0, 0, 0.1)',\n                lineWidth: 1\n              },\n              min: optimalTicks.min,\n              max: optimalTicks.max,\n              ticks: {\n                font: {\n                  size: 22,\n                  family: 'Arial, sans-serif'\n                },\n                color: '#2c3e50',\n                count: 11,\n                callback: function(value: any) {\n                  const numValue = Number(value);\n                  if (optimalTicks.unit === 'kHz') {\n                    if (numValue >= 1000) return (numValue / 1000).toFixed(1) + 'k';\n                    else if (numValue >= 100) return numValue.toFixed(0);\n                    else if (numValue >= 10) return numValue.toFixed(1);\n                    else return numValue.toFixed(2);\n                  } else if (optimalTicks.unit === 'MHz') {\n                    if (numValue >= 1000) return (numValue / 1000).toFixed(1) + 'k';\n                    else if (numValue >= 100) return numValue.toFixed(0);\n                    else if (numValue >= 1) return numValue.toFixed(1);\n                    else return numValue.toFixed(2);\n                  } else {\n                    if (numValue >= 1) return numValue.toFixed(1);\n                    else return numValue.toFixed(2);\n                  }\n                }\n              }\n            },\n            y: {\n              position: 'left',\n              title: {\n                display: true,\n                text: 'Amplitude (dBμV/m)',\n                font: {\n                  size: 28,\n                  weight: 'bold',\n                  family: 'Arial, sans-serif'\n                },\n                color: '#2c3e50'\n              },\n              grid: {\n                color: 'rgba(0, 0, 0, 0.1)',\n                lineWidth: 1\n              },\n              min: exportYAxisTicks.min,\n              max: exportYAxisTicks.max,\n              ticks: {\n                font: {\n                  size: 22,\n                  family: 'Arial, sans-serif'\n                },\n                color: '#2c3e50',\n                stepSize: exportYAxisTicks.step, // Always 10 dB increments\n                callback: function(value: any) {\n                  return Number(value).toFixed(0) + ' dB';\n                }\n              } as any\n            }\n          },\n          interaction: {\n            intersect: false,\n            mode: 'nearest'\n          }\n        } as any\n      });\n\n      // Copy current zoom state if needed\n      if (exportType === 'zoom' && chartRef.current) {\n        const currentOptions = chartRef.current.options;\n        if (currentOptions?.scales?.x && currentOptions?.scales?.y) {\n          tempChart.options.scales!.x!.min = currentOptions.scales.x.min;\n          tempChart.options.scales!.x!.max = currentOptions.scales.x.max;\n          // For zoom exports, also use the current y-axis range instead of the calculated optimal range\n          tempChart.options.scales!.y!.min = currentOptions.scales.y.min;\n          tempChart.options.scales!.y!.max = currentOptions.scales.y.max;\n          // Recalculate stepSize for zoom export to ensure 10 increments\n          const zoomYRange = (currentOptions.scales.y.max as number) - (currentOptions.scales.y.min as number);\n          (tempChart.options.scales!.y!.ticks as any).stepSize = zoomYRange / 10;\n        }\n      }\n\n      // Render the export chart\n      tempChart.update('none');\n      await new Promise(resolve => setTimeout(resolve, 100)); // Wait for render\n\n      // Enable high-quality rendering\n      exportCtx.imageSmoothingEnabled = true;\n      exportCtx.imageSmoothingQuality = 'high';\n      \n      // Scale and draw the clean chart (no annotations)\n      exportCtx.scale(scale, scale);\n      exportCtx.drawImage(exportChartCanvas, 0, 0);\n\n      // Generate professional filename based on datasets\n      const leftPanelDatasets = processedDatasets.filter(d => d.panelId === 'dataset-a');\n      const rightPanelDatasets = processedDatasets.filter(d => d.panelId === 'dataset-b');\n      \n      let filename = '';\n      if (leftPanelDatasets.length > 0 && rightPanelDatasets.length > 0) {\n        const leftNames = leftPanelDatasets.map(d => d.filename.replace('.csv', '')).join('+');\n        const rightNames = rightPanelDatasets.map(d => d.filename.replace('.csv', '')).join('+');\n        filename = `${leftNames} vs ${rightNames}`;\n      } else if (leftPanelDatasets.length > 0) {\n        filename = leftPanelDatasets.map(d => d.filename.replace('.csv', '')).join('+');\n      } else if (rightPanelDatasets.length > 0) {\n        filename = rightPanelDatasets.map(d => d.filename.replace('.csv', '')).join('+');\n      } else {\n        filename = 'EMC_Spectrum_Analysis';\n      }\n      \n      // Add timestamp\n      const timestamp = new Date().toISOString().split('T')[0];\n      const exportSuffix = exportType === 'original' ? '_Original' : '_Zoomed';\n      filename = `${filename}${exportSuffix}_${timestamp}`;\n\n      // Clean up temporary chart\n      tempChart.destroy();\n\n      // Convert to blob and download\n      exportCanvas.toBlob((blob) => {\n        if (blob) {\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `${filename}.${format}`;\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n          URL.revokeObjectURL(url);\n          \n          console.log(`📸 Chart exported as: ${filename}.${format} (${exportType} view)`);\n        }\n      }, `image/${format}`, 0.95);\n\n    } catch (error) {\n      console.error('Export failed:', error);\n      alert('Export failed. Please try again.');\n    } finally {\n      setVizState(prev => ({ ...prev, isExporting: false }));\n    }\n  }, [processedDatasets, calculateOptimalTicks, showLegend, vizState.customTitle, vizState.customLegendLabels]);\n\n  // ========================================================================\n  // CHART CONTROLS\n  // ========================================================================\n\n  // ========================================================================\n  // EDIT FUNCTIONALITY\n  // ========================================================================\n\n  const handleTitleEdit = (newTitle: string) => {\n    setVizState(prev => ({ \n      ...prev, \n      customTitle: newTitle,\n      isEditingTitle: false\n    }));\n  };\n\n  const handleLegendEdit = (datasetId: string, newLabel: string) => {\n    setVizState(prev => ({ \n      ...prev, \n      customLegendLabels: {\n        ...prev.customLegendLabels,\n        [datasetId]: newLabel\n      }\n    }));\n  };\n\n  // ========================================================================\n  // RENDER HELPERS\n  // ========================================================================\n\n  const renderEditControls = () => {\n    if (csvOverlayState.datasets.length === 0) return null;\n\n    return (\n      <div className=\"edit-controls professional\">\n        <div style={{ display: 'flex', gap: '12px', alignItems: 'center', justifyContent: 'center', flexWrap: 'wrap' }}>\n          {/* Title Edit Button */}\n          <button \n            onClick={() => setVizState(prev => ({ ...prev, isEditingTitle: !prev.isEditingTitle }))}\n            className=\"edit-btn\"\n            style={{\n              backgroundColor: vizState.isEditingTitle ? '#e74c3c' : '#3498db',\n              border: 'none',\n              color: 'white',\n              padding: '6px 12px',\n              borderRadius: '4px',\n              fontWeight: '500',\n              fontSize: '12px',\n              cursor: 'pointer',\n              transition: 'all 0.2s ease'\n            }}\n          >\n            {vizState.isEditingTitle ? 'Cancel' : 'Edit Title'}\n          </button>\n\n          {/* Legend Edit Button */}\n          <button \n            onClick={() => setVizState(prev => ({ ...prev, isEditingLegend: !prev.isEditingLegend }))}\n            className=\"edit-btn\"\n            style={{\n              backgroundColor: vizState.isEditingLegend ? '#e74c3c' : '#2ecc71',\n              border: 'none',\n              color: 'white',\n              padding: '6px 12px',\n              borderRadius: '4px',\n              fontWeight: '500',\n              fontSize: '12px',\n              cursor: 'pointer',\n              transition: 'all 0.2s ease'\n            }}\n          >\n            {vizState.isEditingLegend ? 'Done' : 'Edit Labels'}\n          </button>\n\n          {/* Reset Button */}\n          <button \n            onClick={() => setVizState(prev => ({ \n              ...prev, \n              customTitle: '', \n              customLegendLabels: {},\n              isEditingTitle: false,\n              isEditingLegend: false\n            }))}\n            className=\"reset-btn\"\n            style={{\n              backgroundColor: '#95a5a6',\n              border: 'none',\n              color: 'white',\n              padding: '6px 12px',\n              borderRadius: '4px',\n              fontWeight: '500',\n              fontSize: '12px',\n              cursor: 'pointer',\n              transition: 'all 0.2s ease'\n            }}\n          >\n            Reset\n          </button>\n\n          {/* Export Button - Only Default View */}\n          <button \n            onClick={() => exportChart('original', 'png')} \n            className=\"export-btn primary simple\"\n            disabled={vizState.isExporting || processedDatasets.length === 0}\n            style={{\n              backgroundColor: vizState.isExporting ? '#95a5a6' : '#e67e22',\n              border: 'none',\n              color: 'white',\n              padding: '6px 12px',\n              borderRadius: '4px',\n              fontWeight: '500',\n              fontSize: '12px',\n              cursor: vizState.isExporting ? 'not-allowed' : 'pointer',\n              transition: 'all 0.2s ease'\n            }}\n          >\n            {vizState.isExporting ? 'Exporting...' : 'Export Default View'}\n          </button>\n        </div>\n\n        {/* Title Edit Input */}\n        {vizState.isEditingTitle && (\n          <div style={{ marginTop: '12px', textAlign: 'center' }}>\n            <input\n              type=\"text\"\n              placeholder=\"Enter custom chart title...\"\n              defaultValue={vizState.customTitle}\n              onKeyPress={(e) => {\n                if (e.key === 'Enter') {\n                  handleTitleEdit((e.target as HTMLInputElement).value);\n                }\n              }}\n              onBlur={(e) => handleTitleEdit(e.target.value)}\n              autoFocus\n              style={{\n                padding: '8px 12px',\n                border: '2px solid #3498db',\n                borderRadius: '4px',\n                fontSize: '14px',\n                fontWeight: 'bold',\n                textAlign: 'center',\n                minWidth: '300px',\n                maxWidth: '600px',\n                width: '100%',\n                fontFamily: 'Arial, sans-serif'\n              }}\n            />\n            <div style={{ marginTop: '4px', fontSize: '10px', color: '#7f8c8d' }}>\n              Press Enter or click away to save\n            </div>\n          </div>\n        )}\n\n        {/* Legend Edit Inputs */}\n        {vizState.isEditingLegend && (\n          <div style={{ marginTop: '12px' }}>\n            <div style={{ \n              display: 'grid', \n              gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', \n              gap: '8px',\n              maxWidth: '600px',\n              margin: '0 auto'\n            }}>\n              {processedDatasets.map((dataset) => (\n                <div key={dataset.id} style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>\n                  <div \n                    style={{ \n                      width: '16px', \n                      height: '16px', \n                      backgroundColor: dataset.color,\n                      borderRadius: '50%',\n                      flexShrink: 0,\n                      border: '2px solid white',\n                      boxShadow: '0 1px 3px rgba(0,0,0,0.3)'\n                    }}\n                  />\n                  <input\n                    type=\"text\"\n                    placeholder={dataset.label}\n                    defaultValue={vizState.customLegendLabels[dataset.id] || ''}\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        handleLegendEdit(dataset.id, (e.target as HTMLInputElement).value);\n                      }\n                    }}\n                    onBlur={(e) => handleLegendEdit(dataset.id, e.target.value)}\n                    style={{\n                      padding: '6px 8px',\n                      border: '1px solid #2ecc71',\n                      borderRadius: '4px',\n                      fontSize: '12px',\n                      flex: 1,\n                      fontFamily: 'Arial, sans-serif'\n                    }}\n                  />\n                </div>\n              ))}\n            </div>\n            <div style={{ marginTop: '6px', fontSize: '10px', color: '#7f8c8d', textAlign: 'center' }}>\n              Press Enter or click away to save changes\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const renderControls = () => {\n    if (!showControls || csvOverlayState.datasets.length === 0) return null;\n\n    return (\n      <div className=\"chart-controls professional compact\">\n        <div className=\"band-filter-control\">\n          <label htmlFor=\"band-filter-select\" className=\"filter-label\">\n            Band Filter:\n          </label>\n          <select\n            id=\"band-filter-select\"\n            value={vizState.selectedBand}\n            onChange={(e) => setVizState(prev => ({ ...prev, selectedBand: e.target.value as BandType | 'all' }))}\n            className=\"band-filter-select\"\n            style={{\n              padding: '6px 12px',\n              marginLeft: '8px',\n              borderRadius: '4px',\n              border: '1px solid #ddd',\n              fontSize: '14px'\n            }}\n          >\n            <option value=\"all\">Show All Data (No Filtering)</option>\n            {Object.entries(BAND_DEFINITIONS).map(([bandType, definition]) => (\n              <option key={bandType} value={bandType}>\n                Filter to {bandType}: {definition.range}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n    );\n  };\n\n  // ========================================================================\n  // MAIN RENDER\n  // ========================================================================\n\n  if (csvOverlayState.datasets.length === 0) {\n    return (\n      <div className=\"csv-visualization-empty professional\">\n        <div className=\"empty-state\">\n          <div className=\"empty-icon\">Open Folder</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"csv-visualization professional\">\n      {renderControls()}\n      \n      <div className=\"chart-container professional\">\n        <Line\n          ref={chartRef}\n          data={chartData}\n          options={chartOptions}\n          width={width}\n          height={height}\n        />\n      </div>\n\n      {renderEditControls()}\n    </div>\n  );\n};\n\nexport default CsvVisualization; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}