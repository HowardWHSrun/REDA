{"ast":null,"code":"var _jsxFileName = \"/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/src/context/AppContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$(),\n  _s8 = $RefreshSig$();\n// ========================================================================\n// REDA EMC Testing Tool - Application Context\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Central state management using React Context API\n// ========================================================================\n\nimport React, { createContext, useContext, useReducer, useCallback, useEffect } from 'react';\nimport { DEFAULT_LIMIT_CONFIGURATION, DEFAULT_IMAGE_FORM_DATA, DEFAULT_CSV_FORM_DATA, STORAGE_KEYS } from '../constants';\n\n// ========================================================================\n// ACTION TYPES\n// ========================================================================\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// ========================================================================\n// INITIAL STATE\n// ========================================================================\n\nconst createInitialPageData = pageId => ({\n  pageId,\n  imageState1: {\n    image: null,\n    originalFilename: null,\n    isDragging: false,\n    lastX: 0,\n    lastY: 0,\n    offsetX: 0,\n    offsetY: 0,\n    scale: 1,\n    baseWidth: 0,\n    baseHeight: 0\n  },\n  imageState2: {\n    image: null,\n    originalFilename: null,\n    isDragging: false,\n    lastX: 0,\n    lastY: 0,\n    offsetX: 0,\n    offsetY: 0,\n    scale: 1,\n    baseWidth: 0,\n    baseHeight: 0\n  },\n  csvState1: {\n    data: null,\n    originalFilename: null,\n    frequencyData: [],\n    amplitudeData: [],\n    minFreq: 0,\n    maxFreq: 0,\n    minAmp: 0,\n    maxAmp: 0,\n    rowCount: 0,\n    scale: 1,\n    offsetX: 0,\n    offsetY: 0,\n    isDragging: false,\n    lastX: 0,\n    lastY: 0\n  },\n  csvState2: {\n    data: null,\n    originalFilename: null,\n    frequencyData: [],\n    amplitudeData: [],\n    minFreq: 0,\n    maxFreq: 0,\n    minAmp: 0,\n    maxAmp: 0,\n    rowCount: 0,\n    scale: 1,\n    offsetX: 0,\n    offsetY: 0,\n    isDragging: false,\n    lastX: 0,\n    lastY: 0\n  },\n  formData1: {\n    ...DEFAULT_IMAGE_FORM_DATA\n  },\n  formData2: {\n    ...DEFAULT_IMAGE_FORM_DATA\n  },\n  csvFormData: {\n    ...DEFAULT_CSV_FORM_DATA\n  },\n  comments: '',\n  lastModified: new Date()\n});\nconst initialState = {\n  currentMode: 'csv',\n  currentLayout: 'horizontal',\n  currentCsvMode: 'overlay',\n  currentPageId: 1,\n  nextPageId: 2,\n  pages: new Map([[1, createInitialPageData(1)]]),\n  csvOverlayState: {\n    scale: 1,\n    offsetX: 0,\n    offsetY: 0,\n    isDragging: false,\n    lastX: 0,\n    lastY: 0,\n    showLegend: true,\n    datasets: []\n  },\n  correctionState: {\n    measurementData: null,\n    addCorrectionData: null,\n    subtractCorrectionData: null,\n    correctedData: null,\n    scale: 1,\n    offsetX: 0,\n    offsetY: 0,\n    isDragging: false,\n    lastMouseX: 0,\n    lastMouseY: 0\n  },\n  limitConfiguration: {\n    ...DEFAULT_LIMIT_CONFIGURATION\n  },\n  folderSelection: {\n    folder: null,\n    analyzedFiles: [],\n    selectedFiles: [],\n    availableFiles: [],\n    currentFilter: 'all'\n  }\n};\n\n// ========================================================================\n// REDUCER\n// ========================================================================\n\nfunction appReducer(state, action) {\n  switch (action.type) {\n    case 'SET_MODE':\n      return {\n        ...state,\n        currentMode: action.payload\n      };\n    case 'SET_LAYOUT':\n      return {\n        ...state,\n        currentLayout: action.payload\n      };\n    case 'SET_CSV_MODE':\n      return {\n        ...state,\n        currentCsvMode: action.payload\n      };\n    case 'SWITCH_PAGE':\n      return {\n        ...state,\n        currentPageId: action.payload\n      };\n    case 'ADD_PAGE':\n      const newPages = new Map(state.pages);\n      newPages.set(action.payload.pageId, action.payload);\n      return {\n        ...state,\n        pages: newPages,\n        nextPageId: Math.max(state.nextPageId, action.payload.pageId + 1)\n      };\n    case 'REMOVE_PAGE':\n      const updatedPages = new Map(state.pages);\n      updatedPages.delete(action.payload);\n\n      // If removing current page, switch to another page\n      let newCurrentPageId = state.currentPageId;\n      if (action.payload === state.currentPageId && updatedPages.size > 0) {\n        newCurrentPageId = Math.min(...Array.from(updatedPages.keys()));\n      }\n      return {\n        ...state,\n        pages: updatedPages,\n        currentPageId: newCurrentPageId\n      };\n    case 'UPDATE_PAGE_DATA':\n      const pageToUpdate = state.pages.get(action.payload.pageId);\n      if (!pageToUpdate) return state;\n      const updatedPageData = {\n        ...pageToUpdate,\n        ...action.payload.data,\n        lastModified: new Date()\n      };\n      const newPagesMap = new Map(state.pages);\n      newPagesMap.set(action.payload.pageId, updatedPageData);\n      return {\n        ...state,\n        pages: newPagesMap\n      };\n    case 'ADD_CSV_OVERLAY_DATASET':\n      return {\n        ...state,\n        csvOverlayState: {\n          ...state.csvOverlayState,\n          datasets: [...state.csvOverlayState.datasets, action.payload]\n        }\n      };\n    case 'REMOVE_CSV_OVERLAY_DATASET':\n      return {\n        ...state,\n        csvOverlayState: {\n          ...state.csvOverlayState,\n          datasets: state.csvOverlayState.datasets.filter(d => d.id !== action.payload)\n        }\n      };\n    case 'UPDATE_CSV_OVERLAY_DATASET':\n      return {\n        ...state,\n        csvOverlayState: {\n          ...state.csvOverlayState,\n          datasets: state.csvOverlayState.datasets.map(dataset => dataset.id === action.payload.id ? {\n            ...dataset,\n            ...action.payload.data\n          } : dataset)\n        }\n      };\n    case 'UPDATE_CSV_OVERLAY_STATE':\n      return {\n        ...state,\n        csvOverlayState: {\n          ...state.csvOverlayState,\n          ...action.payload\n        }\n      };\n    case 'UPDATE_CORRECTION_STATE':\n      return {\n        ...state,\n        correctionState: {\n          ...state.correctionState,\n          ...action.payload\n        }\n      };\n    case 'UPDATE_FOLDER_SELECTION':\n      return {\n        ...state,\n        folderSelection: {\n          ...state.folderSelection,\n          ...action.payload\n        }\n      };\n    case 'UPDATE_LIMIT_CONFIGURATION':\n      return {\n        ...state,\n        limitConfiguration: {\n          ...state.limitConfiguration,\n          ...action.payload\n        }\n      };\n    case 'RESET_APPLICATION_STATE':\n      return {\n        ...initialState,\n        pages: new Map([[1, createInitialPageData(1)]])\n      };\n    case 'LOAD_STATE_FROM_STORAGE':\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n}\n\n// ========================================================================\n// CONTEXT INTERFACE\n// ========================================================================\n\n// ========================================================================\n// CONTEXT CREATION\n// ========================================================================\n\nconst AppContext = /*#__PURE__*/createContext(undefined);\n\n// ========================================================================\n// PROVIDER COMPONENT\n// ========================================================================\n\nexport const AppContextProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  // ========================================================================\n  // ACTION CREATORS\n  // ========================================================================\n\n  const setMode = useCallback(mode => {\n    dispatch({\n      type: 'SET_MODE',\n      payload: mode\n    });\n  }, []);\n  const setLayout = useCallback(layout => {\n    dispatch({\n      type: 'SET_LAYOUT',\n      payload: layout\n    });\n  }, []);\n  const setCsvMode = useCallback(mode => {\n    dispatch({\n      type: 'SET_CSV_MODE',\n      payload: mode\n    });\n  }, []);\n  const switchToPage = useCallback(pageId => {\n    dispatch({\n      type: 'SWITCH_PAGE',\n      payload: pageId\n    });\n  }, []);\n  const addNewPage = useCallback(() => {\n    const newPageData = createInitialPageData(state.nextPageId);\n    dispatch({\n      type: 'ADD_PAGE',\n      payload: newPageData\n    });\n    return state.nextPageId;\n  }, [state.nextPageId]);\n  const removePage = useCallback(pageId => {\n    dispatch({\n      type: 'REMOVE_PAGE',\n      payload: pageId\n    });\n  }, []);\n  const updatePageData = useCallback((pageId, data) => {\n    dispatch({\n      type: 'UPDATE_PAGE_DATA',\n      payload: {\n        pageId,\n        data\n      }\n    });\n  }, []);\n  const getCurrentPage = useCallback(() => {\n    return state.pages.get(state.currentPageId);\n  }, [state.pages, state.currentPageId]);\n  const addCsvOverlayDataset = useCallback(dataset => {\n    dispatch({\n      type: 'ADD_CSV_OVERLAY_DATASET',\n      payload: dataset\n    });\n  }, []);\n  const removeCsvOverlayDataset = useCallback(id => {\n    dispatch({\n      type: 'REMOVE_CSV_OVERLAY_DATASET',\n      payload: id\n    });\n  }, []);\n  const updateCsvOverlayDataset = useCallback((id, data) => {\n    dispatch({\n      type: 'UPDATE_CSV_OVERLAY_DATASET',\n      payload: {\n        id,\n        data\n      }\n    });\n  }, []);\n  const updateCsvOverlayState = useCallback(overlayState => {\n    dispatch({\n      type: 'UPDATE_CSV_OVERLAY_STATE',\n      payload: overlayState\n    });\n  }, []);\n  const updateCorrectionState = useCallback(correctionState => {\n    dispatch({\n      type: 'UPDATE_CORRECTION_STATE',\n      payload: correctionState\n    });\n  }, []);\n  const updateFolderSelection = useCallback(selection => {\n    dispatch({\n      type: 'UPDATE_FOLDER_SELECTION',\n      payload: selection\n    });\n  }, []);\n  const updateLimitConfiguration = useCallback(config => {\n    dispatch({\n      type: 'UPDATE_LIMIT_CONFIGURATION',\n      payload: config\n    });\n  }, []);\n  const resetApplicationState = useCallback(() => {\n    dispatch({\n      type: 'RESET_APPLICATION_STATE'\n    });\n  }, []);\n\n  // ========================================================================\n  // PERSISTENCE FUNCTIONS\n  // ========================================================================\n\n  const saveStateToStorage = useCallback(() => {\n    try {\n      const stateToSave = {\n        currentMode: state.currentMode,\n        currentLayout: state.currentLayout,\n        currentCsvMode: state.currentCsvMode,\n        limitConfiguration: state.limitConfiguration,\n        folderSelection: {\n          ...state.folderSelection,\n          folder: null // Don't persist FileList\n        }\n      };\n      localStorage.setItem(STORAGE_KEYS.APPLICATION_STATE, JSON.stringify(stateToSave));\n    } catch (error) {\n      console.warn('Failed to save application state to localStorage:', error);\n    }\n  }, [state]);\n  const loadStateFromStorage = useCallback(() => {\n    try {\n      const savedState = localStorage.getItem(STORAGE_KEYS.APPLICATION_STATE);\n      if (savedState) {\n        const parsedState = JSON.parse(savedState);\n        dispatch({\n          type: 'LOAD_STATE_FROM_STORAGE',\n          payload: parsedState\n        });\n      }\n    } catch (error) {\n      console.warn('Failed to load application state from localStorage:', error);\n    }\n  }, []);\n\n  // ========================================================================\n  // EFFECTS\n  // ========================================================================\n\n  // Load state from localStorage on mount\n  useEffect(() => {\n    loadStateFromStorage();\n  }, [loadStateFromStorage]);\n\n  // Auto-save state changes to localStorage\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      saveStateToStorage();\n    }, 1000); // Debounce saves by 1 second\n\n    return () => clearTimeout(timeoutId);\n  }, [state, saveStateToStorage]);\n\n  // ========================================================================\n  // CONTEXT VALUE\n  // ========================================================================\n\n  const contextValue = {\n    state,\n    setMode,\n    setLayout,\n    setCsvMode,\n    switchToPage,\n    addNewPage,\n    removePage,\n    updatePageData,\n    getCurrentPage,\n    addCsvOverlayDataset,\n    removeCsvOverlayDataset,\n    updateCsvOverlayDataset,\n    updateCsvOverlayState,\n    updateCorrectionState,\n    updateFolderSelection,\n    updateLimitConfiguration,\n    resetApplicationState,\n    saveStateToStorage,\n    loadStateFromStorage\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 522,\n    columnNumber: 5\n  }, this);\n};\n\n// ========================================================================\n// CUSTOM HOOK\n// ========================================================================\n_s(AppContextProvider, \"S0PXdV5bmxr+3KDcjBcurL4m974=\");\n_c = AppContextProvider;\nexport const useAppContext = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppContextProvider');\n  }\n  return context;\n};\n\n// ========================================================================\n// CONVENIENCE HOOKS\n// ========================================================================\n_s2(useAppContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const useCurrentPage = () => {\n  _s3();\n  const {\n    getCurrentPage\n  } = useAppContext();\n  return getCurrentPage();\n};\n_s3(useCurrentPage, \"0WmO2pT/Mn1j2oRLkRhP9gQp/UI=\", false, function () {\n  return [useAppContext];\n});\nexport const useCurrentMode = () => {\n  _s4();\n  const {\n    state\n  } = useAppContext();\n  return state.currentMode;\n};\n_s4(useCurrentMode, \"DCaOfeIKNtJwTN/7VtW44u2/LQ4=\", false, function () {\n  return [useAppContext];\n});\nexport const useCsvOverlayState = () => {\n  _s5();\n  const {\n    state,\n    updateCsvOverlayState\n  } = useAppContext();\n  return {\n    csvOverlayState: state.csvOverlayState,\n    updateCsvOverlayState\n  };\n};\n_s5(useCsvOverlayState, \"2uOgeAxFBoZWogJ+DUhoW/oCxTg=\", false, function () {\n  return [useAppContext];\n});\nexport const useCorrectionState = () => {\n  _s6();\n  const {\n    state,\n    updateCorrectionState\n  } = useAppContext();\n  return {\n    correctionState: state.correctionState,\n    updateCorrectionState\n  };\n};\n_s6(useCorrectionState, \"KYTdk4xxyDBGUs3HqgHaSlRyyiM=\", false, function () {\n  return [useAppContext];\n});\nexport const useLimitConfiguration = () => {\n  _s7();\n  const {\n    state,\n    updateLimitConfiguration\n  } = useAppContext();\n  return {\n    limitConfiguration: state.limitConfiguration,\n    updateLimitConfiguration\n  };\n};\n_s7(useLimitConfiguration, \"J/dk2uOe4V5l01YMfuGPpHFeuOg=\", false, function () {\n  return [useAppContext];\n});\nexport const useFolderSelection = () => {\n  _s8();\n  const {\n    state,\n    updateFolderSelection\n  } = useAppContext();\n  return {\n    folderSelection: state.folderSelection,\n    updateFolderSelection\n  };\n};\n_s8(useFolderSelection, \"+TJ603+A4rYlGD/SER30CXyTZJQ=\", false, function () {\n  return [useAppContext];\n});\nvar _c;\n$RefreshReg$(_c, \"AppContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useCallback","useEffect","DEFAULT_LIMIT_CONFIGURATION","DEFAULT_IMAGE_FORM_DATA","DEFAULT_CSV_FORM_DATA","STORAGE_KEYS","jsxDEV","_jsxDEV","createInitialPageData","pageId","imageState1","image","originalFilename","isDragging","lastX","lastY","offsetX","offsetY","scale","baseWidth","baseHeight","imageState2","csvState1","data","frequencyData","amplitudeData","minFreq","maxFreq","minAmp","maxAmp","rowCount","csvState2","formData1","formData2","csvFormData","comments","lastModified","Date","initialState","currentMode","currentLayout","currentCsvMode","currentPageId","nextPageId","pages","Map","csvOverlayState","showLegend","datasets","correctionState","measurementData","addCorrectionData","subtractCorrectionData","correctedData","lastMouseX","lastMouseY","limitConfiguration","folderSelection","folder","analyzedFiles","selectedFiles","availableFiles","currentFilter","appReducer","state","action","type","payload","newPages","set","Math","max","updatedPages","delete","newCurrentPageId","size","min","Array","from","keys","pageToUpdate","get","updatedPageData","newPagesMap","filter","d","id","map","dataset","AppContext","undefined","AppContextProvider","children","_s","dispatch","setMode","mode","setLayout","layout","setCsvMode","switchToPage","addNewPage","newPageData","removePage","updatePageData","getCurrentPage","addCsvOverlayDataset","removeCsvOverlayDataset","updateCsvOverlayDataset","updateCsvOverlayState","overlayState","updateCorrectionState","updateFolderSelection","selection","updateLimitConfiguration","config","resetApplicationState","saveStateToStorage","stateToSave","localStorage","setItem","APPLICATION_STATE","JSON","stringify","error","console","warn","loadStateFromStorage","savedState","getItem","parsedState","parse","timeoutId","setTimeout","clearTimeout","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAppContext","_s2","context","Error","useCurrentPage","_s3","useCurrentMode","_s4","useCsvOverlayState","_s5","useCorrectionState","_s6","useLimitConfiguration","_s7","useFolderSelection","_s8","$RefreshReg$"],"sources":["/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/src/context/AppContext.tsx"],"sourcesContent":["// ========================================================================\n// REDA EMC Testing Tool - Application Context\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Central state management using React Context API\n// ========================================================================\n\nimport React, { createContext, useContext, useReducer, useCallback, useEffect } from 'react';\nimport {\n  ApplicationState,\n  ApplicationMode,\n  LayoutType,\n  CsvMode,\n  PageData,\n  CsvOverlayDataset,\n  EmiCorrectionState,\n  FolderSelection,\n  LimitConfiguration\n} from '../types';\nimport {\n  DEFAULT_LIMIT_CONFIGURATION,\n  DEFAULT_IMAGE_FORM_DATA,\n  DEFAULT_CSV_FORM_DATA,\n  STORAGE_KEYS\n} from '../constants';\n\n// ========================================================================\n// ACTION TYPES\n// ========================================================================\n\ntype AppAction =\n  | { type: 'SET_MODE'; payload: ApplicationMode }\n  | { type: 'SET_LAYOUT'; payload: LayoutType }\n  | { type: 'SET_CSV_MODE'; payload: CsvMode }\n  | { type: 'SWITCH_PAGE'; payload: number }\n  | { type: 'ADD_PAGE'; payload: PageData }\n  | { type: 'REMOVE_PAGE'; payload: number }\n  | { type: 'UPDATE_PAGE_DATA'; payload: { pageId: number; data: Partial<PageData> } }\n  | { type: 'ADD_CSV_OVERLAY_DATASET'; payload: CsvOverlayDataset }\n  | { type: 'REMOVE_CSV_OVERLAY_DATASET'; payload: string }\n  | { type: 'UPDATE_CSV_OVERLAY_DATASET'; payload: { id: string; data: Partial<CsvOverlayDataset> } }\n  | { type: 'UPDATE_CSV_OVERLAY_STATE'; payload: Partial<typeof initialState.csvOverlayState> }\n  | { type: 'UPDATE_CORRECTION_STATE'; payload: Partial<EmiCorrectionState> }\n  | { type: 'UPDATE_FOLDER_SELECTION'; payload: Partial<FolderSelection> }\n  | { type: 'UPDATE_LIMIT_CONFIGURATION'; payload: Partial<LimitConfiguration> }\n  | { type: 'RESET_APPLICATION_STATE' }\n  | { type: 'LOAD_STATE_FROM_STORAGE'; payload: Partial<ApplicationState> };\n\n// ========================================================================\n// INITIAL STATE\n// ========================================================================\n\nconst createInitialPageData = (pageId: number): PageData => ({\n  pageId,\n  imageState1: {\n    image: null,\n    originalFilename: null,\n    isDragging: false,\n    lastX: 0,\n    lastY: 0,\n    offsetX: 0,\n    offsetY: 0,\n    scale: 1,\n    baseWidth: 0,\n    baseHeight: 0\n  },\n  imageState2: {\n    image: null,\n    originalFilename: null,\n    isDragging: false,\n    lastX: 0,\n    lastY: 0,\n    offsetX: 0,\n    offsetY: 0,\n    scale: 1,\n    baseWidth: 0,\n    baseHeight: 0\n  },\n  csvState1: {\n    data: null,\n    originalFilename: null,\n    frequencyData: [],\n    amplitudeData: [],\n    minFreq: 0,\n    maxFreq: 0,\n    minAmp: 0,\n    maxAmp: 0,\n    rowCount: 0,\n    scale: 1,\n    offsetX: 0,\n    offsetY: 0,\n    isDragging: false,\n    lastX: 0,\n    lastY: 0\n  },\n  csvState2: {\n    data: null,\n    originalFilename: null,\n    frequencyData: [],\n    amplitudeData: [],\n    minFreq: 0,\n    maxFreq: 0,\n    minAmp: 0,\n    maxAmp: 0,\n    rowCount: 0,\n    scale: 1,\n    offsetX: 0,\n    offsetY: 0,\n    isDragging: false,\n    lastX: 0,\n    lastY: 0\n  },\n  formData1: { ...DEFAULT_IMAGE_FORM_DATA },\n  formData2: { ...DEFAULT_IMAGE_FORM_DATA },\n  csvFormData: { ...DEFAULT_CSV_FORM_DATA },\n  comments: '',\n  lastModified: new Date()\n});\n\nconst initialState: ApplicationState = {\n  currentMode: 'csv',\n  currentLayout: 'horizontal',\n  currentCsvMode: 'overlay',\n  currentPageId: 1,\n  nextPageId: 2,\n  pages: new Map([[1, createInitialPageData(1)]]),\n  csvOverlayState: {\n    scale: 1,\n    offsetX: 0,\n    offsetY: 0,\n    isDragging: false,\n    lastX: 0,\n    lastY: 0,\n    showLegend: true,\n    datasets: []\n  },\n  correctionState: {\n    measurementData: null,\n    addCorrectionData: null,\n    subtractCorrectionData: null,\n    correctedData: null,\n    scale: 1,\n    offsetX: 0,\n    offsetY: 0,\n    isDragging: false,\n    lastMouseX: 0,\n    lastMouseY: 0\n  },\n  limitConfiguration: { ...DEFAULT_LIMIT_CONFIGURATION },\n  folderSelection: {\n    folder: null,\n    analyzedFiles: [],\n    selectedFiles: [],\n    availableFiles: [],\n    currentFilter: 'all'\n  }\n};\n\n// ========================================================================\n// REDUCER\n// ========================================================================\n\nfunction appReducer(state: ApplicationState, action: AppAction): ApplicationState {\n  switch (action.type) {\n    case 'SET_MODE':\n      return {\n        ...state,\n        currentMode: action.payload\n      };\n\n    case 'SET_LAYOUT':\n      return {\n        ...state,\n        currentLayout: action.payload\n      };\n\n    case 'SET_CSV_MODE':\n      return {\n        ...state,\n        currentCsvMode: action.payload\n      };\n\n    case 'SWITCH_PAGE':\n      return {\n        ...state,\n        currentPageId: action.payload\n      };\n\n    case 'ADD_PAGE':\n      const newPages = new Map(state.pages);\n      newPages.set(action.payload.pageId, action.payload);\n      return {\n        ...state,\n        pages: newPages,\n        nextPageId: Math.max(state.nextPageId, action.payload.pageId + 1)\n      };\n\n    case 'REMOVE_PAGE':\n      const updatedPages = new Map(state.pages);\n      updatedPages.delete(action.payload);\n      \n      // If removing current page, switch to another page\n      let newCurrentPageId = state.currentPageId;\n      if (action.payload === state.currentPageId && updatedPages.size > 0) {\n        newCurrentPageId = Math.min(...Array.from(updatedPages.keys()));\n      }\n\n      return {\n        ...state,\n        pages: updatedPages,\n        currentPageId: newCurrentPageId\n      };\n\n    case 'UPDATE_PAGE_DATA':\n      const pageToUpdate = state.pages.get(action.payload.pageId);\n      if (!pageToUpdate) return state;\n\n      const updatedPageData = {\n        ...pageToUpdate,\n        ...action.payload.data,\n        lastModified: new Date()\n      };\n\n      const newPagesMap = new Map(state.pages);\n      newPagesMap.set(action.payload.pageId, updatedPageData);\n\n      return {\n        ...state,\n        pages: newPagesMap\n      };\n\n    case 'ADD_CSV_OVERLAY_DATASET':\n      return {\n        ...state,\n        csvOverlayState: {\n          ...state.csvOverlayState,\n          datasets: [...state.csvOverlayState.datasets, action.payload]\n        }\n      };\n\n    case 'REMOVE_CSV_OVERLAY_DATASET':\n      return {\n        ...state,\n        csvOverlayState: {\n          ...state.csvOverlayState,\n          datasets: state.csvOverlayState.datasets.filter(d => d.id !== action.payload)\n        }\n      };\n\n    case 'UPDATE_CSV_OVERLAY_DATASET':\n      return {\n        ...state,\n        csvOverlayState: {\n          ...state.csvOverlayState,\n          datasets: state.csvOverlayState.datasets.map(dataset =>\n            dataset.id === action.payload.id\n              ? { ...dataset, ...action.payload.data }\n              : dataset\n          )\n        }\n      };\n\n    case 'UPDATE_CSV_OVERLAY_STATE':\n      return {\n        ...state,\n        csvOverlayState: {\n          ...state.csvOverlayState,\n          ...action.payload\n        }\n      };\n\n    case 'UPDATE_CORRECTION_STATE':\n      return {\n        ...state,\n        correctionState: {\n          ...state.correctionState,\n          ...action.payload\n        }\n      };\n\n    case 'UPDATE_FOLDER_SELECTION':\n      return {\n        ...state,\n        folderSelection: {\n          ...state.folderSelection,\n          ...action.payload\n        }\n      };\n\n    case 'UPDATE_LIMIT_CONFIGURATION':\n      return {\n        ...state,\n        limitConfiguration: {\n          ...state.limitConfiguration,\n          ...action.payload\n        }\n      };\n\n    case 'RESET_APPLICATION_STATE':\n      return {\n        ...initialState,\n        pages: new Map([[1, createInitialPageData(1)]])\n      };\n\n    case 'LOAD_STATE_FROM_STORAGE':\n      return {\n        ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n\n// ========================================================================\n// CONTEXT INTERFACE\n// ========================================================================\n\ninterface AppContextType {\n  state: ApplicationState;\n  // Mode and Layout Actions\n  setMode: (mode: ApplicationMode) => void;\n  setLayout: (layout: LayoutType) => void;\n  setCsvMode: (mode: CsvMode) => void;\n  \n  // Page Management Actions\n  switchToPage: (pageId: number) => void;\n  addNewPage: () => number;\n  removePage: (pageId: number) => void;\n  updatePageData: (pageId: number, data: Partial<PageData>) => void;\n  getCurrentPage: () => PageData | undefined;\n  \n  // CSV Overlay Actions\n  addCsvOverlayDataset: (dataset: CsvOverlayDataset) => void;\n  removeCsvOverlayDataset: (id: string) => void;\n  updateCsvOverlayDataset: (id: string, data: Partial<CsvOverlayDataset>) => void;\n  updateCsvOverlayState: (state: Partial<typeof initialState.csvOverlayState>) => void;\n  \n  // EMI Correction Actions\n  updateCorrectionState: (state: Partial<EmiCorrectionState>) => void;\n  \n  // Folder Selection Actions\n  updateFolderSelection: (selection: Partial<FolderSelection>) => void;\n  \n  // Limit Configuration Actions\n  updateLimitConfiguration: (config: Partial<LimitConfiguration>) => void;\n  \n  // Utility Actions\n  resetApplicationState: () => void;\n  saveStateToStorage: () => void;\n  loadStateFromStorage: () => void;\n}\n\n// ========================================================================\n// CONTEXT CREATION\n// ========================================================================\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\n// ========================================================================\n// PROVIDER COMPONENT\n// ========================================================================\n\ninterface AppContextProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AppContextProvider: React.FC<AppContextProviderProps> = ({ children }) => {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  // ========================================================================\n  // ACTION CREATORS\n  // ========================================================================\n\n  const setMode = useCallback((mode: ApplicationMode) => {\n    dispatch({ type: 'SET_MODE', payload: mode });\n  }, []);\n\n  const setLayout = useCallback((layout: LayoutType) => {\n    dispatch({ type: 'SET_LAYOUT', payload: layout });\n  }, []);\n\n  const setCsvMode = useCallback((mode: CsvMode) => {\n    dispatch({ type: 'SET_CSV_MODE', payload: mode });\n  }, []);\n\n  const switchToPage = useCallback((pageId: number) => {\n    dispatch({ type: 'SWITCH_PAGE', payload: pageId });\n  }, []);\n\n  const addNewPage = useCallback((): number => {\n    const newPageData = createInitialPageData(state.nextPageId);\n    dispatch({ type: 'ADD_PAGE', payload: newPageData });\n    return state.nextPageId;\n  }, [state.nextPageId]);\n\n  const removePage = useCallback((pageId: number) => {\n    dispatch({ type: 'REMOVE_PAGE', payload: pageId });\n  }, []);\n\n  const updatePageData = useCallback((pageId: number, data: Partial<PageData>) => {\n    dispatch({ type: 'UPDATE_PAGE_DATA', payload: { pageId, data } });\n  }, []);\n\n  const getCurrentPage = useCallback((): PageData | undefined => {\n    return state.pages.get(state.currentPageId);\n  }, [state.pages, state.currentPageId]);\n\n  const addCsvOverlayDataset = useCallback((dataset: CsvOverlayDataset) => {\n    dispatch({ type: 'ADD_CSV_OVERLAY_DATASET', payload: dataset });\n  }, []);\n\n  const removeCsvOverlayDataset = useCallback((id: string) => {\n    dispatch({ type: 'REMOVE_CSV_OVERLAY_DATASET', payload: id });\n  }, []);\n\n  const updateCsvOverlayDataset = useCallback((id: string, data: Partial<CsvOverlayDataset>) => {\n    dispatch({ type: 'UPDATE_CSV_OVERLAY_DATASET', payload: { id, data } });\n  }, []);\n\n  const updateCsvOverlayState = useCallback((overlayState: Partial<typeof initialState.csvOverlayState>) => {\n    dispatch({ type: 'UPDATE_CSV_OVERLAY_STATE', payload: overlayState });\n  }, []);\n\n  const updateCorrectionState = useCallback((correctionState: Partial<EmiCorrectionState>) => {\n    dispatch({ type: 'UPDATE_CORRECTION_STATE', payload: correctionState });\n  }, []);\n\n  const updateFolderSelection = useCallback((selection: Partial<FolderSelection>) => {\n    dispatch({ type: 'UPDATE_FOLDER_SELECTION', payload: selection });\n  }, []);\n\n  const updateLimitConfiguration = useCallback((config: Partial<LimitConfiguration>) => {\n    dispatch({ type: 'UPDATE_LIMIT_CONFIGURATION', payload: config });\n  }, []);\n\n  const resetApplicationState = useCallback(() => {\n    dispatch({ type: 'RESET_APPLICATION_STATE' });\n  }, []);\n\n  // ========================================================================\n  // PERSISTENCE FUNCTIONS\n  // ========================================================================\n\n  const saveStateToStorage = useCallback(() => {\n    try {\n      const stateToSave = {\n        currentMode: state.currentMode,\n        currentLayout: state.currentLayout,\n        currentCsvMode: state.currentCsvMode,\n        limitConfiguration: state.limitConfiguration,\n        folderSelection: {\n          ...state.folderSelection,\n          folder: null // Don't persist FileList\n        }\n      };\n      localStorage.setItem(STORAGE_KEYS.APPLICATION_STATE, JSON.stringify(stateToSave));\n    } catch (error) {\n      console.warn('Failed to save application state to localStorage:', error);\n    }\n  }, [state]);\n\n  const loadStateFromStorage = useCallback(() => {\n    try {\n      const savedState = localStorage.getItem(STORAGE_KEYS.APPLICATION_STATE);\n      if (savedState) {\n        const parsedState = JSON.parse(savedState);\n        dispatch({ type: 'LOAD_STATE_FROM_STORAGE', payload: parsedState });\n      }\n    } catch (error) {\n      console.warn('Failed to load application state from localStorage:', error);\n    }\n  }, []);\n\n  // ========================================================================\n  // EFFECTS\n  // ========================================================================\n\n  // Load state from localStorage on mount\n  useEffect(() => {\n    loadStateFromStorage();\n  }, [loadStateFromStorage]);\n\n  // Auto-save state changes to localStorage\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      saveStateToStorage();\n    }, 1000); // Debounce saves by 1 second\n\n    return () => clearTimeout(timeoutId);\n  }, [state, saveStateToStorage]);\n\n  // ========================================================================\n  // CONTEXT VALUE\n  // ========================================================================\n\n  const contextValue: AppContextType = {\n    state,\n    setMode,\n    setLayout,\n    setCsvMode,\n    switchToPage,\n    addNewPage,\n    removePage,\n    updatePageData,\n    getCurrentPage,\n    addCsvOverlayDataset,\n    removeCsvOverlayDataset,\n    updateCsvOverlayDataset,\n    updateCsvOverlayState,\n    updateCorrectionState,\n    updateFolderSelection,\n    updateLimitConfiguration,\n    resetApplicationState,\n    saveStateToStorage,\n    loadStateFromStorage\n  };\n\n  return (\n    <AppContext.Provider value={contextValue}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\n// ========================================================================\n// CUSTOM HOOK\n// ========================================================================\n\nexport const useAppContext = (): AppContextType => {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppContextProvider');\n  }\n  return context;\n};\n\n// ========================================================================\n// CONVENIENCE HOOKS\n// ========================================================================\n\nexport const useCurrentPage = () => {\n  const { getCurrentPage } = useAppContext();\n  return getCurrentPage();\n};\n\nexport const useCurrentMode = () => {\n  const { state } = useAppContext();\n  return state.currentMode;\n};\n\nexport const useCsvOverlayState = () => {\n  const { state, updateCsvOverlayState } = useAppContext();\n  return {\n    csvOverlayState: state.csvOverlayState,\n    updateCsvOverlayState\n  };\n};\n\nexport const useCorrectionState = () => {\n  const { state, updateCorrectionState } = useAppContext();\n  return {\n    correctionState: state.correctionState,\n    updateCorrectionState\n  };\n};\n\nexport const useLimitConfiguration = () => {\n  const { state, updateLimitConfiguration } = useAppContext();\n  return {\n    limitConfiguration: state.limitConfiguration,\n    updateLimitConfiguration\n  };\n};\n\nexport const useFolderSelection = () => {\n  const { state, updateFolderSelection } = useAppContext();\n  return {\n    folderSelection: state.folderSelection,\n    updateFolderSelection\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}