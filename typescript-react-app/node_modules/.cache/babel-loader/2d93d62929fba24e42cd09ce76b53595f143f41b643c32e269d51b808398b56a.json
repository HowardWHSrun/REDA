{"ast":null,"code":"var _jsxFileName = \"/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/src/components/ModeSelector/ModeSelector.tsx\",\n  _s = $RefreshSig$();\n// ========================================================================\n// REDA EMC Testing Tool - Mode Selector Component\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Mode selection tabs for switching between CSV, Image, and Correction modes\n// ========================================================================\n\nimport React from 'react';\nimport { useAppContext } from '../../context/AppContext';\nimport './ModeSelector.css';\n\n// ========================================================================\n// MODE CONFIGURATION\n// ========================================================================\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MODE_CONFIGS = [{\n  mode: 'csv',\n  icon: 'ðŸ“Š',\n  text: 'CSV Data Files',\n  subtitle: 'Spectrum Analysis',\n  description: 'Analyze and compare EMC spectrum data from CSV files'\n}, {\n  mode: 'images',\n  icon: 'ðŸ“·',\n  text: 'Image Files',\n  subtitle: 'Visual Documentation',\n  description: 'Annotate and export EMC test images'\n}, {\n  mode: 'correction',\n  icon: 'âš¡',\n  text: 'EMI Correction',\n  subtitle: 'Data Correction',\n  description: 'Apply PCEP corrections to measurement data'\n}];\n\n// ========================================================================\n// MODE SELECTOR COMPONENT\n// ========================================================================\n\nexport const ModeSelector = () => {\n  _s();\n  const {\n    state,\n    setMode\n  } = useAppContext();\n  const currentMode = state.currentMode;\n  const handleModeChange = mode => {\n    setMode(mode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mode-selector\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mode-tabs\",\n      children: MODE_CONFIGS.map(config => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `mode-tab ${config.mode}-mode ${currentMode === config.mode ? 'active' : ''}`,\n        onClick: () => handleModeChange(config.mode),\n        title: config.description,\n        \"data-mode\": config.mode,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mode-icon\",\n          children: config.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mode-text\",\n          children: config.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mode-subtitle\",\n          children: config.subtitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, config.mode, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(ModeSelector, \"pTxvebA/jVUvdUmBrEKuuBCP/Js=\", false, function () {\n  return [useAppContext];\n});\n_c = ModeSelector;\nexport default ModeSelector;\nvar _c;\n$RefreshReg$(_c, \"ModeSelector\");","map":{"version":3,"names":["React","useAppContext","jsxDEV","_jsxDEV","MODE_CONFIGS","mode","icon","text","subtitle","description","ModeSelector","_s","state","setMode","currentMode","handleModeChange","className","children","map","config","onClick","title","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/src/components/ModeSelector/ModeSelector.tsx"],"sourcesContent":["// ========================================================================\n// REDA EMC Testing Tool - Mode Selector Component\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Mode selection tabs for switching between CSV, Image, and Correction modes\n// ========================================================================\n\nimport React from 'react';\nimport { useAppContext } from '../../context/AppContext';\nimport { ApplicationMode } from '../../types';\nimport './ModeSelector.css';\n\n// ========================================================================\n// MODE CONFIGURATION\n// ========================================================================\n\ninterface ModeConfig {\n  mode: ApplicationMode;\n  icon: string;\n  text: string;\n  subtitle: string;\n  description: string;\n}\n\nconst MODE_CONFIGS: ModeConfig[] = [\n  {\n    mode: 'csv',\n    icon: 'ðŸ“Š',\n    text: 'CSV Data Files',\n    subtitle: 'Spectrum Analysis',\n    description: 'Analyze and compare EMC spectrum data from CSV files'\n  },\n  {\n    mode: 'images',\n    icon: 'ðŸ“·',\n    text: 'Image Files',\n    subtitle: 'Visual Documentation',\n    description: 'Annotate and export EMC test images'\n  },\n  {\n    mode: 'correction',\n    icon: 'âš¡',\n    text: 'EMI Correction',\n    subtitle: 'Data Correction',\n    description: 'Apply PCEP corrections to measurement data'\n  }\n];\n\n// ========================================================================\n// MODE SELECTOR COMPONENT\n// ========================================================================\n\nexport const ModeSelector: React.FC = () => {\n  const { state, setMode } = useAppContext();\n  const currentMode = state.currentMode;\n\n  const handleModeChange = (mode: ApplicationMode) => {\n    setMode(mode);\n  };\n\n  return (\n    <div className=\"mode-selector\">\n      <div className=\"mode-tabs\">\n        {MODE_CONFIGS.map((config) => (\n          <button\n            key={config.mode}\n            className={`mode-tab ${config.mode}-mode ${currentMode === config.mode ? 'active' : ''}`}\n            onClick={() => handleModeChange(config.mode)}\n            title={config.description}\n            data-mode={config.mode}\n          >\n            <span className=\"mode-icon\">{config.icon}</span>\n            <span className=\"mode-text\">{config.text}</span>\n            <span className=\"mode-subtitle\">{config.subtitle}</span>\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ModeSelector; "],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,QAAQ,0BAA0B;AAExD,OAAO,oBAAoB;;AAE3B;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAUA,MAAMC,YAA0B,GAAG,CACjC;EACEC,IAAI,EAAE,KAAK;EACXC,IAAI,EAAE,IAAI;EACVC,IAAI,EAAE,gBAAgB;EACtBC,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE;AACf,CAAC,EACD;EACEJ,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,IAAI;EACVC,IAAI,EAAE,aAAa;EACnBC,QAAQ,EAAE,sBAAsB;EAChCC,WAAW,EAAE;AACf,CAAC,EACD;EACEJ,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,gBAAgB;EACtBC,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE;AACf,CAAC,CACF;;AAED;AACA;AACA;;AAEA,OAAO,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1C,MAAM;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGZ,aAAa,CAAC,CAAC;EAC1C,MAAMa,WAAW,GAAGF,KAAK,CAACE,WAAW;EAErC,MAAMC,gBAAgB,GAAIV,IAAqB,IAAK;IAClDQ,OAAO,CAACR,IAAI,CAAC;EACf,CAAC;EAED,oBACEF,OAAA;IAAKa,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC5Bd,OAAA;MAAKa,SAAS,EAAC,WAAW;MAAAC,QAAA,EACvBb,YAAY,CAACc,GAAG,CAAEC,MAAM,iBACvBhB,OAAA;QAEEa,SAAS,EAAE,YAAYG,MAAM,CAACd,IAAI,SAASS,WAAW,KAAKK,MAAM,CAACd,IAAI,GAAG,QAAQ,GAAG,EAAE,EAAG;QACzFe,OAAO,EAAEA,CAAA,KAAML,gBAAgB,CAACI,MAAM,CAACd,IAAI,CAAE;QAC7CgB,KAAK,EAAEF,MAAM,CAACV,WAAY;QAC1B,aAAWU,MAAM,CAACd,IAAK;QAAAY,QAAA,gBAEvBd,OAAA;UAAMa,SAAS,EAAC,WAAW;UAAAC,QAAA,EAAEE,MAAM,CAACb;QAAI;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAChDtB,OAAA;UAAMa,SAAS,EAAC,WAAW;UAAAC,QAAA,EAAEE,MAAM,CAACZ;QAAI;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAChDtB,OAAA;UAAMa,SAAS,EAAC,eAAe;UAAAC,QAAA,EAAEE,MAAM,CAACX;QAAQ;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA,GARnDN,MAAM,CAACd,IAAI;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASV,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACd,EAAA,CA3BWD,YAAsB;EAAA,QACNT,aAAa;AAAA;AAAAyB,EAAA,GAD7BhB,YAAsB;AA6BnC,eAAeA,YAAY;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}