{"ast":null,"code":"var _jsxFileName = \"/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/src/components/FolderBrowser/FolderBrowser.tsx\",\n  _s = $RefreshSig$();\n// ========================================================================\n// REDA EMC Testing Tool - Folder Browser Component\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Folder navigation component for browsing and selecting files\n// ========================================================================\n\nimport React, { useState, useCallback } from 'react';\nimport { CsvService } from '../../services/CsvService';\nimport { NoiseAnalysisService } from '../../services/NoiseAnalysisService';\nimport { BAND_DEFINITIONS } from '../../constants';\nimport './FolderBrowser.css';\n\n// ========================================================================\n// INTERFACES\n// ========================================================================\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// ========================================================================\n// FOLDER BROWSER COMPONENT\n// ========================================================================\n\nexport const FolderBrowser = ({\n  panelId,\n  title,\n  maxFiles = 8,\n  onFilesSelected\n}) => {\n  _s();\n  const [currentPath, setCurrentPath] = useState('');\n  const [folderContents, setFolderContents] = useState([]);\n  const [filteredContents, setFilteredContents] = useState([]);\n  const [selectedFiles, setSelectedFiles] = useState(new Set());\n  const [selectedBands, setSelectedBands] = useState(new Set());\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [selectedBandFilter, setSelectedBandFilter] = useState('all');\n  const [sortBy, setSortBy] = useState('noisiness');\n  const [isAnalyzingNoise, setIsAnalyzingNoise] = useState(false);\n\n  // ========================================================================\n  // NOISINESS ANALYSIS\n  // ========================================================================\n\n  const batchAnalyzeNoisiness = useCallback(async items => {\n    const csvFiles = items.filter(item => item.isCSV && item.fileHandle);\n    if (csvFiles.length === 0) return;\n    setIsAnalyzingNoise(true);\n    console.log(`🔊 Analyzing band-relative noisiness for ${csvFiles.length} CSV files...`);\n\n    // Parse all CSV files first\n    const filesData = [];\n    for (const item of csvFiles) {\n      try {\n        const file = await item.fileHandle.getFile();\n        const parseResult = await CsvService.parseCsvFile(file);\n        if (parseResult.success && parseResult.data) {\n          // Detect band from frequency data if not already detected\n          let detectedBand = item.detectedBand;\n          if (!detectedBand) {\n            const frequencies = parseResult.data.map(point => point.frequency / 1e6);\n            const minFreq = Math.min(...frequencies);\n            const maxFreq = Math.max(...frequencies);\n            detectedBand = CsvService.detectBandFromFrequencyRange(minFreq, maxFreq);\n          }\n          filesData.push({\n            filename: item.name,\n            data: parseResult.data,\n            band: detectedBand || 'Unknown',\n            item\n          });\n        }\n      } catch (error) {\n        console.warn(`Failed to parse ${item.name}:`, error);\n      }\n    }\n    if (filesData.length === 0) {\n      setIsAnalyzingNoise(false);\n      return;\n    }\n\n    // Use band-relative noisiness analysis\n    const analyses = NoiseAnalysisService.calculateBandRelativeNoisiness(filesData);\n\n    // Update items with analysis results\n    const updatedItems = [...items];\n    analyses.forEach(analysis => {\n      const fileData = filesData.find(fd => fd.filename === analysis.filename);\n      if (fileData) {\n        const itemIndex = updatedItems.findIndex(ui => ui.path === fileData.item.path);\n        if (itemIndex >= 0) {\n          updatedItems[itemIndex] = {\n            ...updatedItems[itemIndex],\n            noisinessAnalysis: analysis,\n            detectedBand: fileData.band // Update band if it was detected\n          };\n        }\n      }\n    });\n    setFolderContents(updatedItems);\n    setIsAnalyzingNoise(false);\n    console.log(`✅ Band-relative noisiness analysis complete for ${csvFiles.length} files`);\n    console.log(`📊 Results: Files now ranked 1-10 within their respective bands (1=quietest, 10=noisiest)`);\n  }, []);\n\n  // ========================================================================\n  // FILTERING AND BAND DETECTION\n  // ========================================================================\n\n  const applyFilters = useCallback(allItems => {\n    let filtered = [...allItems];\n\n    // Band filter (only CSV files, no folders to worry about)\n    if (selectedBandFilter !== 'all') {\n      filtered = filtered.filter(item => item.detectedBand === selectedBandFilter);\n    }\n\n    // Sort\n    filtered.sort((a, b) => {\n      if (sortBy === 'noisiness') {\n        var _a$noisinessAnalysis, _b$noisinessAnalysis;\n        const aNoise = ((_a$noisinessAnalysis = a.noisinessAnalysis) === null || _a$noisinessAnalysis === void 0 ? void 0 : _a$noisinessAnalysis.noisinessIndex) || 0;\n        const bNoise = ((_b$noisinessAnalysis = b.noisinessAnalysis) === null || _b$noisinessAnalysis === void 0 ? void 0 : _b$noisinessAnalysis.noisinessIndex) || 0;\n        return bNoise - aNoise; // Highest first\n      }\n      if (sortBy === 'band') {\n        const aBand = a.detectedBand || 'ZZ'; // Put unknown at end\n        const bBand = b.detectedBand || 'ZZ';\n        return aBand.localeCompare(bBand);\n      }\n\n      // Default: sort by name\n      return a.name.localeCompare(b.name);\n    });\n    setFilteredContents(filtered);\n  }, [selectedBandFilter, sortBy]);\n\n  // Apply filters whenever band filter, sort option, or folder contents change\n  React.useEffect(() => {\n    applyFilters(folderContents);\n  }, [folderContents, selectedBandFilter, sortBy, applyFilters]);\n\n  // ========================================================================\n  // FOLDER NAVIGATION\n  // ========================================================================\n\n  const loadFolderContents = useCallback(async dirHandle => {\n    setIsLoading(true);\n    setError('');\n    const items = [];\n    try {\n      for await (const [name, handle] of dirHandle.entries()) {\n        // Only process files, skip folders\n        if (handle.kind !== 'file') {\n          continue;\n        }\n\n        // Only include CSV files\n        const isCSV = CsvService.isValidCsvFile({\n          name\n        });\n        if (!isCSV) {\n          continue;\n        }\n        const item = {\n          name,\n          path: name,\n          // Simplified - just the filename\n          type: 'file',\n          isCSV: true,\n          fileHandle: handle\n        };\n        try {\n          const file = await handle.getFile();\n          item.size = file.size;\n          item.modified = new Date(file.lastModified);\n\n          // Detect band for CSV files\n          const bandFromFilename = CsvService.detectBandFromFilename(name);\n          if (bandFromFilename) {\n            item.detectedBand = bandFromFilename;\n            item.bandConfidence = 'high';\n          } else {\n            item.detectedBand = null;\n            item.bandConfidence = 'low';\n          }\n        } catch (err) {\n          // Skip files we can't access\n          continue;\n        }\n        items.push(item);\n      }\n\n      // Simple alphabetical sort\n      items.sort((a, b) => a.name.localeCompare(b.name));\n      setFolderContents(items);\n      setFilteredContents(items); // No filtering needed initially\n\n      // Start noisiness analysis for CSV files in the background\n      setTimeout(() => batchAnalyzeNoisiness(items), 100);\n    } catch (error) {\n      setError('Failed to read folder contents.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [batchAnalyzeNoisiness]);\n  const loadFolderContentsFromFiles = useCallback(files => {\n    setIsLoading(true);\n    setError('');\n    const items = [];\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n\n      // Only include CSV files\n      const isCSV = CsvService.isValidCsvFile(file);\n      if (!isCSV) {\n        continue;\n      }\n      const item = {\n        name: file.name,\n        path: file.name,\n        // Simplified - just the filename\n        type: 'file',\n        size: file.size,\n        modified: new Date(file.lastModified),\n        isCSV: true\n      };\n\n      // Detect band for CSV files\n      const bandFromFilename = CsvService.detectBandFromFilename(file.name);\n      if (bandFromFilename) {\n        item.detectedBand = bandFromFilename;\n        item.bandConfidence = 'high';\n      } else {\n        item.detectedBand = null;\n        item.bandConfidence = 'low';\n      }\n      items.push(item);\n    }\n\n    // Simple alphabetical sort\n    items.sort((a, b) => a.name.localeCompare(b.name));\n    setFolderContents(items);\n    setFilteredContents(items); // No filtering needed initially\n    setIsLoading(false);\n  }, []);\n  const openFolderDialog = useCallback(async () => {\n    try {\n      // Use the File System Access API for modern browsers\n      if ('showDirectoryPicker' in window) {\n        const dirHandle = await window.showDirectoryPicker();\n        const path = dirHandle.name;\n        setCurrentPath(path);\n        await loadFolderContents(dirHandle);\n      } else {\n        // Fallback: use input element\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.webkitdirectory = true;\n        input.multiple = true;\n        input.onchange = e => {\n          const files = e.target.files;\n          if (files && files.length > 0) {\n            const firstFile = files[0];\n            const pathParts = firstFile.webkitRelativePath.split('/');\n            const folderName = pathParts[0];\n            setCurrentPath(folderName);\n            loadFolderContentsFromFiles(files);\n          }\n        };\n        input.click();\n      }\n    } catch (error) {\n      if (error.name !== 'AbortError') {\n        setError('Failed to open folder. Please try again.');\n      }\n    }\n  }, [loadFolderContents, loadFolderContentsFromFiles]);\n\n  // ========================================================================\n  // FILE SELECTION\n  // ========================================================================\n\n  const toggleFileSelection = useCallback((path, itemBand) => {\n    setSelectedFiles(prev => {\n      const newSelection = new Set();\n      let updatedBands = new Set();\n      if (prev.has(path)) {\n        // Deselecting the currently selected file - clear everything\n        newSelection.clear();\n        updatedBands.clear();\n        setSelectedBands(updatedBands);\n        console.log(`🗑️ Deselected file: ${path}`);\n      } else {\n        // Selecting a new file - replace any previous selection\n        newSelection.clear(); // Clear any previous selections\n        newSelection.add(path); // Add only the new file\n\n        // Update bands for the new selection\n        updatedBands.clear();\n        if (itemBand) {\n          updatedBands.add(itemBand);\n          setSelectedBands(updatedBands);\n          console.log(`🔄 Selected new file: ${path} (${itemBand} band) - replacing any previous selection`);\n        } else {\n          setSelectedBands(updatedBands);\n          console.log(`🔄 Selected new file: ${path} (Unknown band) - replacing any previous selection`);\n        }\n        setError(''); // Clear any previous errors\n      }\n\n      // Always trigger file loading when selection changes (including when clearing)\n      setTimeout(() => {\n        const selectedItems = filteredContents.filter(item => newSelection.has(item.path) && item.type === 'file' && item.isCSV);\n\n        // Always call the callback, even when no files are selected (to clear the plot)\n        if (onFilesSelected) {\n          onFilesSelected(selectedItems);\n        }\n      }, 100); // Small delay to ensure state updates are complete\n\n      return newSelection;\n    });\n  }, [filteredContents, onFilesSelected]);\n\n  // ========================================================================\n  // CLEAR SELECTION\n  // ========================================================================\n\n  const clearSelection = useCallback(() => {\n    setSelectedFiles(new Set());\n    setSelectedBands(new Set());\n    setError('');\n\n    // Notify parent that no files are selected\n    if (onFilesSelected) {\n      onFilesSelected([]);\n    }\n  }, [onFilesSelected]);\n\n  // ========================================================================\n  // RENDER HELPERS\n  // ========================================================================\n\n  const renderPathBreadcrumb = () => {\n    if (!currentPath) return null;\n    const pathParts = currentPath.split('/');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"path-breadcrumb\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPath(''),\n        className: \"breadcrumb-item root\",\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), pathParts.map((part, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"breadcrumb-separator\",\n          children: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"breadcrumb-item\",\n          children: part\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this);\n  };\n  const renderFolderItem = item => {\n    const isSelected = selectedFiles.has(item.path);\n    // All items are CSV files now\n    const isSelectable = true;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `folder-item file ${isSelected ? 'selected' : ''} selectable`,\n      onClick: () => toggleFileSelection(item.path, item.detectedBand),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-name\",\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-meta\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"band-info\",\n            children: [item.detectedBand && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `band-indicator ${item.bandConfidence}`,\n              children: item.detectedBand\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 17\n            }, this), !item.detectedBand && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"band-indicator unknown\",\n              children: \"Unknown\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 13\n          }, this), item.noisinessAnalysis && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"noisiness-info\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"noisiness-indicator\",\n              style: {\n                color: NoiseAnalysisService.getNoisinessColor(item.noisinessAnalysis.noisinessIndex)\n              },\n              title: `Noisiness: ${item.noisinessAnalysis.noisinessIndex}/10 (${NoiseAnalysisService.getNoisinessDescription(item.noisinessAnalysis.noisinessIndex)})`,\n              children: item.noisinessAnalysis.noisinessIndex\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 15\n          }, this), !item.noisinessAnalysis && isAnalyzingNoise && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"noisiness-info\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"noisiness-loading\",\n              children: \"...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selection-indicator\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isSelected,\n          onChange: () => toggleFileSelection(item.path, item.detectedBand),\n          onClick: e => e.stopPropagation()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this)]\n    }, item.path, true, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }, this);\n  };\n\n  // ========================================================================\n  // MAIN RENDER\n  // ========================================================================\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"folder-browser\",\n    \"data-panel-id\": panelId,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"browser-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        onClick: !isLoading ? openFolderDialog : undefined,\n        style: {\n          cursor: !isLoading ? 'pointer' : 'default',\n          userSelect: 'none',\n          color: !currentPath ? '#3498db' : 'inherit'\n        },\n        title: !currentPath ? 'Click to open folder' : `Click to change folder (${currentPath})`,\n        children: [title, currentPath ? ` - ${currentPath}` : ' (Click here to open folder)']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"browser-controls\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: openFolderDialog,\n          className: \"open-folder-btn\",\n          disabled: isLoading,\n          children: currentPath ? 'Change Folder' : 'Open Folder'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 11\n    }, this), currentPath && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `band-filter-${panelId}`,\n            className: \"filter-label\",\n            children: \"Band Filter:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: `band-filter-${panelId}`,\n            value: selectedBandFilter,\n            onChange: e => {\n              setSelectedBandFilter(e.target.value);\n              applyFilters(folderContents);\n            },\n            className: \"band-filter-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"all\",\n              children: \"All Bands\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 17\n            }, this), Object.entries(BAND_DEFINITIONS).map(([bandType, definition]) => {\n              const count = folderContents.filter(item => item.detectedBand === bandType).length;\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: bandType,\n                children: [bandType, \": \", definition.range, \" (\", count, \" files)\"]\n              }, bandType, true, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `sort-filter-${panelId}`,\n            className: \"filter-label\",\n            children: \"Sort by:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: `sort-filter-${panelId}`,\n            value: sortBy,\n            onChange: e => {\n              setSortBy(e.target.value);\n              applyFilters(folderContents);\n            },\n            className: \"sort-filter-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"noisiness\",\n              children: \"Noisiness (High\\u2192Low)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 541,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"band\",\n              children: \"Band\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 542,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"name\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-section\",\n          children: [isAnalyzingNoise && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"analysis-status\",\n            children: \"Analyzing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: clearSelection,\n            disabled: selectedFiles.size === 0,\n            className: \"clear-all-btn\",\n            children: selectedFiles.size > 0 ? 'Clear Selection' : 'Clear All'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 11\n      }, this)\n    }, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-contents\",\n      children: !currentPath ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-icon\",\n          children: \"Open Folder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Click \\\"Open Folder\\\" to browse and select CSV files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 11\n      }, this) : isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading folder contents...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 11\n      }, this) : filteredContents.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-folder\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-icon\",\n          children: \"Empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: selectedBandFilter !== 'all' ? `No CSV files found for band ${selectedBandFilter}` : 'This folder is empty'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 13\n        }, this), selectedBandFilter !== 'all' && folderContents.length > 0 && /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Try selecting \\\"All Bands\\\" to see all files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"items-list\",\n        children: filteredContents.map(renderFolderItem)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 467,\n    columnNumber: 5\n  }, this);\n};\n_s(FolderBrowser, \"Yksl8ww0FiQnzwru09i1e8c7Ghs=\");\n_c = FolderBrowser;\nexport default FolderBrowser;\nvar _c;\n$RefreshReg$(_c, \"FolderBrowser\");","map":{"version":3,"names":["React","useState","useCallback","CsvService","NoiseAnalysisService","BAND_DEFINITIONS","jsxDEV","_jsxDEV","Fragment","_Fragment","FolderBrowser","panelId","title","maxFiles","onFilesSelected","_s","currentPath","setCurrentPath","folderContents","setFolderContents","filteredContents","setFilteredContents","selectedFiles","setSelectedFiles","Set","selectedBands","setSelectedBands","isLoading","setIsLoading","error","setError","selectedBandFilter","setSelectedBandFilter","sortBy","setSortBy","isAnalyzingNoise","setIsAnalyzingNoise","batchAnalyzeNoisiness","items","csvFiles","filter","item","isCSV","fileHandle","length","console","log","filesData","file","getFile","parseResult","parseCsvFile","success","data","detectedBand","frequencies","map","point","frequency","minFreq","Math","min","maxFreq","max","detectBandFromFrequencyRange","push","filename","name","band","warn","analyses","calculateBandRelativeNoisiness","updatedItems","forEach","analysis","fileData","find","fd","itemIndex","findIndex","ui","path","noisinessAnalysis","applyFilters","allItems","filtered","sort","a","b","_a$noisinessAnalysis","_b$noisinessAnalysis","aNoise","noisinessIndex","bNoise","aBand","bBand","localeCompare","useEffect","loadFolderContents","dirHandle","handle","entries","kind","isValidCsvFile","type","size","modified","Date","lastModified","bandFromFilename","detectBandFromFilename","bandConfidence","err","setTimeout","loadFolderContentsFromFiles","files","i","openFolderDialog","window","showDirectoryPicker","input","document","createElement","webkitdirectory","multiple","onchange","e","target","firstFile","pathParts","webkitRelativePath","split","folderName","click","toggleFileSelection","itemBand","prev","newSelection","updatedBands","has","clear","add","selectedItems","clearSelection","renderPathBreadcrumb","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","part","index","renderFolderItem","isSelected","isSelectable","style","color","getNoisinessColor","getNoisinessDescription","checked","onChange","stopPropagation","undefined","cursor","userSelect","disabled","htmlFor","id","value","Object","bandType","definition","count","range","_c","$RefreshReg$"],"sources":["/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/src/components/FolderBrowser/FolderBrowser.tsx"],"sourcesContent":["// ========================================================================\n// REDA EMC Testing Tool - Folder Browser Component\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Folder navigation component for browsing and selecting files\n// ========================================================================\n\nimport React, { useState, useCallback } from 'react';\nimport { CsvService } from '../../services/CsvService';\nimport { NoiseAnalysisService, NoiseAnalysisResult } from '../../services/NoiseAnalysisService';\nimport { BandType, CsvDataPoint } from '../../types';\nimport { BAND_DEFINITIONS } from '../../constants';\nimport './FolderBrowser.css';\n\n// ========================================================================\n// INTERFACES\n// ========================================================================\n\ninterface FolderItem {\n  name: string;\n  path: string;\n  type: 'file' | 'folder';\n  size?: number;\n  modified?: Date;\n  isCSV?: boolean;\n  detectedBand?: BandType | null;\n  bandConfidence?: 'high' | 'medium' | 'low';\n  fileHandle?: any; // File handle for File System Access API\n  noisinessAnalysis?: NoiseAnalysisResult; // Noisiness analysis data\n}\n\ninterface FolderBrowserProps {\n  panelId: string;\n  title: string;\n  maxFiles?: number;\n  onFilesSelected?: (files: FolderItem[]) => void;\n}\n\n// ========================================================================\n// FOLDER BROWSER COMPONENT\n// ========================================================================\n\nexport const FolderBrowser: React.FC<FolderBrowserProps> = ({\n  panelId,\n  title,\n  maxFiles = 8,\n  onFilesSelected\n}) => {\n  const [currentPath, setCurrentPath] = useState<string>('');\n  const [folderContents, setFolderContents] = useState<FolderItem[]>([]);\n  const [filteredContents, setFilteredContents] = useState<FolderItem[]>([]);\n  const [selectedFiles, setSelectedFiles] = useState<Set<string>>(new Set());\n  const [selectedBands, setSelectedBands] = useState<Set<BandType>>(new Set());\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const [selectedBandFilter, setSelectedBandFilter] = useState<BandType | 'all'>('all');\n  const [sortBy, setSortBy] = useState<'name' | 'noisiness' | 'band'>('noisiness');\n  const [isAnalyzingNoise, setIsAnalyzingNoise] = useState<boolean>(false);\n\n  // ========================================================================\n  // NOISINESS ANALYSIS\n  // ========================================================================\n\n  const batchAnalyzeNoisiness = useCallback(async (items: FolderItem[]) => {\n    const csvFiles = items.filter(item => item.isCSV && item.fileHandle);\n    if (csvFiles.length === 0) return;\n\n    setIsAnalyzingNoise(true);\n    console.log(`🔊 Analyzing band-relative noisiness for ${csvFiles.length} CSV files...`);\n\n    // Parse all CSV files first\n    const filesData: Array<{ filename: string; data: CsvDataPoint[]; band?: string; item: FolderItem }> = [];\n    \n    for (const item of csvFiles) {\n      try {\n        const file = await item.fileHandle!.getFile();\n        const parseResult = await CsvService.parseCsvFile(file);\n        \n        if (parseResult.success && parseResult.data) {\n          // Detect band from frequency data if not already detected\n          let detectedBand = item.detectedBand;\n          if (!detectedBand) {\n            const frequencies = parseResult.data.map(point => point.frequency / 1e6);\n            const minFreq = Math.min(...frequencies);\n            const maxFreq = Math.max(...frequencies);\n            detectedBand = CsvService.detectBandFromFrequencyRange(minFreq, maxFreq);\n          }\n          \n          filesData.push({\n            filename: item.name,\n            data: parseResult.data,\n            band: detectedBand || 'Unknown',\n            item\n          });\n        }\n      } catch (error) {\n        console.warn(`Failed to parse ${item.name}:`, error);\n      }\n    }\n    \n    if (filesData.length === 0) {\n      setIsAnalyzingNoise(false);\n      return;\n    }\n\n    // Use band-relative noisiness analysis\n    const analyses = NoiseAnalysisService.calculateBandRelativeNoisiness(filesData);\n    \n    // Update items with analysis results\n    const updatedItems = [...items];\n    analyses.forEach(analysis => {\n      const fileData = filesData.find(fd => fd.filename === analysis.filename);\n      if (fileData) {\n        const itemIndex = updatedItems.findIndex(ui => ui.path === fileData.item.path);\n        if (itemIndex >= 0) {\n          updatedItems[itemIndex] = { \n            ...updatedItems[itemIndex], \n            noisinessAnalysis: analysis,\n            detectedBand: fileData.band as any // Update band if it was detected\n          };\n        }\n      }\n    });\n    \n    setFolderContents(updatedItems);\n    setIsAnalyzingNoise(false);\n    \n    console.log(`✅ Band-relative noisiness analysis complete for ${csvFiles.length} files`);\n    console.log(`📊 Results: Files now ranked 1-10 within their respective bands (1=quietest, 10=noisiest)`);\n  }, []);\n\n  // ========================================================================\n  // FILTERING AND BAND DETECTION\n  // ========================================================================\n\n  const applyFilters = useCallback((allItems: FolderItem[]) => {\n    let filtered = [...allItems];\n    \n    // Band filter (only CSV files, no folders to worry about)\n    if (selectedBandFilter !== 'all') {\n      filtered = filtered.filter(item => item.detectedBand === selectedBandFilter);\n    }\n    \n    // Sort\n    filtered.sort((a, b) => {\n      if (sortBy === 'noisiness') {\n        const aNoise = a.noisinessAnalysis?.noisinessIndex || 0;\n        const bNoise = b.noisinessAnalysis?.noisinessIndex || 0;\n        return bNoise - aNoise; // Highest first\n      }\n      \n      if (sortBy === 'band') {\n        const aBand = a.detectedBand || 'ZZ'; // Put unknown at end\n        const bBand = b.detectedBand || 'ZZ';\n        return aBand.localeCompare(bBand);\n      }\n      \n      // Default: sort by name\n      return a.name.localeCompare(b.name);\n    });\n\n    setFilteredContents(filtered);\n  }, [selectedBandFilter, sortBy]);\n\n  // Apply filters whenever band filter, sort option, or folder contents change\n  React.useEffect(() => {\n    applyFilters(folderContents);\n  }, [folderContents, selectedBandFilter, sortBy, applyFilters]);\n\n  // ========================================================================\n  // FOLDER NAVIGATION\n  // ========================================================================\n\n  const loadFolderContents = useCallback(async (dirHandle: any) => {\n    setIsLoading(true);\n    setError('');\n    const items: FolderItem[] = [];\n\n    try {\n      for await (const [name, handle] of dirHandle.entries()) {\n        // Only process files, skip folders\n        if (handle.kind !== 'file') {\n          continue;\n        }\n        \n        // Only include CSV files\n        const isCSV = CsvService.isValidCsvFile({ name } as File);\n        if (!isCSV) {\n          continue;\n        }\n\n        const item: FolderItem = {\n          name,\n          path: name, // Simplified - just the filename\n          type: 'file',\n          isCSV: true,\n          fileHandle: handle\n        };\n\n        try {\n          const file = await handle.getFile();\n          item.size = file.size;\n          item.modified = new Date(file.lastModified);\n          \n          // Detect band for CSV files\n          const bandFromFilename = CsvService.detectBandFromFilename(name);\n          if (bandFromFilename) {\n            item.detectedBand = bandFromFilename;\n            item.bandConfidence = 'high';\n          } else {\n            item.detectedBand = null;\n            item.bandConfidence = 'low';\n          }\n        } catch (err) {\n          // Skip files we can't access\n          continue;\n        }\n\n        items.push(item);\n      }\n\n      // Simple alphabetical sort\n      items.sort((a, b) => a.name.localeCompare(b.name));\n\n      setFolderContents(items);\n      setFilteredContents(items); // No filtering needed initially\n      \n      // Start noisiness analysis for CSV files in the background\n      setTimeout(() => batchAnalyzeNoisiness(items), 100);\n    } catch (error) {\n      setError('Failed to read folder contents.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [batchAnalyzeNoisiness]);\n\n  const loadFolderContentsFromFiles = useCallback((files: FileList) => {\n    setIsLoading(true);\n    setError('');\n    const items: FolderItem[] = [];\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      \n      // Only include CSV files\n      const isCSV = CsvService.isValidCsvFile(file);\n      if (!isCSV) {\n        continue;\n      }\n\n      const item: FolderItem = {\n        name: file.name,\n        path: file.name, // Simplified - just the filename\n        type: 'file',\n        size: file.size,\n        modified: new Date(file.lastModified),\n        isCSV: true\n      };\n\n      // Detect band for CSV files\n      const bandFromFilename = CsvService.detectBandFromFilename(file.name);\n      if (bandFromFilename) {\n        item.detectedBand = bandFromFilename;\n        item.bandConfidence = 'high';\n      } else {\n        item.detectedBand = null;\n        item.bandConfidence = 'low';\n      }\n\n      items.push(item);\n    }\n\n    // Simple alphabetical sort\n    items.sort((a, b) => a.name.localeCompare(b.name));\n\n    setFolderContents(items);\n    setFilteredContents(items); // No filtering needed initially\n    setIsLoading(false);\n  }, []);\n\n  const openFolderDialog = useCallback(async () => {\n    try {\n      // Use the File System Access API for modern browsers\n      if ('showDirectoryPicker' in window) {\n        const dirHandle = await (window as any).showDirectoryPicker();\n        const path = dirHandle.name;\n        setCurrentPath(path);\n        await loadFolderContents(dirHandle);\n      } else {\n        // Fallback: use input element\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.webkitdirectory = true;\n        input.multiple = true;\n        \n        input.onchange = (e) => {\n          const files = (e.target as HTMLInputElement).files;\n          if (files && files.length > 0) {\n            const firstFile = files[0];\n            const pathParts = firstFile.webkitRelativePath.split('/');\n            const folderName = pathParts[0];\n            setCurrentPath(folderName);\n            loadFolderContentsFromFiles(files);\n          }\n        };\n        \n        input.click();\n      }\n    } catch (error) {\n      if ((error as Error).name !== 'AbortError') {\n        setError('Failed to open folder. Please try again.');\n      }\n    }\n  }, [loadFolderContents, loadFolderContentsFromFiles]);\n\n  // ========================================================================\n  // FILE SELECTION\n  // ========================================================================\n\n    const toggleFileSelection = useCallback((path: string, itemBand?: BandType | null) => {\n    setSelectedFiles(prev => {\n      const newSelection = new Set<string>();\n      let updatedBands = new Set<BandType>();\n      \n      if (prev.has(path)) {\n        // Deselecting the currently selected file - clear everything\n        newSelection.clear();\n        updatedBands.clear();\n            setSelectedBands(updatedBands);\n        console.log(`🗑️ Deselected file: ${path}`);\n      } else {\n        // Selecting a new file - replace any previous selection\n        newSelection.clear(); // Clear any previous selections\n        newSelection.add(path); // Add only the new file\n        \n        // Update bands for the new selection\n        updatedBands.clear();\n        if (itemBand) {\n          updatedBands.add(itemBand);\n          setSelectedBands(updatedBands);\n          console.log(`🔄 Selected new file: ${path} (${itemBand} band) - replacing any previous selection`);\n        } else {\n          setSelectedBands(updatedBands);\n          console.log(`🔄 Selected new file: ${path} (Unknown band) - replacing any previous selection`);\n        }\n        \n        setError(''); // Clear any previous errors\n      }\n\n      // Always trigger file loading when selection changes (including when clearing)\n      setTimeout(() => {\n        const selectedItems = filteredContents.filter(item => \n          newSelection.has(item.path) && item.type === 'file' && item.isCSV\n        );\n        \n        // Always call the callback, even when no files are selected (to clear the plot)\n        if (onFilesSelected) {\n          onFilesSelected(selectedItems);\n        }\n      }, 100); // Small delay to ensure state updates are complete\n      \n      return newSelection;\n    });\n  }, [filteredContents, onFilesSelected]);\n\n  // ========================================================================\n  // CLEAR SELECTION\n  // ========================================================================\n\n  const clearSelection = useCallback(() => {\n    setSelectedFiles(new Set());\n    setSelectedBands(new Set());\n    setError('');\n    \n    // Notify parent that no files are selected\n    if (onFilesSelected) {\n      onFilesSelected([]);\n    }\n  }, [onFilesSelected]);\n\n  // ========================================================================\n  // RENDER HELPERS\n  // ========================================================================\n\n  const renderPathBreadcrumb = () => {\n    if (!currentPath) return null;\n\n    const pathParts = currentPath.split('/');\n    \n    return (\n      <div className=\"path-breadcrumb\">\n        <button onClick={() => setCurrentPath('')} className=\"breadcrumb-item root\">\n          Home\n        </button>\n        {pathParts.map((part, index) => (\n          <React.Fragment key={index}>\n            <span className=\"breadcrumb-separator\">/</span>\n            <span className=\"breadcrumb-item\">{part}</span>\n          </React.Fragment>\n        ))}\n      </div>\n    );\n  };\n\n  const renderFolderItem = (item: FolderItem) => {\n    const isSelected = selectedFiles.has(item.path);\n    // All items are CSV files now\n    const isSelectable = true;\n\n    return (\n      <div\n        key={item.path}\n        className={`folder-item file ${isSelected ? 'selected' : ''} selectable`}\n        onClick={() => toggleFileSelection(item.path, item.detectedBand)}\n      >\n        <div className=\"item-details\">\n          <div className=\"item-name\">{item.name}</div>\n          <div className=\"item-meta\">\n            <div className=\"band-info\">\n              {item.detectedBand && (\n                <span className={`band-indicator ${item.bandConfidence}`}>\n                  {item.detectedBand}\n                </span>\n              )}\n              {!item.detectedBand && (\n                <span className=\"band-indicator unknown\">\n                  Unknown\n                </span>\n              )}\n            </div>\n            {item.noisinessAnalysis && (\n              <div className=\"noisiness-info\">\n                <span \n                  className=\"noisiness-indicator\"\n                  style={{ color: NoiseAnalysisService.getNoisinessColor(item.noisinessAnalysis.noisinessIndex) }}\n                  title={`Noisiness: ${item.noisinessAnalysis.noisinessIndex}/10 (${NoiseAnalysisService.getNoisinessDescription(item.noisinessAnalysis.noisinessIndex)})`}\n                >\n                  {item.noisinessAnalysis.noisinessIndex}\n                </span>\n              </div>\n            )}\n            {!item.noisinessAnalysis && isAnalyzingNoise && (\n              <div className=\"noisiness-info\">\n                <span className=\"noisiness-loading\">...</span>\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"selection-indicator\">\n          <input \n            type=\"checkbox\" \n            checked={isSelected} \n            onChange={() => toggleFileSelection(item.path, item.detectedBand)}\n            onClick={(e) => e.stopPropagation()}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  // ========================================================================\n  // MAIN RENDER\n  // ========================================================================\n\n  return (\n    <div className=\"folder-browser\" data-panel-id={panelId}>\n      <div className=\"browser-header\">\n        <h3 \n          onClick={!isLoading ? openFolderDialog : undefined}\n          style={{ \n            cursor: !isLoading ? 'pointer' : 'default',\n            userSelect: 'none',\n            color: !currentPath ? '#3498db' : 'inherit'\n          }}\n          title={!currentPath ? 'Click to open folder' : `Click to change folder (${currentPath})`}\n        >\n          {title}\n          {currentPath ? ` - ${currentPath}` : ' (Click here to open folder)'}\n        </h3>\n        <div className=\"browser-controls\">\n          <button \n            onClick={openFolderDialog}\n            className=\"open-folder-btn\"\n            disabled={isLoading}\n          >\n            {currentPath ? 'Change Folder' : 'Open Folder'}\n          </button>\n        </div>\n      </div>\n\n              {error && (\n          <div className=\"error-message\">\n            {error}\n          </div>\n        )}\n\n      {currentPath && (\n        <>\n          {/* {renderPathBreadcrumb()} - Removed for cleaner UI */}\n          \n          {/* Filter and Sort Controls */}\n          <div className=\"filter-controls\">\n            <div className=\"filter-section\">\n              <label htmlFor={`band-filter-${panelId}`} className=\"filter-label\">\n                Band Filter:\n              </label>\n              <select\n                id={`band-filter-${panelId}`}\n                value={selectedBandFilter}\n                onChange={(e) => {\n                  setSelectedBandFilter(e.target.value as BandType | 'all');\n                  applyFilters(folderContents);\n                }}\n                className=\"band-filter-select\"\n              >\n                <option value=\"all\">All Bands</option>\n                {Object.entries(BAND_DEFINITIONS).map(([bandType, definition]) => {\n                  const count = folderContents.filter(item => item.detectedBand === bandType).length;\n                  return (\n                    <option key={bandType} value={bandType}>\n                      {bandType}: {definition.range} ({count} files)\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n            <div className=\"filter-section\">\n              <label htmlFor={`sort-filter-${panelId}`} className=\"filter-label\">\n                Sort by:\n              </label>\n              <select\n                id={`sort-filter-${panelId}`}\n                value={sortBy}\n                onChange={(e) => {\n                  setSortBy(e.target.value as 'name' | 'noisiness' | 'band');\n                  applyFilters(folderContents);\n                }}\n                className=\"sort-filter-select\"\n              >\n                <option value=\"noisiness\">Noisiness (High→Low)</option>\n                <option value=\"band\">Band</option>\n                <option value=\"name\">Name</option>\n              </select>\n            </div>\n            <div className=\"action-section\">\n              {isAnalyzingNoise && (\n                <span className=\"analysis-status\">\n                  Analyzing...\n                </span>\n              )}\n              <button \n                onClick={clearSelection}\n                disabled={selectedFiles.size === 0}\n                className=\"clear-all-btn\"\n              >\n                {selectedFiles.size > 0 ? 'Clear Selection' : 'Clear All'}\n              </button>\n            </div>\n          </div>\n        </>\n      )}\n\n      <div className=\"folder-contents\">\n        {!currentPath ? (\n          <div className=\"empty-state\">\n            <div className=\"empty-icon\">Open Folder</div>\n            <p>Click \"Open Folder\" to browse and select CSV files</p>\n          </div>\n        ) : isLoading ? (\n          <div className=\"loading-state\">\n            <div className=\"spinner\">Loading...</div>\n            <p>Loading folder contents...</p>\n          </div>\n        ) : filteredContents.length === 0 ? (\n          <div className=\"empty-folder\">\n            <div className=\"empty-icon\">Empty</div>\n            <p>{selectedBandFilter !== 'all' ? `No CSV files found for band ${selectedBandFilter}` : 'This folder is empty'}</p>\n            {selectedBandFilter !== 'all' && folderContents.length > 0 && (\n              <small>Try selecting \"All Bands\" to see all files</small>\n            )}\n          </div>\n        ) : (\n          <div className=\"items-list\">\n            {filteredContents.map(renderFolderItem)}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FolderBrowser; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}