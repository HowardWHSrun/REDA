{"ast":null,"code":"var _jsxFileName = \"/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/src/components/FolderBrowser/FolderBrowser.tsx\",\n  _s = $RefreshSig$();\n// ========================================================================\n// REDA EMC Testing Tool - Folder Browser Component\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Folder navigation component for browsing and selecting files\n// ========================================================================\n\nimport React, { useState, useCallback } from 'react';\nimport { CsvService } from '../../services/CsvService';\nimport { NoiseAnalysisService } from '../../services/NoiseAnalysisService';\nimport { BAND_DEFINITIONS } from '../../constants';\nimport './FolderBrowser.css';\n\n// ========================================================================\n// INTERFACES\n// ========================================================================\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// ========================================================================\n// FOLDER BROWSER COMPONENT\n// ========================================================================\n\nexport const FolderBrowser = ({\n  panelId,\n  title,\n  maxFiles = 8,\n  onFilesSelected\n}) => {\n  _s();\n  const [currentPath, setCurrentPath] = useState('');\n  const [folderContents, setFolderContents] = useState([]);\n  const [filteredContents, setFilteredContents] = useState([]);\n  const [selectedFiles, setSelectedFiles] = useState(new Set());\n  const [selectedBandFilter, setSelectedBandFilter] = useState('all');\n  const [, setSelectedBands] = useState(new Set());\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [pathHistory, setPathHistory] = useState([]);\n  const [sortBy, setSortBy] = useState('noisiness');\n  const [isAnalyzingNoise, setIsAnalyzingNoise] = useState(false);\n  const [noisinessCache, setNoisinessCache] = useState(new Map());\n\n  // ========================================================================\n  // NOISINESS ANALYSIS\n  // ========================================================================\n\n  const analyzeFileNoisiness = useCallback(async item => {\n    var _item$modified;\n    if (!item.isCSV || !item.fileHandle) return null;\n\n    // Check cache first\n    const cacheKey = `${item.path}_${(_item$modified = item.modified) === null || _item$modified === void 0 ? void 0 : _item$modified.getTime()}`;\n    if (noisinessCache.has(cacheKey)) {\n      return noisinessCache.get(cacheKey);\n    }\n    try {\n      const file = await item.fileHandle.getFile();\n      const parseResult = await CsvService.parseCsvFile(file);\n      if (parseResult.success && parseResult.data) {\n        const analysis = NoiseAnalysisService.calculateNoisinessIndex(parseResult.data, item.name);\n\n        // Cache the result\n        setNoisinessCache(prev => new Map(prev.set(cacheKey, analysis)));\n        return analysis;\n      }\n    } catch (error) {\n      console.warn(`Failed to analyze noisiness for ${item.name}:`, error);\n    }\n    return null;\n  }, [noisinessCache]);\n  const batchAnalyzeNoisiness = useCallback(async items => {\n    const csvFiles = items.filter(item => item.isCSV && item.fileHandle);\n    if (csvFiles.length === 0) return;\n    setIsAnalyzingNoise(true);\n    console.log(`🔊 Analyzing noisiness for ${csvFiles.length} CSV files...`);\n    const updatedItems = [...items];\n\n    // Analyze files in parallel but limit concurrency to avoid overwhelming the system\n    const batchSize = 3;\n    for (let i = 0; i < csvFiles.length; i += batchSize) {\n      const batch = csvFiles.slice(i, i + batchSize);\n      const analyses = await Promise.all(batch.map(item => analyzeFileNoisiness(item)));\n\n      // Update items with analysis results\n      batch.forEach((item, index) => {\n        const analysis = analyses[index];\n        if (analysis) {\n          const itemIndex = updatedItems.findIndex(ui => ui.path === item.path);\n          if (itemIndex >= 0) {\n            updatedItems[itemIndex] = {\n              ...updatedItems[itemIndex],\n              noisinessAnalysis: analysis\n            };\n          }\n        }\n      });\n\n      // Update display progressively\n      setFolderContents([...updatedItems]);\n    }\n    setIsAnalyzingNoise(false);\n    console.log(`✅ Noisiness analysis complete for ${csvFiles.length} files`);\n  }, [analyzeFileNoisiness]);\n\n  // ========================================================================\n  // FILTERING AND BAND DETECTION\n  // ========================================================================\n\n  const applyFilters = useCallback(items => {\n    let filtered = [...items];\n\n    // Filter by band if not 'all'\n    if (selectedBandFilter !== 'all') {\n      filtered = filtered.filter(item => item.type === 'folder' || item.isCSV && item.detectedBand === selectedBandFilter);\n    }\n\n    // Sort items\n    filtered.sort((a, b) => {\n      var _a$noisinessAnalysis$, _a$noisinessAnalysis, _b$noisinessAnalysis$, _b$noisinessAnalysis;\n      // Always put folders first\n      if (a.type !== b.type) {\n        return a.type === 'folder' ? -1 : 1;\n      }\n\n      // For files, sort by selected criteria\n      if (a.type === 'file' && b.type === 'file') {\n        switch (sortBy) {\n          case 'noisiness':\n            const aNoise = (_a$noisinessAnalysis$ = (_a$noisinessAnalysis = a.noisinessAnalysis) === null || _a$noisinessAnalysis === void 0 ? void 0 : _a$noisinessAnalysis.noisinessIndex) !== null && _a$noisinessAnalysis$ !== void 0 ? _a$noisinessAnalysis$ : -1;\n            const bNoise = (_b$noisinessAnalysis$ = (_b$noisinessAnalysis = b.noisinessAnalysis) === null || _b$noisinessAnalysis === void 0 ? void 0 : _b$noisinessAnalysis.noisinessIndex) !== null && _b$noisinessAnalysis$ !== void 0 ? _b$noisinessAnalysis$ : -1;\n            // Sort by noisiness descending (noisiest first), then by name\n            if (aNoise !== bNoise) {\n              return bNoise - aNoise;\n            }\n            break;\n          case 'band':\n            const aBand = a.detectedBand || 'ZZ';\n            const bBand = b.detectedBand || 'ZZ';\n            if (aBand !== bBand) {\n              return aBand.localeCompare(bBand);\n            }\n            break;\n          case 'name':\n          default:\n            // Fall through to name sorting\n            break;\n        }\n      }\n\n      // Default: sort by name\n      return a.name.localeCompare(b.name);\n    });\n    setFilteredContents(filtered);\n  }, [selectedBandFilter, sortBy]);\n\n  // Apply filters whenever band filter, sort option, or folder contents change\n  React.useEffect(() => {\n    applyFilters(folderContents);\n  }, [folderContents, selectedBandFilter, sortBy, applyFilters]);\n\n  // ========================================================================\n  // FOLDER NAVIGATION\n  // ========================================================================\n\n  const loadFolderContents = useCallback(async dirHandle => {\n    setIsLoading(true);\n    setError('');\n    const items = [];\n    try {\n      for await (const [name, handle] of dirHandle.entries()) {\n        const isFile = handle.kind === 'file';\n        const isCSV = isFile ? CsvService.isValidCsvFile({\n          name\n        }) : false;\n\n        // Only include CSV files\n        if (isFile && !isCSV) {\n          continue;\n        }\n        const item = {\n          name,\n          path: `${currentPath}/${name}`,\n          type: isFile ? 'file' : 'folder',\n          isCSV,\n          fileHandle: isFile ? handle : undefined // Store the file handle for later access\n        };\n        if (isFile) {\n          try {\n            const file = await handle.getFile();\n            item.size = file.size;\n            item.modified = new Date(file.lastModified);\n\n            // Detect band for CSV files\n            if (item.isCSV) {\n              const bandFromFilename = CsvService.detectBandFromFilename(name);\n              if (bandFromFilename) {\n                item.detectedBand = bandFromFilename;\n                item.bandConfidence = 'high';\n              } else {\n                // Just detect from filename for now to avoid parsing all files\n                item.detectedBand = null;\n                item.bandConfidence = 'low';\n              }\n            }\n          } catch (err) {\n            // Skip files we can't access\n            continue;\n          }\n        }\n        items.push(item);\n      }\n\n      // Sort: folders first, then files, alphabetically\n      items.sort((a, b) => {\n        if (a.type !== b.type) {\n          return a.type === 'folder' ? -1 : 1;\n        }\n        return a.name.localeCompare(b.name);\n      });\n      setFolderContents(items);\n\n      // Apply filters inline to avoid dependency issues\n      let filtered = [...items];\n      if (selectedBandFilter !== 'all') {\n        filtered = filtered.filter(item => item.type === 'folder' || item.isCSV && item.detectedBand === selectedBandFilter);\n      }\n      setFilteredContents(filtered);\n\n      // Start noisiness analysis for CSV files in the background\n      setTimeout(() => batchAnalyzeNoisiness(items), 100);\n    } catch (error) {\n      setError('Failed to read folder contents.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentPath, selectedBandFilter, batchAnalyzeNoisiness]);\n  const loadFolderContentsFromFiles = useCallback(files => {\n    setIsLoading(true);\n    setError('');\n    const items = [];\n    const seenPaths = new Set();\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      const pathParts = file.webkitRelativePath.split('/');\n\n      // Add folders in the path\n      for (let j = 1; j < pathParts.length - 1; j++) {\n        const folderPath = pathParts.slice(0, j + 1).join('/');\n        if (!seenPaths.has(folderPath)) {\n          seenPaths.add(folderPath);\n          items.push({\n            name: pathParts[j],\n            path: folderPath,\n            type: 'folder'\n          });\n        }\n      }\n\n      // Add the file\n      if (!seenPaths.has(file.webkitRelativePath)) {\n        seenPaths.add(file.webkitRelativePath);\n        const isCSV = CsvService.isValidCsvFile(file);\n\n        // Only include CSV files\n        if (!isCSV) {\n          continue;\n        }\n        const item = {\n          name: file.name,\n          path: file.webkitRelativePath,\n          type: 'file',\n          size: file.size,\n          modified: new Date(file.lastModified),\n          isCSV\n        };\n\n        // Detect band for CSV files\n        if (isCSV) {\n          const bandFromFilename = CsvService.detectBandFromFilename(file.name);\n          if (bandFromFilename) {\n            item.detectedBand = bandFromFilename;\n            item.bandConfidence = 'high';\n          } else {\n            item.detectedBand = null;\n            item.bandConfidence = 'low';\n          }\n        }\n        items.push(item);\n      }\n    }\n\n    // Filter to show only items in current directory level\n    const currentLevel = currentPath.split('/').length;\n    const currentLevelItems = items.filter(item => {\n      const itemLevel = item.path.split('/').length;\n      return itemLevel === currentLevel + 1 && item.path.startsWith(currentPath);\n    });\n    setFolderContents(currentLevelItems);\n\n    // Apply filters inline to avoid dependency issues\n    let filtered = [...currentLevelItems];\n    if (selectedBandFilter !== 'all') {\n      filtered = filtered.filter(item => item.type === 'folder' || item.isCSV && item.detectedBand === selectedBandFilter);\n    }\n    setFilteredContents(filtered);\n    setIsLoading(false);\n\n    // Note: Noisiness analysis not available for fallback file loading\n    // since we don't have direct file handles in this mode\n  }, [currentPath, selectedBandFilter]);\n  const openFolderDialog = useCallback(async () => {\n    try {\n      // Use the File System Access API for modern browsers\n      if ('showDirectoryPicker' in window) {\n        const dirHandle = await window.showDirectoryPicker();\n        const path = dirHandle.name;\n        setCurrentPath(path);\n        await loadFolderContents(dirHandle);\n      } else {\n        // Fallback: use input element\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.webkitdirectory = true;\n        input.multiple = true;\n        input.onchange = e => {\n          const files = e.target.files;\n          if (files && files.length > 0) {\n            const firstFile = files[0];\n            const pathParts = firstFile.webkitRelativePath.split('/');\n            const folderName = pathParts[0];\n            setCurrentPath(folderName);\n            loadFolderContentsFromFiles(files);\n          }\n        };\n        input.click();\n      }\n    } catch (error) {\n      if (error.name !== 'AbortError') {\n        setError('Failed to open folder. Please try again.');\n      }\n    }\n  }, [loadFolderContents, loadFolderContentsFromFiles]);\n\n  // ========================================================================\n  // FILE SELECTION\n  // ========================================================================\n\n  const toggleFileSelection = useCallback((path, itemBand) => {\n    setSelectedFiles(prev => {\n      const newSelection = new Set();\n      let updatedBands = new Set();\n      if (prev.has(path)) {\n        // Deselecting the currently selected file - clear everything\n        newSelection.clear();\n        updatedBands.clear();\n        setSelectedBands(updatedBands);\n        console.log(`🗑️ Deselected file: ${path}`);\n      } else {\n        // Selecting a new file - replace any previous selection\n        newSelection.clear(); // Clear any previous selections\n        newSelection.add(path); // Add only the new file\n\n        // Update bands for the new selection\n        updatedBands.clear();\n        if (itemBand) {\n          updatedBands.add(itemBand);\n          setSelectedBands(updatedBands);\n          console.log(`🔄 Selected new file: ${path} (${itemBand} band) - replacing any previous selection`);\n        } else {\n          setSelectedBands(updatedBands);\n          console.log(`🔄 Selected new file: ${path} (Unknown band) - replacing any previous selection`);\n        }\n        setError(''); // Clear any previous errors\n      }\n\n      // Always trigger file loading when selection changes (including when clearing)\n      setTimeout(() => {\n        const selectedItems = filteredContents.filter(item => newSelection.has(item.path) && item.type === 'file' && item.isCSV);\n\n        // Always call the callback, even when no files are selected (to clear the plot)\n        if (onFilesSelected) {\n          onFilesSelected(selectedItems);\n        }\n      }, 100); // Small delay to ensure state updates are complete\n\n      return newSelection;\n    });\n  }, [filteredContents, onFilesSelected]);\n\n  // ========================================================================\n  // NAVIGATION\n  // ========================================================================\n\n  const navigateToFolder = useCallback(folderPath => {\n    setPathHistory(prev => [...prev, currentPath]);\n    setCurrentPath(folderPath);\n    setSelectedFiles(new Set());\n    setSelectedBands(new Set());\n    setError('');\n  }, [currentPath]);\n  const navigateBack = useCallback(() => {\n    if (pathHistory.length > 0) {\n      const previousPath = pathHistory[pathHistory.length - 1];\n      setPathHistory(prev => prev.slice(0, -1));\n      setCurrentPath(previousPath);\n      setSelectedFiles(new Set());\n    }\n  }, [pathHistory]);\n  const navigateToRoot = useCallback(() => {\n    setCurrentPath('');\n    setPathHistory([]);\n    setFolderContents([]);\n    setSelectedFiles(new Set());\n  }, []);\n\n  // ========================================================================\n  // CLEAR SELECTION\n  // ========================================================================\n\n  const clearSelection = useCallback(() => {\n    setSelectedFiles(new Set());\n    setSelectedBands(new Set());\n    setError('');\n\n    // Notify parent that no files are selected\n    if (onFilesSelected) {\n      onFilesSelected([]);\n    }\n  }, [onFilesSelected]);\n  const clearNoisinessCache = useCallback(() => {\n    setNoisinessCache(new Map());\n    // Force re-analysis of current folder\n    if (folderContents.length > 0) {\n      setTimeout(() => batchAnalyzeNoisiness(folderContents), 100);\n    }\n  }, [folderContents, batchAnalyzeNoisiness]);\n\n  // ========================================================================\n  // RENDER HELPERS\n  // ========================================================================\n\n  const renderPathBreadcrumb = () => {\n    if (!currentPath) return null;\n    const pathParts = currentPath.split('/');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"path-breadcrumb\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: navigateToRoot,\n        className: \"breadcrumb-item root\",\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 9\n      }, this), pathParts.map((part, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"breadcrumb-separator\",\n          children: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"breadcrumb-item\",\n          children: part\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }, this);\n  };\n  const renderFolderItem = item => {\n    const isSelected = selectedFiles.has(item.path);\n    const isSelectable = item.type === 'file' && item.isCSV;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `folder-item ${item.type} ${isSelected ? 'selected' : ''} ${isSelectable ? 'selectable' : ''}`,\n      onClick: () => {\n        if (item.type === 'folder') {\n          navigateToFolder(item.path);\n        } else if (isSelectable) {\n          toggleFileSelection(item.path, item.detectedBand);\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-icon\",\n        children: item.type === 'folder' ? '📁' : item.isCSV ? '📈' : '📄'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-name\",\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this), item.type === 'file' && item.isCSV && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-meta\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"band-info\",\n            children: [item.detectedBand && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `band-indicator ${item.bandConfidence}`,\n              children: item.detectedBand\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 19\n            }, this), !item.detectedBand && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"band-indicator unknown\",\n              children: \"Unknown Band\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 15\n          }, this), item.noisinessAnalysis && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"noisiness-info\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"noisiness-indicator\",\n              style: {\n                color: NoiseAnalysisService.getNoisinessColor(item.noisinessAnalysis.noisinessIndex)\n              },\n              title: `Noisiness: ${item.noisinessAnalysis.noisinessIndex}/100 (${NoiseAnalysisService.getNoisinessDescription(item.noisinessAnalysis.noisinessIndex)})`,\n              children: [NoiseAnalysisService.getNoisinessEmoji(item.noisinessAnalysis.noisinessIndex), \" \", item.noisinessAnalysis.noisinessIndex]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 17\n          }, this), !item.noisinessAnalysis && isAnalyzingNoise && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"noisiness-info\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"noisiness-loading\",\n              children: \"\\uD83D\\uDD04 ...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 9\n      }, this), isSelectable && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selection-indicator\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isSelected,\n          onChange: () => toggleFileSelection(item.path, item.detectedBand),\n          onClick: e => e.stopPropagation()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 11\n      }, this)]\n    }, item.path, true, {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 7\n    }, this);\n  };\n\n  // ========================================================================\n  // MAIN RENDER\n  // ========================================================================\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"folder-browser\",\n    \"data-panel-id\": panelId,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"browser-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        onClick: !isLoading ? openFolderDialog : undefined,\n        style: {\n          cursor: !isLoading ? 'pointer' : 'default',\n          userSelect: 'none',\n          color: !currentPath ? '#3498db' : 'inherit'\n        },\n        title: !currentPath ? 'Click to open folder' : `Click to change folder (${currentPath})`,\n        children: [title, currentPath ? ` - ${currentPath}` : ' (Click here to open folder)']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"browser-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: openFolderDialog,\n          className: \"open-folder-btn\",\n          disabled: isLoading,\n          children: currentPath ? 'Change Folder' : 'Open Folder'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 11\n        }, this), pathHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: navigateBack,\n          className: \"back-btn\",\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 11\n    }, this), currentPath && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [renderPathBreadcrumb(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `band-filter-${panelId}`,\n            className: \"filter-label\",\n            children: \"Band Filter:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: `band-filter-${panelId}`,\n            value: selectedBandFilter,\n            onChange: e => {\n              setSelectedBandFilter(e.target.value);\n              applyFilters(folderContents);\n            },\n            className: \"band-filter-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"all\",\n              children: \"All Bands\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 643,\n              columnNumber: 17\n            }, this), Object.entries(BAND_DEFINITIONS).map(([bandType, definition]) => {\n              const count = folderContents.filter(item => item.detectedBand === bandType).length;\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: bandType,\n                children: [bandType, \": \", definition.range, \" (\", count, \" files)\"]\n              }, bandType, true, {\n                fileName: _jsxFileName,\n                lineNumber: 647,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `sort-filter-${panelId}`,\n            className: \"filter-label\",\n            children: \"Sort by:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: `sort-filter-${panelId}`,\n            value: sortBy,\n            onChange: e => {\n              setSortBy(e.target.value);\n              applyFilters(folderContents);\n            },\n            className: \"sort-filter-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"noisiness\",\n              children: \"\\uD83D\\uDD0A Noisiness (High\\u2192Low)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 667,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"band\",\n              children: \"\\uD83D\\uDCCA Band\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 668,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"name\",\n              children: \"\\uD83D\\uDCDD Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-section\",\n          children: [isAnalyzingNoise && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"analysis-status\",\n            children: \"\\uD83D\\uDD04 Analyzing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 17\n          }, this), !isAnalyzingNoise && sortBy === 'noisiness' && filteredContents.some(item => item.noisinessAnalysis) && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ranking-status\",\n            children: \"\\uD83D\\uDCCA Ranked: Noisiest \\u2192 Quietest\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 679,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: clearSelection,\n            disabled: selectedFiles.size === 0,\n            className: \"clear-all-btn\",\n            children: selectedFiles.size > 0 ? 'Clear Selection' : 'Clear All'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 15\n          }, this), process.env.NODE_ENV === 'development' && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: clearNoisinessCache,\n            className: \"clear-cache-btn\",\n            title: \"Clear noisiness cache and re-analyze\",\n            children: \"\\uD83D\\uDD04 Re-analyze\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-contents\",\n      children: !currentPath ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-icon\",\n          children: \"\\uD83D\\uDCC2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Click \\\"Open Folder\\\" to browse and select CSV files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 706,\n        columnNumber: 11\n      }, this) : isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          children: \"\\u27F3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading folder contents...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 11\n      }, this) : filteredContents.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-folder\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-icon\",\n          children: \"\\uD83D\\uDCC2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: selectedBandFilter !== 'all' ? `No CSV files found for band ${selectedBandFilter}` : 'This folder is empty'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 13\n        }, this), selectedBandFilter !== 'all' && folderContents.length > 0 && /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Try selecting \\\"All Bands\\\" to see all files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"items-list\",\n        children: filteredContents.map(renderFolderItem)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 724,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 588,\n    columnNumber: 5\n  }, this);\n};\n_s(FolderBrowser, \"HjgTvtHxovH9BsK78DV0hUoIolM=\");\n_c = FolderBrowser;\nexport default FolderBrowser;\nvar _c;\n$RefreshReg$(_c, \"FolderBrowser\");","map":{"version":3,"names":["React","useState","useCallback","CsvService","NoiseAnalysisService","BAND_DEFINITIONS","jsxDEV","_jsxDEV","Fragment","_Fragment","FolderBrowser","panelId","title","maxFiles","onFilesSelected","_s","currentPath","setCurrentPath","folderContents","setFolderContents","filteredContents","setFilteredContents","selectedFiles","setSelectedFiles","Set","selectedBandFilter","setSelectedBandFilter","setSelectedBands","isLoading","setIsLoading","error","setError","pathHistory","setPathHistory","sortBy","setSortBy","isAnalyzingNoise","setIsAnalyzingNoise","noisinessCache","setNoisinessCache","Map","analyzeFileNoisiness","item","_item$modified","isCSV","fileHandle","cacheKey","path","modified","getTime","has","get","file","getFile","parseResult","parseCsvFile","success","data","analysis","calculateNoisinessIndex","name","prev","set","console","warn","batchAnalyzeNoisiness","items","csvFiles","filter","length","log","updatedItems","batchSize","i","batch","slice","analyses","Promise","all","map","forEach","index","itemIndex","findIndex","ui","noisinessAnalysis","applyFilters","filtered","type","detectedBand","sort","a","b","_a$noisinessAnalysis$","_a$noisinessAnalysis","_b$noisinessAnalysis$","_b$noisinessAnalysis","aNoise","noisinessIndex","bNoise","aBand","bBand","localeCompare","useEffect","loadFolderContents","dirHandle","handle","entries","isFile","kind","isValidCsvFile","undefined","size","Date","lastModified","bandFromFilename","detectBandFromFilename","bandConfidence","err","push","setTimeout","loadFolderContentsFromFiles","files","seenPaths","pathParts","webkitRelativePath","split","j","folderPath","join","add","currentLevel","currentLevelItems","itemLevel","startsWith","openFolderDialog","window","showDirectoryPicker","input","document","createElement","webkitdirectory","multiple","onchange","e","target","firstFile","folderName","click","toggleFileSelection","itemBand","newSelection","updatedBands","clear","selectedItems","navigateToFolder","navigateBack","previousPath","navigateToRoot","clearSelection","clearNoisinessCache","renderPathBreadcrumb","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","part","renderFolderItem","isSelected","isSelectable","style","color","getNoisinessColor","getNoisinessDescription","getNoisinessEmoji","checked","onChange","stopPropagation","cursor","userSelect","disabled","htmlFor","id","value","Object","bandType","definition","count","range","some","process","env","NODE_ENV","_c","$RefreshReg$"],"sources":["/Users/howardwang/Desktop/Turner Engineering/Software Product Design/reda-main/typescript-react-app/src/components/FolderBrowser/FolderBrowser.tsx"],"sourcesContent":["// ========================================================================\n// REDA EMC Testing Tool - Folder Browser Component\n// ========================================================================\n// Turner Engineering Corporation - Professional EMC Testing Support\n// \n// Folder navigation component for browsing and selecting files\n// ========================================================================\n\nimport React, { useState, useCallback } from 'react';\nimport { CsvService } from '../../services/CsvService';\nimport { NoiseAnalysisService, NoiseAnalysisResult } from '../../services/NoiseAnalysisService';\nimport { BandType } from '../../types';\nimport { BAND_DEFINITIONS } from '../../constants';\nimport './FolderBrowser.css';\n\n// ========================================================================\n// INTERFACES\n// ========================================================================\n\ninterface FolderItem {\n  name: string;\n  path: string;\n  type: 'file' | 'folder';\n  size?: number;\n  modified?: Date;\n  isCSV?: boolean;\n  detectedBand?: BandType | null;\n  bandConfidence?: 'high' | 'medium' | 'low';\n  fileHandle?: any; // File handle for File System Access API\n  noisinessAnalysis?: NoiseAnalysisResult; // Noisiness analysis data\n}\n\ninterface FolderBrowserProps {\n  panelId: string;\n  title: string;\n  maxFiles?: number;\n  onFilesSelected?: (files: FolderItem[]) => void;\n}\n\n// ========================================================================\n// FOLDER BROWSER COMPONENT\n// ========================================================================\n\nexport const FolderBrowser: React.FC<FolderBrowserProps> = ({\n  panelId,\n  title,\n  maxFiles = 8,\n  onFilesSelected\n}) => {\n  const [currentPath, setCurrentPath] = useState<string>('');\n  const [folderContents, setFolderContents] = useState<FolderItem[]>([]);\n  const [filteredContents, setFilteredContents] = useState<FolderItem[]>([]);\n  const [selectedFiles, setSelectedFiles] = useState<Set<string>>(new Set());\n  const [selectedBandFilter, setSelectedBandFilter] = useState<BandType | 'all'>('all');\n  const [, setSelectedBands] = useState<Set<BandType>>(new Set());\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string>('');\n  const [pathHistory, setPathHistory] = useState<string[]>([]);\n  const [sortBy, setSortBy] = useState<'name' | 'noisiness' | 'band'>('noisiness');\n  const [isAnalyzingNoise, setIsAnalyzingNoise] = useState(false);\n  const [noisinessCache, setNoisinessCache] = useState<Map<string, NoiseAnalysisResult>>(new Map());\n\n  // ========================================================================\n  // NOISINESS ANALYSIS\n  // ========================================================================\n\n  const analyzeFileNoisiness = useCallback(async (item: FolderItem): Promise<NoiseAnalysisResult | null> => {\n    if (!item.isCSV || !item.fileHandle) return null;\n    \n    // Check cache first\n    const cacheKey = `${item.path}_${item.modified?.getTime()}`;\n    if (noisinessCache.has(cacheKey)) {\n      return noisinessCache.get(cacheKey)!;\n    }\n\n    try {\n      const file = await item.fileHandle.getFile();\n      const parseResult = await CsvService.parseCsvFile(file);\n      \n      if (parseResult.success && parseResult.data) {\n        const analysis = NoiseAnalysisService.calculateNoisinessIndex(parseResult.data, item.name);\n        \n        // Cache the result\n        setNoisinessCache(prev => new Map(prev.set(cacheKey, analysis)));\n        \n        return analysis;\n      }\n    } catch (error) {\n      console.warn(`Failed to analyze noisiness for ${item.name}:`, error);\n    }\n    \n    return null;\n  }, [noisinessCache]);\n\n  const batchAnalyzeNoisiness = useCallback(async (items: FolderItem[]) => {\n    const csvFiles = items.filter(item => item.isCSV && item.fileHandle);\n    if (csvFiles.length === 0) return;\n\n    setIsAnalyzingNoise(true);\n    console.log(`🔊 Analyzing noisiness for ${csvFiles.length} CSV files...`);\n\n    const updatedItems = [...items];\n    \n    // Analyze files in parallel but limit concurrency to avoid overwhelming the system\n    const batchSize = 3;\n    for (let i = 0; i < csvFiles.length; i += batchSize) {\n      const batch = csvFiles.slice(i, i + batchSize);\n      const analyses = await Promise.all(\n        batch.map(item => analyzeFileNoisiness(item))\n      );\n      \n      // Update items with analysis results\n      batch.forEach((item, index) => {\n        const analysis = analyses[index];\n        if (analysis) {\n          const itemIndex = updatedItems.findIndex(ui => ui.path === item.path);\n          if (itemIndex >= 0) {\n            updatedItems[itemIndex] = { ...updatedItems[itemIndex], noisinessAnalysis: analysis };\n          }\n        }\n      });\n      \n      // Update display progressively\n      setFolderContents([...updatedItems]);\n    }\n\n    setIsAnalyzingNoise(false);\n    console.log(`✅ Noisiness analysis complete for ${csvFiles.length} files`);\n  }, [analyzeFileNoisiness]);\n\n  // ========================================================================\n  // FILTERING AND BAND DETECTION\n  // ========================================================================\n\n  const applyFilters = useCallback((items: FolderItem[]) => {\n    let filtered = [...items];\n\n    // Filter by band if not 'all'\n    if (selectedBandFilter !== 'all') {\n      filtered = filtered.filter(item => \n        item.type === 'folder' || \n        (item.isCSV && item.detectedBand === selectedBandFilter)\n      );\n    }\n\n    // Sort items\n    filtered.sort((a, b) => {\n      // Always put folders first\n      if (a.type !== b.type) {\n        return a.type === 'folder' ? -1 : 1;\n      }\n      \n      // For files, sort by selected criteria\n      if (a.type === 'file' && b.type === 'file') {\n        switch (sortBy) {\n          case 'noisiness':\n            const aNoise = a.noisinessAnalysis?.noisinessIndex ?? -1;\n            const bNoise = b.noisinessAnalysis?.noisinessIndex ?? -1;\n            // Sort by noisiness descending (noisiest first), then by name\n            if (aNoise !== bNoise) {\n              return bNoise - aNoise;\n            }\n            break;\n          case 'band':\n            const aBand = a.detectedBand || 'ZZ';\n            const bBand = b.detectedBand || 'ZZ';\n            if (aBand !== bBand) {\n              return aBand.localeCompare(bBand);\n            }\n            break;\n          case 'name':\n          default:\n            // Fall through to name sorting\n            break;\n        }\n      }\n      \n      // Default: sort by name\n      return a.name.localeCompare(b.name);\n    });\n\n    setFilteredContents(filtered);\n  }, [selectedBandFilter, sortBy]);\n\n  // Apply filters whenever band filter, sort option, or folder contents change\n  React.useEffect(() => {\n    applyFilters(folderContents);\n  }, [folderContents, selectedBandFilter, sortBy, applyFilters]);\n\n  // ========================================================================\n  // FOLDER NAVIGATION\n  // ========================================================================\n\n  const loadFolderContents = useCallback(async (dirHandle: any) => {\n    setIsLoading(true);\n    setError('');\n    const items: FolderItem[] = [];\n\n    try {\n      for await (const [name, handle] of dirHandle.entries()) {\n        const isFile = handle.kind === 'file';\n        const isCSV = isFile ? CsvService.isValidCsvFile({ name } as File) : false;\n        \n        // Only include CSV files\n        if (isFile && !isCSV) {\n          continue;\n        }\n\n        const item: FolderItem = {\n          name,\n          path: `${currentPath}/${name}`,\n          type: isFile ? 'file' : 'folder',\n          isCSV,\n          fileHandle: isFile ? handle : undefined // Store the file handle for later access\n        };\n\n        if (isFile) {\n          try {\n            const file = await handle.getFile();\n            item.size = file.size;\n            item.modified = new Date(file.lastModified);\n            \n            // Detect band for CSV files\n            if (item.isCSV) {\n              const bandFromFilename = CsvService.detectBandFromFilename(name);\n              if (bandFromFilename) {\n                item.detectedBand = bandFromFilename;\n                item.bandConfidence = 'high';\n              } else {\n                // Just detect from filename for now to avoid parsing all files\n                item.detectedBand = null;\n                item.bandConfidence = 'low';\n              }\n            }\n          } catch (err) {\n            // Skip files we can't access\n            continue;\n          }\n        }\n\n        items.push(item);\n      }\n\n      // Sort: folders first, then files, alphabetically\n      items.sort((a, b) => {\n        if (a.type !== b.type) {\n          return a.type === 'folder' ? -1 : 1;\n        }\n        return a.name.localeCompare(b.name);\n      });\n\n      setFolderContents(items);\n      \n      // Apply filters inline to avoid dependency issues\n      let filtered = [...items];\n      if (selectedBandFilter !== 'all') {\n        filtered = filtered.filter(item => \n          item.type === 'folder' || \n          (item.isCSV && item.detectedBand === selectedBandFilter)\n        );\n      }\n      setFilteredContents(filtered);\n      \n      // Start noisiness analysis for CSV files in the background\n      setTimeout(() => batchAnalyzeNoisiness(items), 100);\n    } catch (error) {\n      setError('Failed to read folder contents.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentPath, selectedBandFilter, batchAnalyzeNoisiness]);\n\n  const loadFolderContentsFromFiles = useCallback((files: FileList) => {\n    setIsLoading(true);\n    setError('');\n    const items: FolderItem[] = [];\n    const seenPaths = new Set<string>();\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      const pathParts = file.webkitRelativePath.split('/');\n      \n      // Add folders in the path\n      for (let j = 1; j < pathParts.length - 1; j++) {\n        const folderPath = pathParts.slice(0, j + 1).join('/');\n        if (!seenPaths.has(folderPath)) {\n          seenPaths.add(folderPath);\n          items.push({\n            name: pathParts[j],\n            path: folderPath,\n            type: 'folder'\n          });\n        }\n      }\n\n      // Add the file\n      if (!seenPaths.has(file.webkitRelativePath)) {\n        seenPaths.add(file.webkitRelativePath);\n        const isCSV = CsvService.isValidCsvFile(file);\n        \n        // Only include CSV files\n        if (!isCSV) {\n          continue;\n        }\n\n        const item: FolderItem = {\n          name: file.name,\n          path: file.webkitRelativePath,\n          type: 'file',\n          size: file.size,\n          modified: new Date(file.lastModified),\n          isCSV\n        };\n\n        // Detect band for CSV files\n        if (isCSV) {\n          const bandFromFilename = CsvService.detectBandFromFilename(file.name);\n          if (bandFromFilename) {\n            item.detectedBand = bandFromFilename;\n            item.bandConfidence = 'high';\n          } else {\n            item.detectedBand = null;\n            item.bandConfidence = 'low';\n          }\n        }\n\n        items.push(item);\n      }\n    }\n\n    // Filter to show only items in current directory level\n    const currentLevel = currentPath.split('/').length;\n    const currentLevelItems = items.filter(item => {\n      const itemLevel = item.path.split('/').length;\n      return itemLevel === currentLevel + 1 && item.path.startsWith(currentPath);\n    });\n\n    setFolderContents(currentLevelItems);\n    \n    // Apply filters inline to avoid dependency issues\n    let filtered = [...currentLevelItems];\n    if (selectedBandFilter !== 'all') {\n      filtered = filtered.filter(item => \n        item.type === 'folder' || \n        (item.isCSV && item.detectedBand === selectedBandFilter)\n      );\n    }\n    setFilteredContents(filtered);\n    setIsLoading(false);\n    \n    // Note: Noisiness analysis not available for fallback file loading\n    // since we don't have direct file handles in this mode\n  }, [currentPath, selectedBandFilter]);\n\n  const openFolderDialog = useCallback(async () => {\n    try {\n      // Use the File System Access API for modern browsers\n      if ('showDirectoryPicker' in window) {\n        const dirHandle = await (window as any).showDirectoryPicker();\n        const path = dirHandle.name;\n        setCurrentPath(path);\n        await loadFolderContents(dirHandle);\n      } else {\n        // Fallback: use input element\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.webkitdirectory = true;\n        input.multiple = true;\n        \n        input.onchange = (e) => {\n          const files = (e.target as HTMLInputElement).files;\n          if (files && files.length > 0) {\n            const firstFile = files[0];\n            const pathParts = firstFile.webkitRelativePath.split('/');\n            const folderName = pathParts[0];\n            setCurrentPath(folderName);\n            loadFolderContentsFromFiles(files);\n          }\n        };\n        \n        input.click();\n      }\n    } catch (error) {\n      if ((error as Error).name !== 'AbortError') {\n        setError('Failed to open folder. Please try again.');\n      }\n    }\n  }, [loadFolderContents, loadFolderContentsFromFiles]);\n\n  // ========================================================================\n  // FILE SELECTION\n  // ========================================================================\n\n    const toggleFileSelection = useCallback((path: string, itemBand?: BandType | null) => {\n    setSelectedFiles(prev => {\n      const newSelection = new Set<string>();\n      let updatedBands = new Set<BandType>();\n      \n      if (prev.has(path)) {\n        // Deselecting the currently selected file - clear everything\n        newSelection.clear();\n        updatedBands.clear();\n            setSelectedBands(updatedBands);\n        console.log(`🗑️ Deselected file: ${path}`);\n      } else {\n        // Selecting a new file - replace any previous selection\n        newSelection.clear(); // Clear any previous selections\n        newSelection.add(path); // Add only the new file\n        \n        // Update bands for the new selection\n        updatedBands.clear();\n        if (itemBand) {\n          updatedBands.add(itemBand);\n          setSelectedBands(updatedBands);\n          console.log(`🔄 Selected new file: ${path} (${itemBand} band) - replacing any previous selection`);\n        } else {\n          setSelectedBands(updatedBands);\n          console.log(`🔄 Selected new file: ${path} (Unknown band) - replacing any previous selection`);\n        }\n        \n        setError(''); // Clear any previous errors\n      }\n\n      // Always trigger file loading when selection changes (including when clearing)\n      setTimeout(() => {\n        const selectedItems = filteredContents.filter(item => \n          newSelection.has(item.path) && item.type === 'file' && item.isCSV\n        );\n        \n        // Always call the callback, even when no files are selected (to clear the plot)\n        if (onFilesSelected) {\n          onFilesSelected(selectedItems);\n        }\n      }, 100); // Small delay to ensure state updates are complete\n      \n      return newSelection;\n    });\n  }, [filteredContents, onFilesSelected]);\n\n  // ========================================================================\n  // NAVIGATION\n  // ========================================================================\n\n  const navigateToFolder = useCallback((folderPath: string) => {\n    setPathHistory(prev => [...prev, currentPath]);\n    setCurrentPath(folderPath);\n    setSelectedFiles(new Set());\n    setSelectedBands(new Set());\n    setError('');\n  }, [currentPath]);\n\n  const navigateBack = useCallback(() => {\n    if (pathHistory.length > 0) {\n      const previousPath = pathHistory[pathHistory.length - 1];\n      setPathHistory(prev => prev.slice(0, -1));\n      setCurrentPath(previousPath);\n      setSelectedFiles(new Set());\n    }\n  }, [pathHistory]);\n\n  const navigateToRoot = useCallback(() => {\n    setCurrentPath('');\n    setPathHistory([]);\n    setFolderContents([]);\n    setSelectedFiles(new Set());\n  }, []);\n\n  // ========================================================================\n  // CLEAR SELECTION\n  // ========================================================================\n\n  const clearSelection = useCallback(() => {\n    setSelectedFiles(new Set());\n    setSelectedBands(new Set());\n    setError('');\n    \n    // Notify parent that no files are selected\n    if (onFilesSelected) {\n      onFilesSelected([]);\n    }\n  }, [onFilesSelected]);\n\n  const clearNoisinessCache = useCallback(() => {\n    setNoisinessCache(new Map());\n    // Force re-analysis of current folder\n    if (folderContents.length > 0) {\n      setTimeout(() => batchAnalyzeNoisiness(folderContents), 100);\n    }\n  }, [folderContents, batchAnalyzeNoisiness]);\n\n  // ========================================================================\n  // RENDER HELPERS\n  // ========================================================================\n\n  const renderPathBreadcrumb = () => {\n    if (!currentPath) return null;\n\n    const pathParts = currentPath.split('/');\n    \n    return (\n      <div className=\"path-breadcrumb\">\n        <button onClick={navigateToRoot} className=\"breadcrumb-item root\">\n          Home\n        </button>\n        {pathParts.map((part, index) => (\n          <React.Fragment key={index}>\n            <span className=\"breadcrumb-separator\">/</span>\n            <span className=\"breadcrumb-item\">{part}</span>\n          </React.Fragment>\n        ))}\n      </div>\n    );\n  };\n\n  const renderFolderItem = (item: FolderItem) => {\n    const isSelected = selectedFiles.has(item.path);\n    const isSelectable = item.type === 'file' && item.isCSV;\n\n    return (\n      <div\n        key={item.path}\n        className={`folder-item ${item.type} ${isSelected ? 'selected' : ''} ${isSelectable ? 'selectable' : ''}`}\n        onClick={() => {\n          if (item.type === 'folder') {\n            navigateToFolder(item.path);\n          } else if (isSelectable) {\n            toggleFileSelection(item.path, item.detectedBand);\n          }\n        }}\n      >\n        <div className=\"item-icon\">\n          {item.type === 'folder' ? '📁' : item.isCSV ? '📈' : '📄'}\n        </div>\n        <div className=\"item-details\">\n          <div className=\"item-name\">{item.name}</div>\n          {item.type === 'file' && item.isCSV && (\n            <div className=\"item-meta\">\n              <div className=\"band-info\">\n                {item.detectedBand && (\n                  <span className={`band-indicator ${item.bandConfidence}`}>\n                    {item.detectedBand}\n                  </span>\n                )}\n                {!item.detectedBand && (\n                  <span className=\"band-indicator unknown\">\n                    Unknown Band\n                  </span>\n                )}\n              </div>\n              {item.noisinessAnalysis && (\n                <div className=\"noisiness-info\">\n                  <span \n                    className=\"noisiness-indicator\"\n                    style={{ color: NoiseAnalysisService.getNoisinessColor(item.noisinessAnalysis.noisinessIndex) }}\n                    title={`Noisiness: ${item.noisinessAnalysis.noisinessIndex}/100 (${NoiseAnalysisService.getNoisinessDescription(item.noisinessAnalysis.noisinessIndex)})`}\n                  >\n                    {NoiseAnalysisService.getNoisinessEmoji(item.noisinessAnalysis.noisinessIndex)} {item.noisinessAnalysis.noisinessIndex}\n                  </span>\n                </div>\n              )}\n              {!item.noisinessAnalysis && isAnalyzingNoise && (\n                <div className=\"noisiness-info\">\n                  <span className=\"noisiness-loading\">🔄 ...</span>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n        {isSelectable && (\n          <div className=\"selection-indicator\">\n            <input \n              type=\"checkbox\" \n              checked={isSelected} \n              onChange={() => toggleFileSelection(item.path, item.detectedBand)}\n              onClick={(e) => e.stopPropagation()}\n            />\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // ========================================================================\n  // MAIN RENDER\n  // ========================================================================\n\n  return (\n    <div className=\"folder-browser\" data-panel-id={panelId}>\n      <div className=\"browser-header\">\n        <h3 \n          onClick={!isLoading ? openFolderDialog : undefined}\n          style={{ \n            cursor: !isLoading ? 'pointer' : 'default',\n            userSelect: 'none',\n            color: !currentPath ? '#3498db' : 'inherit'\n          }}\n          title={!currentPath ? 'Click to open folder' : `Click to change folder (${currentPath})`}\n        >\n          {title}\n          {currentPath ? ` - ${currentPath}` : ' (Click here to open folder)'}\n        </h3>\n        <div className=\"browser-controls\">\n          <button \n            onClick={openFolderDialog}\n            className=\"open-folder-btn\"\n            disabled={isLoading}\n          >\n            {currentPath ? 'Change Folder' : 'Open Folder'}\n          </button>\n          {pathHistory.length > 0 && (\n            <button onClick={navigateBack} className=\"back-btn\">\n              Back\n            </button>\n          )}\n        </div>\n      </div>\n\n              {error && (\n          <div className=\"error-message\">\n            {error}\n          </div>\n        )}\n\n      {currentPath && (\n        <>\n          {renderPathBreadcrumb()}\n          \n          {/* Filter and Sort Controls */}\n          <div className=\"filter-controls\">\n            <div className=\"filter-section\">\n              <label htmlFor={`band-filter-${panelId}`} className=\"filter-label\">\n                Band Filter:\n              </label>\n              <select\n                id={`band-filter-${panelId}`}\n                value={selectedBandFilter}\n                onChange={(e) => {\n                  setSelectedBandFilter(e.target.value as BandType | 'all');\n                  applyFilters(folderContents);\n                }}\n                className=\"band-filter-select\"\n              >\n                <option value=\"all\">All Bands</option>\n                {Object.entries(BAND_DEFINITIONS).map(([bandType, definition]) => {\n                  const count = folderContents.filter(item => item.detectedBand === bandType).length;\n                  return (\n                    <option key={bandType} value={bandType}>\n                      {bandType}: {definition.range} ({count} files)\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n            <div className=\"filter-section\">\n              <label htmlFor={`sort-filter-${panelId}`} className=\"filter-label\">\n                Sort by:\n              </label>\n              <select\n                id={`sort-filter-${panelId}`}\n                value={sortBy}\n                onChange={(e) => {\n                  setSortBy(e.target.value as 'name' | 'noisiness' | 'band');\n                  applyFilters(folderContents);\n                }}\n                className=\"sort-filter-select\"\n              >\n                <option value=\"noisiness\">🔊 Noisiness (High→Low)</option>\n                <option value=\"band\">📊 Band</option>\n                <option value=\"name\">📝 Name</option>\n              </select>\n            </div>\n            <div className=\"action-section\">\n              {isAnalyzingNoise && (\n                <span className=\"analysis-status\">\n                  🔄 Analyzing...\n                </span>\n              )}\n              {!isAnalyzingNoise && sortBy === 'noisiness' && filteredContents.some(item => item.noisinessAnalysis) && (\n                <span className=\"ranking-status\">\n                  📊 Ranked: Noisiest → Quietest\n                </span>\n              )}\n              <button \n                onClick={clearSelection}\n                disabled={selectedFiles.size === 0}\n                className=\"clear-all-btn\"\n              >\n                {selectedFiles.size > 0 ? 'Clear Selection' : 'Clear All'}\n              </button>\n              {process.env.NODE_ENV === 'development' && (\n                <button \n                  onClick={clearNoisinessCache}\n                  className=\"clear-cache-btn\"\n                  title=\"Clear noisiness cache and re-analyze\"\n                >\n                  🔄 Re-analyze\n                </button>\n              )}\n            </div>\n          </div>\n        </>\n      )}\n\n      <div className=\"folder-contents\">\n        {!currentPath ? (\n          <div className=\"empty-state\">\n            <div className=\"empty-icon\">📂</div>\n            <p>Click \"Open Folder\" to browse and select CSV files</p>\n          </div>\n        ) : isLoading ? (\n          <div className=\"loading-state\">\n            <div className=\"spinner\">⟳</div>\n            <p>Loading folder contents...</p>\n          </div>\n        ) : filteredContents.length === 0 ? (\n          <div className=\"empty-folder\">\n            <div className=\"empty-icon\">📂</div>\n            <p>{selectedBandFilter !== 'all' ? `No CSV files found for band ${selectedBandFilter}` : 'This folder is empty'}</p>\n            {selectedBandFilter !== 'all' && folderContents.length > 0 && (\n              <small>Try selecting \"All Bands\" to see all files</small>\n            )}\n          </div>\n        ) : (\n          <div className=\"items-list\">\n            {filteredContents.map(renderFolderItem)}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FolderBrowser; "],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,oBAAoB,QAA6B,qCAAqC;AAE/F,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,OAAO,qBAAqB;;AAE5B;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAsBA;AACA;AACA;;AAEA,OAAO,MAAMC,aAA2C,GAAGA,CAAC;EAC1DC,OAAO;EACPC,KAAK;EACLC,QAAQ,GAAG,CAAC;EACZC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAS,EAAE,CAAC;EAC1D,MAAM,CAACiB,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAe,EAAE,CAAC;EACtE,MAAM,CAACmB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGpB,QAAQ,CAAe,EAAE,CAAC;EAC1E,MAAM,CAACqB,aAAa,EAAEC,gBAAgB,CAAC,GAAGtB,QAAQ,CAAc,IAAIuB,GAAG,CAAC,CAAC,CAAC;EAC1E,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGzB,QAAQ,CAAmB,KAAK,CAAC;EACrF,MAAM,GAAG0B,gBAAgB,CAAC,GAAG1B,QAAQ,CAAgB,IAAIuB,GAAG,CAAC,CAAC,CAAC;EAC/D,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC6B,KAAK,EAAEC,QAAQ,CAAC,GAAG9B,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAM,CAAC+B,WAAW,EAAEC,cAAc,CAAC,GAAGhC,QAAQ,CAAW,EAAE,CAAC;EAC5D,MAAM,CAACiC,MAAM,EAAEC,SAAS,CAAC,GAAGlC,QAAQ,CAAgC,WAAW,CAAC;EAChF,MAAM,CAACmC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGpC,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACqC,cAAc,EAAEC,iBAAiB,CAAC,GAAGtC,QAAQ,CAAmC,IAAIuC,GAAG,CAAC,CAAC,CAAC;;EAEjG;EACA;EACA;;EAEA,MAAMC,oBAAoB,GAAGvC,WAAW,CAAC,MAAOwC,IAAgB,IAA0C;IAAA,IAAAC,cAAA;IACxG,IAAI,CAACD,IAAI,CAACE,KAAK,IAAI,CAACF,IAAI,CAACG,UAAU,EAAE,OAAO,IAAI;;IAEhD;IACA,MAAMC,QAAQ,GAAG,GAAGJ,IAAI,CAACK,IAAI,KAAAJ,cAAA,GAAID,IAAI,CAACM,QAAQ,cAAAL,cAAA,uBAAbA,cAAA,CAAeM,OAAO,CAAC,CAAC,EAAE;IAC3D,IAAIX,cAAc,CAACY,GAAG,CAACJ,QAAQ,CAAC,EAAE;MAChC,OAAOR,cAAc,CAACa,GAAG,CAACL,QAAQ,CAAC;IACrC;IAEA,IAAI;MACF,MAAMM,IAAI,GAAG,MAAMV,IAAI,CAACG,UAAU,CAACQ,OAAO,CAAC,CAAC;MAC5C,MAAMC,WAAW,GAAG,MAAMnD,UAAU,CAACoD,YAAY,CAACH,IAAI,CAAC;MAEvD,IAAIE,WAAW,CAACE,OAAO,IAAIF,WAAW,CAACG,IAAI,EAAE;QAC3C,MAAMC,QAAQ,GAAGtD,oBAAoB,CAACuD,uBAAuB,CAACL,WAAW,CAACG,IAAI,EAAEf,IAAI,CAACkB,IAAI,CAAC;;QAE1F;QACArB,iBAAiB,CAACsB,IAAI,IAAI,IAAIrB,GAAG,CAACqB,IAAI,CAACC,GAAG,CAAChB,QAAQ,EAAEY,QAAQ,CAAC,CAAC,CAAC;QAEhE,OAAOA,QAAQ;MACjB;IACF,CAAC,CAAC,OAAO5B,KAAK,EAAE;MACdiC,OAAO,CAACC,IAAI,CAAC,mCAAmCtB,IAAI,CAACkB,IAAI,GAAG,EAAE9B,KAAK,CAAC;IACtE;IAEA,OAAO,IAAI;EACb,CAAC,EAAE,CAACQ,cAAc,CAAC,CAAC;EAEpB,MAAM2B,qBAAqB,GAAG/D,WAAW,CAAC,MAAOgE,KAAmB,IAAK;IACvE,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC1B,IAAI,IAAIA,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACG,UAAU,CAAC;IACpE,IAAIsB,QAAQ,CAACE,MAAM,KAAK,CAAC,EAAE;IAE3BhC,mBAAmB,CAAC,IAAI,CAAC;IACzB0B,OAAO,CAACO,GAAG,CAAC,8BAA8BH,QAAQ,CAACE,MAAM,eAAe,CAAC;IAEzE,MAAME,YAAY,GAAG,CAAC,GAAGL,KAAK,CAAC;;IAE/B;IACA,MAAMM,SAAS,GAAG,CAAC;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,QAAQ,CAACE,MAAM,EAAEI,CAAC,IAAID,SAAS,EAAE;MACnD,MAAME,KAAK,GAAGP,QAAQ,CAACQ,KAAK,CAACF,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAAC;MAC9C,MAAMI,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAG,CAChCJ,KAAK,CAACK,GAAG,CAACrC,IAAI,IAAID,oBAAoB,CAACC,IAAI,CAAC,CAC9C,CAAC;;MAED;MACAgC,KAAK,CAACM,OAAO,CAAC,CAACtC,IAAI,EAAEuC,KAAK,KAAK;QAC7B,MAAMvB,QAAQ,GAAGkB,QAAQ,CAACK,KAAK,CAAC;QAChC,IAAIvB,QAAQ,EAAE;UACZ,MAAMwB,SAAS,GAAGX,YAAY,CAACY,SAAS,CAACC,EAAE,IAAIA,EAAE,CAACrC,IAAI,KAAKL,IAAI,CAACK,IAAI,CAAC;UACrE,IAAImC,SAAS,IAAI,CAAC,EAAE;YAClBX,YAAY,CAACW,SAAS,CAAC,GAAG;cAAE,GAAGX,YAAY,CAACW,SAAS,CAAC;cAAEG,iBAAiB,EAAE3B;YAAS,CAAC;UACvF;QACF;MACF,CAAC,CAAC;;MAEF;MACAvC,iBAAiB,CAAC,CAAC,GAAGoD,YAAY,CAAC,CAAC;IACtC;IAEAlC,mBAAmB,CAAC,KAAK,CAAC;IAC1B0B,OAAO,CAACO,GAAG,CAAC,qCAAqCH,QAAQ,CAACE,MAAM,QAAQ,CAAC;EAC3E,CAAC,EAAE,CAAC5B,oBAAoB,CAAC,CAAC;;EAE1B;EACA;EACA;;EAEA,MAAM6C,YAAY,GAAGpF,WAAW,CAAEgE,KAAmB,IAAK;IACxD,IAAIqB,QAAQ,GAAG,CAAC,GAAGrB,KAAK,CAAC;;IAEzB;IACA,IAAIzC,kBAAkB,KAAK,KAAK,EAAE;MAChC8D,QAAQ,GAAGA,QAAQ,CAACnB,MAAM,CAAC1B,IAAI,IAC7BA,IAAI,CAAC8C,IAAI,KAAK,QAAQ,IACrB9C,IAAI,CAACE,KAAK,IAAIF,IAAI,CAAC+C,YAAY,KAAKhE,kBACvC,CAAC;IACH;;IAEA;IACA8D,QAAQ,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAAA,IAAAC,qBAAA,EAAAC,oBAAA,EAAAC,qBAAA,EAAAC,oBAAA;MACtB;MACA,IAAIL,CAAC,CAACH,IAAI,KAAKI,CAAC,CAACJ,IAAI,EAAE;QACrB,OAAOG,CAAC,CAACH,IAAI,KAAK,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC;MACrC;;MAEA;MACA,IAAIG,CAAC,CAACH,IAAI,KAAK,MAAM,IAAII,CAAC,CAACJ,IAAI,KAAK,MAAM,EAAE;QAC1C,QAAQtD,MAAM;UACZ,KAAK,WAAW;YACd,MAAM+D,MAAM,IAAAJ,qBAAA,IAAAC,oBAAA,GAAGH,CAAC,CAACN,iBAAiB,cAAAS,oBAAA,uBAAnBA,oBAAA,CAAqBI,cAAc,cAAAL,qBAAA,cAAAA,qBAAA,GAAI,CAAC,CAAC;YACxD,MAAMM,MAAM,IAAAJ,qBAAA,IAAAC,oBAAA,GAAGJ,CAAC,CAACP,iBAAiB,cAAAW,oBAAA,uBAAnBA,oBAAA,CAAqBE,cAAc,cAAAH,qBAAA,cAAAA,qBAAA,GAAI,CAAC,CAAC;YACxD;YACA,IAAIE,MAAM,KAAKE,MAAM,EAAE;cACrB,OAAOA,MAAM,GAAGF,MAAM;YACxB;YACA;UACF,KAAK,MAAM;YACT,MAAMG,KAAK,GAAGT,CAAC,CAACF,YAAY,IAAI,IAAI;YACpC,MAAMY,KAAK,GAAGT,CAAC,CAACH,YAAY,IAAI,IAAI;YACpC,IAAIW,KAAK,KAAKC,KAAK,EAAE;cACnB,OAAOD,KAAK,CAACE,aAAa,CAACD,KAAK,CAAC;YACnC;YACA;UACF,KAAK,MAAM;UACX;YACE;YACA;QACJ;MACF;;MAEA;MACA,OAAOV,CAAC,CAAC/B,IAAI,CAAC0C,aAAa,CAACV,CAAC,CAAChC,IAAI,CAAC;IACrC,CAAC,CAAC;IAEFvC,mBAAmB,CAACkE,QAAQ,CAAC;EAC/B,CAAC,EAAE,CAAC9D,kBAAkB,EAAES,MAAM,CAAC,CAAC;;EAEhC;EACAlC,KAAK,CAACuG,SAAS,CAAC,MAAM;IACpBjB,YAAY,CAACpE,cAAc,CAAC;EAC9B,CAAC,EAAE,CAACA,cAAc,EAAEO,kBAAkB,EAAES,MAAM,EAAEoD,YAAY,CAAC,CAAC;;EAE9D;EACA;EACA;;EAEA,MAAMkB,kBAAkB,GAAGtG,WAAW,CAAC,MAAOuG,SAAc,IAAK;IAC/D5E,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,EAAE,CAAC;IACZ,MAAMmC,KAAmB,GAAG,EAAE;IAE9B,IAAI;MACF,WAAW,MAAM,CAACN,IAAI,EAAE8C,MAAM,CAAC,IAAID,SAAS,CAACE,OAAO,CAAC,CAAC,EAAE;QACtD,MAAMC,MAAM,GAAGF,MAAM,CAACG,IAAI,KAAK,MAAM;QACrC,MAAMjE,KAAK,GAAGgE,MAAM,GAAGzG,UAAU,CAAC2G,cAAc,CAAC;UAAElD;QAAK,CAAS,CAAC,GAAG,KAAK;;QAE1E;QACA,IAAIgD,MAAM,IAAI,CAAChE,KAAK,EAAE;UACpB;QACF;QAEA,MAAMF,IAAgB,GAAG;UACvBkB,IAAI;UACJb,IAAI,EAAE,GAAG/B,WAAW,IAAI4C,IAAI,EAAE;UAC9B4B,IAAI,EAAEoB,MAAM,GAAG,MAAM,GAAG,QAAQ;UAChChE,KAAK;UACLC,UAAU,EAAE+D,MAAM,GAAGF,MAAM,GAAGK,SAAS,CAAC;QAC1C,CAAC;QAED,IAAIH,MAAM,EAAE;UACV,IAAI;YACF,MAAMxD,IAAI,GAAG,MAAMsD,MAAM,CAACrD,OAAO,CAAC,CAAC;YACnCX,IAAI,CAACsE,IAAI,GAAG5D,IAAI,CAAC4D,IAAI;YACrBtE,IAAI,CAACM,QAAQ,GAAG,IAAIiE,IAAI,CAAC7D,IAAI,CAAC8D,YAAY,CAAC;;YAE3C;YACA,IAAIxE,IAAI,CAACE,KAAK,EAAE;cACd,MAAMuE,gBAAgB,GAAGhH,UAAU,CAACiH,sBAAsB,CAACxD,IAAI,CAAC;cAChE,IAAIuD,gBAAgB,EAAE;gBACpBzE,IAAI,CAAC+C,YAAY,GAAG0B,gBAAgB;gBACpCzE,IAAI,CAAC2E,cAAc,GAAG,MAAM;cAC9B,CAAC,MAAM;gBACL;gBACA3E,IAAI,CAAC+C,YAAY,GAAG,IAAI;gBACxB/C,IAAI,CAAC2E,cAAc,GAAG,KAAK;cAC7B;YACF;UACF,CAAC,CAAC,OAAOC,GAAG,EAAE;YACZ;YACA;UACF;QACF;QAEApD,KAAK,CAACqD,IAAI,CAAC7E,IAAI,CAAC;MAClB;;MAEA;MACAwB,KAAK,CAACwB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACnB,IAAID,CAAC,CAACH,IAAI,KAAKI,CAAC,CAACJ,IAAI,EAAE;UACrB,OAAOG,CAAC,CAACH,IAAI,KAAK,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC;QACrC;QACA,OAAOG,CAAC,CAAC/B,IAAI,CAAC0C,aAAa,CAACV,CAAC,CAAChC,IAAI,CAAC;MACrC,CAAC,CAAC;MAEFzC,iBAAiB,CAAC+C,KAAK,CAAC;;MAExB;MACA,IAAIqB,QAAQ,GAAG,CAAC,GAAGrB,KAAK,CAAC;MACzB,IAAIzC,kBAAkB,KAAK,KAAK,EAAE;QAChC8D,QAAQ,GAAGA,QAAQ,CAACnB,MAAM,CAAC1B,IAAI,IAC7BA,IAAI,CAAC8C,IAAI,KAAK,QAAQ,IACrB9C,IAAI,CAACE,KAAK,IAAIF,IAAI,CAAC+C,YAAY,KAAKhE,kBACvC,CAAC;MACH;MACAJ,mBAAmB,CAACkE,QAAQ,CAAC;;MAE7B;MACAiC,UAAU,CAAC,MAAMvD,qBAAqB,CAACC,KAAK,CAAC,EAAE,GAAG,CAAC;IACrD,CAAC,CAAC,OAAOpC,KAAK,EAAE;MACdC,QAAQ,CAAC,iCAAiC,CAAC;IAC7C,CAAC,SAAS;MACRF,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACb,WAAW,EAAES,kBAAkB,EAAEwC,qBAAqB,CAAC,CAAC;EAE5D,MAAMwD,2BAA2B,GAAGvH,WAAW,CAAEwH,KAAe,IAAK;IACnE7F,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,EAAE,CAAC;IACZ,MAAMmC,KAAmB,GAAG,EAAE;IAC9B,MAAMyD,SAAS,GAAG,IAAInG,GAAG,CAAS,CAAC;IAEnC,KAAK,IAAIiD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiD,KAAK,CAACrD,MAAM,EAAEI,CAAC,EAAE,EAAE;MACrC,MAAMrB,IAAI,GAAGsE,KAAK,CAACjD,CAAC,CAAC;MACrB,MAAMmD,SAAS,GAAGxE,IAAI,CAACyE,kBAAkB,CAACC,KAAK,CAAC,GAAG,CAAC;;MAEpD;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,SAAS,CAACvD,MAAM,GAAG,CAAC,EAAE0D,CAAC,EAAE,EAAE;QAC7C,MAAMC,UAAU,GAAGJ,SAAS,CAACjD,KAAK,CAAC,CAAC,EAAEoD,CAAC,GAAG,CAAC,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC;QACtD,IAAI,CAACN,SAAS,CAACzE,GAAG,CAAC8E,UAAU,CAAC,EAAE;UAC9BL,SAAS,CAACO,GAAG,CAACF,UAAU,CAAC;UACzB9D,KAAK,CAACqD,IAAI,CAAC;YACT3D,IAAI,EAAEgE,SAAS,CAACG,CAAC,CAAC;YAClBhF,IAAI,EAAEiF,UAAU;YAChBxC,IAAI,EAAE;UACR,CAAC,CAAC;QACJ;MACF;;MAEA;MACA,IAAI,CAACmC,SAAS,CAACzE,GAAG,CAACE,IAAI,CAACyE,kBAAkB,CAAC,EAAE;QAC3CF,SAAS,CAACO,GAAG,CAAC9E,IAAI,CAACyE,kBAAkB,CAAC;QACtC,MAAMjF,KAAK,GAAGzC,UAAU,CAAC2G,cAAc,CAAC1D,IAAI,CAAC;;QAE7C;QACA,IAAI,CAACR,KAAK,EAAE;UACV;QACF;QAEA,MAAMF,IAAgB,GAAG;UACvBkB,IAAI,EAAER,IAAI,CAACQ,IAAI;UACfb,IAAI,EAAEK,IAAI,CAACyE,kBAAkB;UAC7BrC,IAAI,EAAE,MAAM;UACZwB,IAAI,EAAE5D,IAAI,CAAC4D,IAAI;UACfhE,QAAQ,EAAE,IAAIiE,IAAI,CAAC7D,IAAI,CAAC8D,YAAY,CAAC;UACrCtE;QACF,CAAC;;QAED;QACA,IAAIA,KAAK,EAAE;UACT,MAAMuE,gBAAgB,GAAGhH,UAAU,CAACiH,sBAAsB,CAAChE,IAAI,CAACQ,IAAI,CAAC;UACrE,IAAIuD,gBAAgB,EAAE;YACpBzE,IAAI,CAAC+C,YAAY,GAAG0B,gBAAgB;YACpCzE,IAAI,CAAC2E,cAAc,GAAG,MAAM;UAC9B,CAAC,MAAM;YACL3E,IAAI,CAAC+C,YAAY,GAAG,IAAI;YACxB/C,IAAI,CAAC2E,cAAc,GAAG,KAAK;UAC7B;QACF;QAEAnD,KAAK,CAACqD,IAAI,CAAC7E,IAAI,CAAC;MAClB;IACF;;IAEA;IACA,MAAMyF,YAAY,GAAGnH,WAAW,CAAC8G,KAAK,CAAC,GAAG,CAAC,CAACzD,MAAM;IAClD,MAAM+D,iBAAiB,GAAGlE,KAAK,CAACE,MAAM,CAAC1B,IAAI,IAAI;MAC7C,MAAM2F,SAAS,GAAG3F,IAAI,CAACK,IAAI,CAAC+E,KAAK,CAAC,GAAG,CAAC,CAACzD,MAAM;MAC7C,OAAOgE,SAAS,KAAKF,YAAY,GAAG,CAAC,IAAIzF,IAAI,CAACK,IAAI,CAACuF,UAAU,CAACtH,WAAW,CAAC;IAC5E,CAAC,CAAC;IAEFG,iBAAiB,CAACiH,iBAAiB,CAAC;;IAEpC;IACA,IAAI7C,QAAQ,GAAG,CAAC,GAAG6C,iBAAiB,CAAC;IACrC,IAAI3G,kBAAkB,KAAK,KAAK,EAAE;MAChC8D,QAAQ,GAAGA,QAAQ,CAACnB,MAAM,CAAC1B,IAAI,IAC7BA,IAAI,CAAC8C,IAAI,KAAK,QAAQ,IACrB9C,IAAI,CAACE,KAAK,IAAIF,IAAI,CAAC+C,YAAY,KAAKhE,kBACvC,CAAC;IACH;IACAJ,mBAAmB,CAACkE,QAAQ,CAAC;IAC7B1D,YAAY,CAAC,KAAK,CAAC;;IAEnB;IACA;EACF,CAAC,EAAE,CAACb,WAAW,EAAES,kBAAkB,CAAC,CAAC;EAErC,MAAM8G,gBAAgB,GAAGrI,WAAW,CAAC,YAAY;IAC/C,IAAI;MACF;MACA,IAAI,qBAAqB,IAAIsI,MAAM,EAAE;QACnC,MAAM/B,SAAS,GAAG,MAAO+B,MAAM,CAASC,mBAAmB,CAAC,CAAC;QAC7D,MAAM1F,IAAI,GAAG0D,SAAS,CAAC7C,IAAI;QAC3B3C,cAAc,CAAC8B,IAAI,CAAC;QACpB,MAAMyD,kBAAkB,CAACC,SAAS,CAAC;MACrC,CAAC,MAAM;QACL;QACA,MAAMiC,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;QAC7CF,KAAK,CAAClD,IAAI,GAAG,MAAM;QACnBkD,KAAK,CAACG,eAAe,GAAG,IAAI;QAC5BH,KAAK,CAACI,QAAQ,GAAG,IAAI;QAErBJ,KAAK,CAACK,QAAQ,GAAIC,CAAC,IAAK;UACtB,MAAMtB,KAAK,GAAIsB,CAAC,CAACC,MAAM,CAAsBvB,KAAK;UAClD,IAAIA,KAAK,IAAIA,KAAK,CAACrD,MAAM,GAAG,CAAC,EAAE;YAC7B,MAAM6E,SAAS,GAAGxB,KAAK,CAAC,CAAC,CAAC;YAC1B,MAAME,SAAS,GAAGsB,SAAS,CAACrB,kBAAkB,CAACC,KAAK,CAAC,GAAG,CAAC;YACzD,MAAMqB,UAAU,GAAGvB,SAAS,CAAC,CAAC,CAAC;YAC/B3G,cAAc,CAACkI,UAAU,CAAC;YAC1B1B,2BAA2B,CAACC,KAAK,CAAC;UACpC;QACF,CAAC;QAEDgB,KAAK,CAACU,KAAK,CAAC,CAAC;MACf;IACF,CAAC,CAAC,OAAOtH,KAAK,EAAE;MACd,IAAKA,KAAK,CAAW8B,IAAI,KAAK,YAAY,EAAE;QAC1C7B,QAAQ,CAAC,0CAA0C,CAAC;MACtD;IACF;EACF,CAAC,EAAE,CAACyE,kBAAkB,EAAEiB,2BAA2B,CAAC,CAAC;;EAErD;EACA;EACA;;EAEE,MAAM4B,mBAAmB,GAAGnJ,WAAW,CAAC,CAAC6C,IAAY,EAAEuG,QAA0B,KAAK;IACtF/H,gBAAgB,CAACsC,IAAI,IAAI;MACvB,MAAM0F,YAAY,GAAG,IAAI/H,GAAG,CAAS,CAAC;MACtC,IAAIgI,YAAY,GAAG,IAAIhI,GAAG,CAAW,CAAC;MAEtC,IAAIqC,IAAI,CAACX,GAAG,CAACH,IAAI,CAAC,EAAE;QAClB;QACAwG,YAAY,CAACE,KAAK,CAAC,CAAC;QACpBD,YAAY,CAACC,KAAK,CAAC,CAAC;QAChB9H,gBAAgB,CAAC6H,YAAY,CAAC;QAClCzF,OAAO,CAACO,GAAG,CAAC,wBAAwBvB,IAAI,EAAE,CAAC;MAC7C,CAAC,MAAM;QACL;QACAwG,YAAY,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC;QACtBF,YAAY,CAACrB,GAAG,CAACnF,IAAI,CAAC,CAAC,CAAC;;QAExB;QACAyG,YAAY,CAACC,KAAK,CAAC,CAAC;QACpB,IAAIH,QAAQ,EAAE;UACZE,YAAY,CAACtB,GAAG,CAACoB,QAAQ,CAAC;UAC1B3H,gBAAgB,CAAC6H,YAAY,CAAC;UAC9BzF,OAAO,CAACO,GAAG,CAAC,yBAAyBvB,IAAI,KAAKuG,QAAQ,2CAA2C,CAAC;QACpG,CAAC,MAAM;UACL3H,gBAAgB,CAAC6H,YAAY,CAAC;UAC9BzF,OAAO,CAACO,GAAG,CAAC,yBAAyBvB,IAAI,oDAAoD,CAAC;QAChG;QAEAhB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;MAChB;;MAEA;MACAyF,UAAU,CAAC,MAAM;QACf,MAAMkC,aAAa,GAAGtI,gBAAgB,CAACgD,MAAM,CAAC1B,IAAI,IAChD6G,YAAY,CAACrG,GAAG,CAACR,IAAI,CAACK,IAAI,CAAC,IAAIL,IAAI,CAAC8C,IAAI,KAAK,MAAM,IAAI9C,IAAI,CAACE,KAC9D,CAAC;;QAED;QACA,IAAI9B,eAAe,EAAE;UACnBA,eAAe,CAAC4I,aAAa,CAAC;QAChC;MACF,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;;MAET,OAAOH,YAAY;IACrB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACnI,gBAAgB,EAAEN,eAAe,CAAC,CAAC;;EAEvC;EACA;EACA;;EAEA,MAAM6I,gBAAgB,GAAGzJ,WAAW,CAAE8H,UAAkB,IAAK;IAC3D/F,cAAc,CAAC4B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE7C,WAAW,CAAC,CAAC;IAC9CC,cAAc,CAAC+G,UAAU,CAAC;IAC1BzG,gBAAgB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;IAC3BG,gBAAgB,CAAC,IAAIH,GAAG,CAAC,CAAC,CAAC;IAC3BO,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC,EAAE,CAACf,WAAW,CAAC,CAAC;EAEjB,MAAM4I,YAAY,GAAG1J,WAAW,CAAC,MAAM;IACrC,IAAI8B,WAAW,CAACqC,MAAM,GAAG,CAAC,EAAE;MAC1B,MAAMwF,YAAY,GAAG7H,WAAW,CAACA,WAAW,CAACqC,MAAM,GAAG,CAAC,CAAC;MACxDpC,cAAc,CAAC4B,IAAI,IAAIA,IAAI,CAACc,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACzC1D,cAAc,CAAC4I,YAAY,CAAC;MAC5BtI,gBAAgB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;IAC7B;EACF,CAAC,EAAE,CAACQ,WAAW,CAAC,CAAC;EAEjB,MAAM8H,cAAc,GAAG5J,WAAW,CAAC,MAAM;IACvCe,cAAc,CAAC,EAAE,CAAC;IAClBgB,cAAc,CAAC,EAAE,CAAC;IAClBd,iBAAiB,CAAC,EAAE,CAAC;IACrBI,gBAAgB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;EAC7B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;;EAEA,MAAMuI,cAAc,GAAG7J,WAAW,CAAC,MAAM;IACvCqB,gBAAgB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;IAC3BG,gBAAgB,CAAC,IAAIH,GAAG,CAAC,CAAC,CAAC;IAC3BO,QAAQ,CAAC,EAAE,CAAC;;IAEZ;IACA,IAAIjB,eAAe,EAAE;MACnBA,eAAe,CAAC,EAAE,CAAC;IACrB;EACF,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;EAErB,MAAMkJ,mBAAmB,GAAG9J,WAAW,CAAC,MAAM;IAC5CqC,iBAAiB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;IAC5B;IACA,IAAItB,cAAc,CAACmD,MAAM,GAAG,CAAC,EAAE;MAC7BmD,UAAU,CAAC,MAAMvD,qBAAqB,CAAC/C,cAAc,CAAC,EAAE,GAAG,CAAC;IAC9D;EACF,CAAC,EAAE,CAACA,cAAc,EAAE+C,qBAAqB,CAAC,CAAC;;EAE3C;EACA;EACA;;EAEA,MAAMgG,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAI,CAACjJ,WAAW,EAAE,OAAO,IAAI;IAE7B,MAAM4G,SAAS,GAAG5G,WAAW,CAAC8G,KAAK,CAAC,GAAG,CAAC;IAExC,oBACEvH,OAAA;MAAK2J,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9B5J,OAAA;QAAQ6J,OAAO,EAAEN,cAAe;QAACI,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EAAC;MAElE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACR5C,SAAS,CAAC7C,GAAG,CAAC,CAAC0F,IAAI,EAAExF,KAAK,kBACzB1E,OAAA,CAACP,KAAK,CAACQ,QAAQ;QAAA2J,QAAA,gBACb5J,OAAA;UAAM2J,SAAS,EAAC,sBAAsB;UAAAC,QAAA,EAAC;QAAC;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC/CjK,OAAA;UAAM2J,SAAS,EAAC,iBAAiB;UAAAC,QAAA,EAAEM;QAAI;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA,GAF5BvF,KAAK;QAAAoF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGV,CACjB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV,CAAC;EAED,MAAME,gBAAgB,GAAIhI,IAAgB,IAAK;IAC7C,MAAMiI,UAAU,GAAGrJ,aAAa,CAAC4B,GAAG,CAACR,IAAI,CAACK,IAAI,CAAC;IAC/C,MAAM6H,YAAY,GAAGlI,IAAI,CAAC8C,IAAI,KAAK,MAAM,IAAI9C,IAAI,CAACE,KAAK;IAEvD,oBACErC,OAAA;MAEE2J,SAAS,EAAE,eAAexH,IAAI,CAAC8C,IAAI,IAAImF,UAAU,GAAG,UAAU,GAAG,EAAE,IAAIC,YAAY,GAAG,YAAY,GAAG,EAAE,EAAG;MAC1GR,OAAO,EAAEA,CAAA,KAAM;QACb,IAAI1H,IAAI,CAAC8C,IAAI,KAAK,QAAQ,EAAE;UAC1BmE,gBAAgB,CAACjH,IAAI,CAACK,IAAI,CAAC;QAC7B,CAAC,MAAM,IAAI6H,YAAY,EAAE;UACvBvB,mBAAmB,CAAC3G,IAAI,CAACK,IAAI,EAAEL,IAAI,CAAC+C,YAAY,CAAC;QACnD;MACF,CAAE;MAAA0E,QAAA,gBAEF5J,OAAA;QAAK2J,SAAS,EAAC,WAAW;QAAAC,QAAA,EACvBzH,IAAI,CAAC8C,IAAI,KAAK,QAAQ,GAAG,IAAI,GAAG9C,IAAI,CAACE,KAAK,GAAG,IAAI,GAAG;MAAI;QAAAyH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD,CAAC,eACNjK,OAAA;QAAK2J,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3B5J,OAAA;UAAK2J,SAAS,EAAC,WAAW;UAAAC,QAAA,EAAEzH,IAAI,CAACkB;QAAI;UAAAyG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,EAC3C9H,IAAI,CAAC8C,IAAI,KAAK,MAAM,IAAI9C,IAAI,CAACE,KAAK,iBACjCrC,OAAA;UAAK2J,SAAS,EAAC,WAAW;UAAAC,QAAA,gBACxB5J,OAAA;YAAK2J,SAAS,EAAC,WAAW;YAAAC,QAAA,GACvBzH,IAAI,CAAC+C,YAAY,iBAChBlF,OAAA;cAAM2J,SAAS,EAAE,kBAAkBxH,IAAI,CAAC2E,cAAc,EAAG;cAAA8C,QAAA,EACtDzH,IAAI,CAAC+C;YAAY;cAAA4E,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACd,CACP,EACA,CAAC9H,IAAI,CAAC+C,YAAY,iBACjBlF,OAAA;cAAM2J,SAAS,EAAC,wBAAwB;cAAAC,QAAA,EAAC;YAEzC;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CACP;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,EACL9H,IAAI,CAAC2C,iBAAiB,iBACrB9E,OAAA;YAAK2J,SAAS,EAAC,gBAAgB;YAAAC,QAAA,eAC7B5J,OAAA;cACE2J,SAAS,EAAC,qBAAqB;cAC/BW,KAAK,EAAE;gBAAEC,KAAK,EAAE1K,oBAAoB,CAAC2K,iBAAiB,CAACrI,IAAI,CAAC2C,iBAAiB,CAACa,cAAc;cAAE,CAAE;cAChGtF,KAAK,EAAE,cAAc8B,IAAI,CAAC2C,iBAAiB,CAACa,cAAc,SAAS9F,oBAAoB,CAAC4K,uBAAuB,CAACtI,IAAI,CAAC2C,iBAAiB,CAACa,cAAc,CAAC,GAAI;cAAAiE,QAAA,GAEzJ/J,oBAAoB,CAAC6K,iBAAiB,CAACvI,IAAI,CAAC2C,iBAAiB,CAACa,cAAc,CAAC,EAAC,GAAC,EAACxD,IAAI,CAAC2C,iBAAiB,CAACa,cAAc;YAAA;cAAAmE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClH;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CACN,EACA,CAAC9H,IAAI,CAAC2C,iBAAiB,IAAIjD,gBAAgB,iBAC1C7B,OAAA;YAAK2J,SAAS,EAAC,gBAAgB;YAAAC,QAAA,eAC7B5J,OAAA;cAAM2J,SAAS,EAAC,mBAAmB;cAAAC,QAAA,EAAC;YAAM;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9C,CACN;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,EACLI,YAAY,iBACXrK,OAAA;QAAK2J,SAAS,EAAC,qBAAqB;QAAAC,QAAA,eAClC5J,OAAA;UACEiF,IAAI,EAAC,UAAU;UACf0F,OAAO,EAAEP,UAAW;UACpBQ,QAAQ,EAAEA,CAAA,KAAM9B,mBAAmB,CAAC3G,IAAI,CAACK,IAAI,EAAEL,IAAI,CAAC+C,YAAY,CAAE;UAClE2E,OAAO,EAAGpB,CAAC,IAAKA,CAAC,CAACoC,eAAe,CAAC;QAAE;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CACN;IAAA,GAzDI9H,IAAI,CAACK,IAAI;MAAAsH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OA0DX,CAAC;EAEV,CAAC;;EAED;EACA;EACA;;EAEA,oBACEjK,OAAA;IAAK2J,SAAS,EAAC,gBAAgB;IAAC,iBAAevJ,OAAQ;IAAAwJ,QAAA,gBACrD5J,OAAA;MAAK2J,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7B5J,OAAA;QACE6J,OAAO,EAAE,CAACxI,SAAS,GAAG2G,gBAAgB,GAAGxB,SAAU;QACnD8D,KAAK,EAAE;UACLQ,MAAM,EAAE,CAACzJ,SAAS,GAAG,SAAS,GAAG,SAAS;UAC1C0J,UAAU,EAAE,MAAM;UAClBR,KAAK,EAAE,CAAC9J,WAAW,GAAG,SAAS,GAAG;QACpC,CAAE;QACFJ,KAAK,EAAE,CAACI,WAAW,GAAG,sBAAsB,GAAG,2BAA2BA,WAAW,GAAI;QAAAmJ,QAAA,GAExFvJ,KAAK,EACLI,WAAW,GAAG,MAAMA,WAAW,EAAE,GAAG,8BAA8B;MAAA;QAAAqJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjE,CAAC,eACLjK,OAAA;QAAK2J,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/B5J,OAAA;UACE6J,OAAO,EAAE7B,gBAAiB;UAC1B2B,SAAS,EAAC,iBAAiB;UAC3BqB,QAAQ,EAAE3J,SAAU;UAAAuI,QAAA,EAEnBnJ,WAAW,GAAG,eAAe,GAAG;QAAa;UAAAqJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC,CAAC,EACRxI,WAAW,CAACqC,MAAM,GAAG,CAAC,iBACrB9D,OAAA;UAAQ6J,OAAO,EAAER,YAAa;UAACM,SAAS,EAAC,UAAU;UAAAC,QAAA,EAAC;QAEpD;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACT;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAEG1I,KAAK,iBACVvB,OAAA;MAAK2J,SAAS,EAAC,eAAe;MAAAC,QAAA,EAC3BrI;IAAK;MAAAuI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,EAEFxJ,WAAW,iBACVT,OAAA,CAAAE,SAAA;MAAA0J,QAAA,GACGF,oBAAoB,CAAC,CAAC,eAGvB1J,OAAA;QAAK2J,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9B5J,OAAA;UAAK2J,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7B5J,OAAA;YAAOiL,OAAO,EAAE,eAAe7K,OAAO,EAAG;YAACuJ,SAAS,EAAC,cAAc;YAAAC,QAAA,EAAC;UAEnE;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACRjK,OAAA;YACEkL,EAAE,EAAE,eAAe9K,OAAO,EAAG;YAC7B+K,KAAK,EAAEjK,kBAAmB;YAC1B0J,QAAQ,EAAGnC,CAAC,IAAK;cACftH,qBAAqB,CAACsH,CAAC,CAACC,MAAM,CAACyC,KAAyB,CAAC;cACzDpG,YAAY,CAACpE,cAAc,CAAC;YAC9B,CAAE;YACFgJ,SAAS,EAAC,oBAAoB;YAAAC,QAAA,gBAE9B5J,OAAA;cAAQmL,KAAK,EAAC,KAAK;cAAAvB,QAAA,EAAC;YAAS;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACrCmB,MAAM,CAAChF,OAAO,CAACtG,gBAAgB,CAAC,CAAC0E,GAAG,CAAC,CAAC,CAAC6G,QAAQ,EAAEC,UAAU,CAAC,KAAK;cAChE,MAAMC,KAAK,GAAG5K,cAAc,CAACkD,MAAM,CAAC1B,IAAI,IAAIA,IAAI,CAAC+C,YAAY,KAAKmG,QAAQ,CAAC,CAACvH,MAAM;cAClF,oBACE9D,OAAA;gBAAuBmL,KAAK,EAAEE,QAAS;gBAAAzB,QAAA,GACpCyB,QAAQ,EAAC,IAAE,EAACC,UAAU,CAACE,KAAK,EAAC,IAAE,EAACD,KAAK,EAAC,SACzC;cAAA,GAFaF,QAAQ;gBAAAvB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEb,CAAC;YAEb,CAAC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACNjK,OAAA;UAAK2J,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7B5J,OAAA;YAAOiL,OAAO,EAAE,eAAe7K,OAAO,EAAG;YAACuJ,SAAS,EAAC,cAAc;YAAAC,QAAA,EAAC;UAEnE;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACRjK,OAAA;YACEkL,EAAE,EAAE,eAAe9K,OAAO,EAAG;YAC7B+K,KAAK,EAAExJ,MAAO;YACdiJ,QAAQ,EAAGnC,CAAC,IAAK;cACf7G,SAAS,CAAC6G,CAAC,CAACC,MAAM,CAACyC,KAAsC,CAAC;cAC1DpG,YAAY,CAACpE,cAAc,CAAC;YAC9B,CAAE;YACFgJ,SAAS,EAAC,oBAAoB;YAAAC,QAAA,gBAE9B5J,OAAA;cAAQmL,KAAK,EAAC,WAAW;cAAAvB,QAAA,EAAC;YAAuB;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC1DjK,OAAA;cAAQmL,KAAK,EAAC,MAAM;cAAAvB,QAAA,EAAC;YAAO;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACrCjK,OAAA;cAAQmL,KAAK,EAAC,MAAM;cAAAvB,QAAA,EAAC;YAAO;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACNjK,OAAA;UAAK2J,SAAS,EAAC,gBAAgB;UAAAC,QAAA,GAC5B/H,gBAAgB,iBACf7B,OAAA;YAAM2J,SAAS,EAAC,iBAAiB;YAAAC,QAAA,EAAC;UAElC;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CACP,EACA,CAACpI,gBAAgB,IAAIF,MAAM,KAAK,WAAW,IAAId,gBAAgB,CAAC4K,IAAI,CAACtJ,IAAI,IAAIA,IAAI,CAAC2C,iBAAiB,CAAC,iBACnG9E,OAAA;YAAM2J,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAAC;UAEjC;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CACP,eACDjK,OAAA;YACE6J,OAAO,EAAEL,cAAe;YACxBwB,QAAQ,EAAEjK,aAAa,CAAC0F,IAAI,KAAK,CAAE;YACnCkD,SAAS,EAAC,eAAe;YAAAC,QAAA,EAExB7I,aAAa,CAAC0F,IAAI,GAAG,CAAC,GAAG,iBAAiB,GAAG;UAAW;YAAAqD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnD,CAAC,EACRyB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,iBACrC5L,OAAA;YACE6J,OAAO,EAAEJ,mBAAoB;YAC7BE,SAAS,EAAC,iBAAiB;YAC3BtJ,KAAK,EAAC,sCAAsC;YAAAuJ,QAAA,EAC7C;UAED;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CACT;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA,eACN,CACH,eAEDjK,OAAA;MAAK2J,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAC7B,CAACnJ,WAAW,gBACXT,OAAA;QAAK2J,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1B5J,OAAA;UAAK2J,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAE;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACpCjK,OAAA;UAAA4J,QAAA,EAAG;QAAkD;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD,CAAC,GACJ5I,SAAS,gBACXrB,OAAA;QAAK2J,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5B5J,OAAA;UAAK2J,SAAS,EAAC,SAAS;UAAAC,QAAA,EAAC;QAAC;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAChCjK,OAAA;UAAA4J,QAAA,EAAG;QAA0B;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B,CAAC,GACJpJ,gBAAgB,CAACiD,MAAM,KAAK,CAAC,gBAC/B9D,OAAA;QAAK2J,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3B5J,OAAA;UAAK2J,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAE;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACpCjK,OAAA;UAAA4J,QAAA,EAAI1I,kBAAkB,KAAK,KAAK,GAAG,+BAA+BA,kBAAkB,EAAE,GAAG;QAAsB;UAAA4I,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACnH/I,kBAAkB,KAAK,KAAK,IAAIP,cAAc,CAACmD,MAAM,GAAG,CAAC,iBACxD9D,OAAA;UAAA4J,QAAA,EAAO;QAA0C;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CACzD;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,gBAENjK,OAAA;QAAK2J,SAAS,EAAC,YAAY;QAAAC,QAAA,EACxB/I,gBAAgB,CAAC2D,GAAG,CAAC2F,gBAAgB;MAAC;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzJ,EAAA,CA/qBWL,aAA2C;AAAA0L,EAAA,GAA3C1L,aAA2C;AAirBxD,eAAeA,aAAa;AAAC,IAAA0L,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}